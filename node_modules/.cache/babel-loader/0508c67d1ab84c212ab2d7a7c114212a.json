{"ast":null,"code":"const distanceObj = {\n  active: false,\n  type: 'included',\n  included: {\n    distanceMatrix: []\n  },\n  excluded: {\n    distanceMatrix: []\n  }\n};\nconst regionObj = {\n  active: false,\n  type: 'included',\n  countries: [],\n  excluded: []\n};\nexport const getInitialValues = values => ({\n  region: (values === null || values === void 0 ? void 0 : values.region) || regionObj,\n  distance: (values === null || values === void 0 ? void 0 : values.distance) || distanceObj,\n  overlap: (values === null || values === void 0 ? void 0 : values.overlap) || ''\n});\nexport function getInitialCountryValues() {\n  return {\n    enabled: false,\n    whole: false,\n    name: '',\n    regions: []\n  };\n}\nexport function getInitialRegionValues() {\n  return {\n    enabled: true,\n    name: '',\n    regionType: 'pincode',\n    pincode: {\n      type: 'included',\n      excluded: [],\n      included: []\n    },\n    polygon: {}\n  };\n}\nexport function getInitialPincodeValues() {\n  return {\n    type: 'included',\n    name: '',\n    excluded: [],\n    included: []\n  };\n}\nexport function getInitialExcludedOrIncludedValues() {\n  return {\n    _id: '',\n    name: '',\n    enabled: false,\n    value: ''\n  };\n}\nexport const distanceTypes = [{\n  label: 'Miles',\n  value: 'Miles'\n}, {\n  label: 'Kilometers',\n  value: 'Kilometers'\n}];\nexport function getIntialValuesForDistanceMatrix() {\n  return {\n    name: '',\n    min: '',\n    max: '',\n    type: '',\n    enabled: true\n  };\n}","map":{"version":3,"sources":["/home/harish/windo/phoenix/src/containers/profile/areasServed/utils.js"],"names":["distanceObj","active","type","included","distanceMatrix","excluded","regionObj","countries","getInitialValues","values","region","distance","overlap","getInitialCountryValues","enabled","whole","name","regions","getInitialRegionValues","regionType","pincode","polygon","getInitialPincodeValues","getInitialExcludedOrIncludedValues","_id","value","distanceTypes","label","getIntialValuesForDistanceMatrix","min","max"],"mappings":"AAAA,MAAMA,WAAW,GAAG;AAClBC,EAAAA,MAAM,EAAE,KADU;AAElBC,EAAAA,IAAI,EAAE,UAFY;AAGlBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,cAAc,EAAE;AADR,GAHQ;AAMlBC,EAAAA,QAAQ,EAAE;AACRD,IAAAA,cAAc,EAAE;AADR;AANQ,CAApB;AAWA,MAAME,SAAS,GAAG;AAChBL,EAAAA,MAAM,EAAE,KADQ;AAEhBC,EAAAA,IAAI,EAAE,UAFU;AAGhBK,EAAAA,SAAS,EAAE,EAHK;AAIhBF,EAAAA,QAAQ,EAAE;AAJM,CAAlB;AAMA,OAAO,MAAMG,gBAAgB,GAAIC,MAAD,KAAa;AAC3CC,EAAAA,MAAM,EAAE,CAAAD,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEC,MAAR,KAAkBJ,SADiB;AAE3CK,EAAAA,QAAQ,EAAE,CAAAF,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEE,QAAR,KAAoBX,WAFa;AAG3CY,EAAAA,OAAO,EAAE,CAAAH,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEG,OAAR,KAAmB;AAHe,CAAb,CAAzB;AAMP,OAAO,SAASC,uBAAT,GAAmC;AACxC,SAAO;AACLC,IAAAA,OAAO,EAAE,KADJ;AAELC,IAAAA,KAAK,EAAE,KAFF;AAGLC,IAAAA,IAAI,EAAE,EAHD;AAILC,IAAAA,OAAO,EAAE;AAJJ,GAAP;AAMD;AAED,OAAO,SAASC,sBAAT,GAAkC;AACvC,SAAO;AACLJ,IAAAA,OAAO,EAAE,IADJ;AAELE,IAAAA,IAAI,EAAE,EAFD;AAGLG,IAAAA,UAAU,EAAE,SAHP;AAILC,IAAAA,OAAO,EAAE;AACPlB,MAAAA,IAAI,EAAE,UADC;AAEPG,MAAAA,QAAQ,EAAE,EAFH;AAGPF,MAAAA,QAAQ,EAAE;AAHH,KAJJ;AASLkB,IAAAA,OAAO,EAAE;AATJ,GAAP;AAWD;AAED,OAAO,SAASC,uBAAT,GAAmC;AACxC,SAAO;AACLpB,IAAAA,IAAI,EAAE,UADD;AAELc,IAAAA,IAAI,EAAE,EAFD;AAGLX,IAAAA,QAAQ,EAAE,EAHL;AAILF,IAAAA,QAAQ,EAAE;AAJL,GAAP;AAMD;AAED,OAAO,SAASoB,kCAAT,GAA8C;AACnD,SAAO;AACLC,IAAAA,GAAG,EAAE,EADA;AAELR,IAAAA,IAAI,EAAE,EAFD;AAGLF,IAAAA,OAAO,EAAE,KAHJ;AAILW,IAAAA,KAAK,EAAE;AAJF,GAAP;AAMD;AAED,OAAO,MAAMC,aAAa,GAAG,CAC3B;AACEC,EAAAA,KAAK,EAAE,OADT;AAEEF,EAAAA,KAAK,EAAE;AAFT,CAD2B,EAK3B;AACEE,EAAAA,KAAK,EAAE,YADT;AAEEF,EAAAA,KAAK,EAAE;AAFT,CAL2B,CAAtB;AAWP,OAAO,SAASG,gCAAT,GAA4C;AACjD,SAAO;AACLZ,IAAAA,IAAI,EAAE,EADD;AAELa,IAAAA,GAAG,EAAE,EAFA;AAGLC,IAAAA,GAAG,EAAE,EAHA;AAIL5B,IAAAA,IAAI,EAAE,EAJD;AAKLY,IAAAA,OAAO,EAAE;AALJ,GAAP;AAOD","sourcesContent":["const distanceObj = {\n  active: false,\n  type: 'included',\n  included: {\n    distanceMatrix: [],\n  },\n  excluded: {\n    distanceMatrix: [],\n  },\n};\n\nconst regionObj = {\n  active: false,\n  type: 'included',\n  countries: [],\n  excluded: []\n};\nexport const getInitialValues = (values) => ({\n  region: values?.region || regionObj,\n  distance: values?.distance || distanceObj,\n  overlap: values?.overlap || '',\n});\n\nexport function getInitialCountryValues() {\n  return {\n    enabled: false,\n    whole: false,\n    name: '',\n    regions: [],\n  };\n}\n\nexport function getInitialRegionValues() {\n  return {\n    enabled: true,\n    name: '',\n    regionType: 'pincode',\n    pincode: {\n      type: 'included',\n      excluded: [],\n      included: []\n    },\n    polygon: {},\n  };\n}\n\nexport function getInitialPincodeValues() {\n  return {\n    type: 'included',\n    name: '',\n    excluded: [],\n    included: []\n  };\n}\n\nexport function getInitialExcludedOrIncludedValues() {\n  return {\n    _id: '',\n    name: '',\n    enabled: false,\n    value: ''\n  };\n}\n\nexport const distanceTypes = [\n  {\n    label: 'Miles',\n    value: 'Miles'\n  },\n  {\n    label: 'Kilometers',\n    value: 'Kilometers'\n  }\n];\n\nexport function getIntialValuesForDistanceMatrix() {\n  return {\n    name: '',\n    min: '',\n    max: '',\n    type: '',\n    enabled: true,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}