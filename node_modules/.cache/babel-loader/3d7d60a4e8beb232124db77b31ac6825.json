{"ast":null,"code":"var _jsxFileName = \"/home/harish/windo/phoenix/src/components/products/DescriptionDraw.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Drawer } from \"../shared/Drawer\";\nimport { SideDrawer } from \"../shared/SideDrawer\";\nimport { useField } from 'formik';\nimport { Editor } from '@tinymce/tinymce-react';\nimport { Button } from 'phoenix-components';\nimport CONFIG from \"../../config\";\nimport Loader from \"../../services/loader\";\nimport { cssStyle } from \"../../constants/tinymce\";\nimport { useDesktop } from \"../../contexts\";\nimport { convertHTML } from \"./variantUtils\";\nimport styles from \"./DescriptionDraw.module.css\";\nexport function DescriptionDraw({\n  onClose,\n  title,\n  placeholder\n}) {\n  _s();\n\n  const [{\n    value: description\n  },, {\n    setValue\n  }] = useField('description');\n  const [,, {\n    setValue: setPlain\n  }] = useField('plainDescription');\n  const isDesktop = useDesktop();\n\n  const onChange = value => {\n    setValue(value);\n\n    if (value) {\n      setPlain(convertHTML(value));\n    }\n  };\n\n  useEffect(() => {\n    Loader.show();\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, !isDesktop && /*#__PURE__*/React.createElement(Drawer, {\n    onClose: onClose,\n    closeButton: true,\n    title: title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    translate: \"no\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Editor, {\n    value: description,\n    apiKey: CONFIG.TINYMCE.key,\n    scriptLoading: {\n      async: true\n    },\n    onInit: () => {\n      Loader.hide();\n    },\n    init: {\n      menubar: false,\n      toolbar: false,\n      height: '40vh',\n      width: '100%',\n      placeholder,\n      statusbar: false,\n      branding: false,\n      selector: 'textarea',\n      paste_data_images: false,\n      plugins: ['paste']\n    },\n    onEditorChange: onChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.button,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    label: \"Save\",\n    onClick: onClose,\n    primary: true,\n    fullWidth: true,\n    bordered: false,\n    size: \"large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  })))), isDesktop && /*#__PURE__*/React.createElement(SideDrawer, {\n    onClose: onClose,\n    closeButton: true,\n    title: \"Add Description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    translate: \"no\",\n    className: styles.editor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Editor, {\n    value: description,\n    apiKey: CONFIG.TINYMCE.key,\n    scriptLoading: {\n      async: true\n    },\n    onInit: () => {\n      Loader.hide();\n    },\n    init: {\n      menubar: false,\n      toolbar: false,\n      height: '40vh',\n      width: '100%',\n      placeholder,\n      statusbar: false,\n      branding: false,\n      selector: 'textarea',\n      paste_data_images: false,\n      content_style: cssStyle,\n      plugins: ['paste']\n    },\n    onEditorChange: onChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.button,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    label: \"Save\",\n    onClick: onClose,\n    primary: true,\n    size: \"large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }\n  })))));\n}\n\n_s(DescriptionDraw, \"Gq877+FwEdTHosRAd6s+yz75Jx4=\", false, function () {\n  return [useField, useField, useDesktop];\n});\n\n_c = DescriptionDraw;\nDescriptionDraw.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  title: PropTypes.string,\n  placeholder: PropTypes.string\n};\nDescriptionDraw.defaultProps = {\n  title: 'Add Description',\n  placeholder: 'Type about your product'\n};\nDescriptionDraw.defaultProps = {};\n\nvar _c;\n\n$RefreshReg$(_c, \"DescriptionDraw\");","map":{"version":3,"sources":["/home/harish/windo/phoenix/src/components/products/DescriptionDraw.jsx"],"names":["React","useEffect","PropTypes","Drawer","SideDrawer","useField","Editor","Button","CONFIG","Loader","cssStyle","useDesktop","convertHTML","styles","DescriptionDraw","onClose","title","placeholder","value","description","setValue","setPlain","isDesktop","onChange","show","TINYMCE","key","async","hide","menubar","toolbar","height","width","statusbar","branding","selector","paste_data_images","plugins","button","editor","content_style","propTypes","func","isRequired","string","defaultProps"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Drawer } from 'components/shared/Drawer';\nimport { SideDrawer } from 'components/shared/SideDrawer';\nimport { useField } from 'formik';\nimport { Editor } from '@tinymce/tinymce-react';\nimport { Button } from 'phoenix-components';\nimport CONFIG from 'config';\nimport Loader from 'services/loader';\nimport { cssStyle } from 'constants/tinymce';\nimport { useDesktop } from 'contexts';\nimport { convertHTML } from 'components/products/variantUtils';\nimport styles from './DescriptionDraw.module.css';\n\nexport function DescriptionDraw({\n  onClose, title, placeholder\n}) {\n  const [{ value: description }, , { setValue }] = useField('description');\n  const [, , { setValue: setPlain }] = useField('plainDescription');\n  const isDesktop = useDesktop();\n  const onChange = (value) => {\n    setValue(value);\n    if (value) {\n      setPlain(convertHTML(value));\n    }\n  };\n\n  useEffect(() => {\n    Loader.show();\n  }, []);\n\n  return (\n    <>\n      {!isDesktop\n    && (\n      <Drawer\n        onClose={onClose}\n        closeButton\n        title={title}\n      >\n        <div translate=\"no\">\n          {/* {showDummy && (\n            <div className={styles.dummy}>\n              {placeholder}\n            </div>\n          )} */}\n          <Editor\n            value={description}\n            apiKey={CONFIG.TINYMCE.key}\n            scriptLoading={{ async: true }}\n            onInit={() => {\n              Loader.hide();\n            }}\n            init={{\n              menubar: false,\n              toolbar: false,\n              height: '40vh',\n              width: '100%',\n              placeholder,\n              statusbar: false,\n              branding: false,\n              selector: 'textarea',\n              paste_data_images: false,\n              plugins: [\n                'paste'\n              ],\n            }}\n            onEditorChange={onChange}\n          />\n          <div className={styles.button}>\n            <Button\n              label=\"Save\"\n              onClick={onClose}\n              primary\n              fullWidth\n              bordered={false}\n              size=\"large\"\n            />\n          </div>\n        </div>\n      </Drawer>\n    )}\n      {isDesktop\n    && (\n      <SideDrawer\n        onClose={onClose}\n        closeButton\n        title=\"Add Description\"\n      >\n        <div translate=\"no\" className={styles.editor}>\n          <Editor\n            value={description}\n            apiKey={CONFIG.TINYMCE.key}\n            scriptLoading={{ async: true }}\n            onInit={() => {\n              Loader.hide();\n            }}\n            init={{\n              menubar: false,\n              toolbar: false,\n              height: '40vh',\n              width: '100%',\n              placeholder,\n              statusbar: false,\n              branding: false,\n              selector: 'textarea',\n              paste_data_images: false,\n              content_style: cssStyle,\n              plugins: [\n                'paste'\n              ],\n            }}\n            onEditorChange={onChange}\n          />\n          <div className={styles.button}>\n            <Button\n              label=\"Save\"\n              onClick={onClose}\n              primary\n              size=\"large\"\n            />\n          </div>\n        </div>\n      </SideDrawer>\n    )}\n    </>\n  );\n}\n\nDescriptionDraw.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  title: PropTypes.string,\n  placeholder: PropTypes.string\n};\n\nDescriptionDraw.defaultProps = {\n  title: 'Add Description',\n  placeholder: 'Type about your product'\n};\n\nDescriptionDraw.defaultProps = {};\n"]},"metadata":{},"sourceType":"module"}