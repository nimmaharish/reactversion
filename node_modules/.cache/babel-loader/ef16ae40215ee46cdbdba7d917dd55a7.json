{"ast":null,"code":"import { __read, __spread } from \"tslib\";\nimport { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { isInstanceOf } from '@sentry/utils';\nimport { exceptionFromStacktrace } from '../parsers';\nimport { computeStackTrace } from '../tracekit';\nvar DEFAULT_KEY = 'cause';\nvar DEFAULT_LIMIT = 5;\n/** Adds SDK info to an event. */\n\nvar LinkedErrors =\n/** @class */\nfunction () {\n  /**\n   * @inheritDoc\n   */\n  function LinkedErrors(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    /**\n     * @inheritDoc\n     */\n\n\n    this.name = LinkedErrors.id;\n    this._key = options.key || DEFAULT_KEY;\n    this._limit = options.limit || DEFAULT_LIMIT;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  LinkedErrors.prototype.setupOnce = function () {\n    addGlobalEventProcessor(function (event, hint) {\n      var self = getCurrentHub().getIntegration(LinkedErrors);\n      return self ? _handler(self._key, self._limit, event, hint) : event;\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  LinkedErrors.id = 'LinkedErrors';\n  return LinkedErrors;\n}();\n\nexport { LinkedErrors };\n/**\n * @inheritDoc\n */\n\nexport function _handler(key, limit, event, hint) {\n  if (!event.exception || !event.exception.values || !hint || !isInstanceOf(hint.originalException, Error)) {\n    return event;\n  }\n\n  var linkedErrors = _walkErrorTree(limit, hint.originalException, key);\n\n  event.exception.values = __spread(linkedErrors, event.exception.values);\n  return event;\n}\n/**\n * JSDOC\n */\n\nexport function _walkErrorTree(limit, error, key, stack) {\n  if (stack === void 0) {\n    stack = [];\n  }\n\n  if (!isInstanceOf(error[key], Error) || stack.length + 1 >= limit) {\n    return stack;\n  }\n\n  var stacktrace = computeStackTrace(error[key]);\n  var exception = exceptionFromStacktrace(stacktrace);\n  return _walkErrorTree(limit, error[key], key, __spread([exception], stack));\n}","map":{"version":3,"sources":["../../src/integrations/linkederrors.ts"],"names":[],"mappings":";AAAA,SAAS,uBAAT,EAAkC,aAAlC,QAAuD,cAAvD;AAEA,SAAS,YAAT,QAA6B,eAA7B;AAEA,SAAS,uBAAT,QAAwC,YAAxC;AACA,SAAS,iBAAT,QAAkC,aAAlC;AAEA,IAAM,WAAW,GAAG,OAApB;AACA,IAAM,aAAa,GAAG,CAAtB;AAOA;;AACA,IAAA,YAAA;AAAA;AAAA,YAAA;AAqBE;;AAEG;AACH,WAAA,YAAA,CAAmB,OAAnB,EAA6D;AAA1C,QAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,OAAA,GAAA,EAAA;AAA0C;AAlB7D;;AAEG;;;AACa,SAAA,IAAA,GAAe,YAAY,CAAC,EAA5B;AAgBd,SAAK,IAAL,GAAY,OAAO,CAAC,GAAR,IAAe,WAA3B;AACA,SAAK,MAAL,GAAc,OAAO,CAAC,KAAR,IAAiB,aAA/B;AACD;AAED;;AAEG;;;AACI,EAAA,YAAA,CAAA,SAAA,CAAA,SAAA,GAAP,YAAA;AACE,IAAA,uBAAuB,CAAC,UAAC,KAAD,EAAe,IAAf,EAA+B;AACrD,UAAM,IAAI,GAAG,aAAa,GAAG,cAAhB,CAA+B,YAA/B,CAAb;AACA,aAAO,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAN,EAAY,IAAI,CAAC,MAAjB,EAAyB,KAAzB,EAAgC,IAAhC,CAAX,GAAmD,KAA9D;AACD,KAHsB,CAAvB;AAID,GALM;AA/BP;;AAEG;;;AACW,EAAA,YAAA,CAAA,EAAA,GAAa,cAAb;AAkChB,SAAA,YAAA;AAAC,CAtCD,EAAA;;SAAa,Y;AAwCb;;AAEG;;AACH,OAAM,SAAU,QAAV,CAAmB,GAAnB,EAAgC,KAAhC,EAA+C,KAA/C,EAA6D,IAA7D,EAA6E;AACjF,MAAI,CAAC,KAAK,CAAC,SAAP,IAAoB,CAAC,KAAK,CAAC,SAAN,CAAgB,MAArC,IAA+C,CAAC,IAAhD,IAAwD,CAAC,YAAY,CAAC,IAAI,CAAC,iBAAN,EAAyB,KAAzB,CAAzE,EAA0G;AACxG,WAAO,KAAP;AACD;;AACD,MAAM,YAAY,GAAG,cAAc,CAAC,KAAD,EAAQ,IAAI,CAAC,iBAAb,EAAiD,GAAjD,CAAnC;;AACA,EAAA,KAAK,CAAC,SAAN,CAAgB,MAAhB,GAAsB,QAAA,CAAO,YAAP,EAAwB,KAAK,CAAC,SAAN,CAAgB,MAAxC,CAAtB;AACA,SAAO,KAAP;AACD;AAED;;AAEG;;AACH,OAAM,SAAU,cAAV,CAAyB,KAAzB,EAAwC,KAAxC,EAA8D,GAA9D,EAA2E,KAA3E,EAAkG;AAAvB,MAAA,KAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,KAAA,GAAA,EAAA;AAAuB;;AACtG,MAAI,CAAC,YAAY,CAAC,KAAK,CAAC,GAAD,CAAN,EAAa,KAAb,CAAb,IAAoC,KAAK,CAAC,MAAN,GAAe,CAAf,IAAoB,KAA5D,EAAmE;AACjE,WAAO,KAAP;AACD;;AACD,MAAM,UAAU,GAAG,iBAAiB,CAAC,KAAK,CAAC,GAAD,CAAN,CAApC;AACA,MAAM,SAAS,GAAG,uBAAuB,CAAC,UAAD,CAAzC;AACA,SAAO,cAAc,CAAC,KAAD,EAAQ,KAAK,CAAC,GAAD,CAAb,EAAoB,GAApB,EAAuB,QAAA,CAAA,CAAG,SAAH,CAAA,EAAiB,KAAjB,CAAvB,CAArB;AACD","sourcesContent":["import { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { Event, EventHint, Exception, ExtendedError, Integration } from '@sentry/types';\nimport { isInstanceOf } from '@sentry/utils';\n\nimport { exceptionFromStacktrace } from '../parsers';\nimport { computeStackTrace } from '../tracekit';\n\nconst DEFAULT_KEY = 'cause';\nconst DEFAULT_LIMIT = 5;\n\ninterface LinkedErrorsOptions {\n  key: string;\n  limit: number;\n}\n\n/** Adds SDK info to an event. */\nexport class LinkedErrors implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'LinkedErrors';\n\n  /**\n   * @inheritDoc\n   */\n  public readonly name: string = LinkedErrors.id;\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _key: LinkedErrorsOptions['key'];\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _limit: LinkedErrorsOptions['limit'];\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: Partial<LinkedErrorsOptions> = {}) {\n    this._key = options.key || DEFAULT_KEY;\n    this._limit = options.limit || DEFAULT_LIMIT;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor((event: Event, hint?: EventHint) => {\n      const self = getCurrentHub().getIntegration(LinkedErrors);\n      return self ? _handler(self._key, self._limit, event, hint) : event;\n    });\n  }\n}\n\n/**\n * @inheritDoc\n */\nexport function _handler(key: string, limit: number, event: Event, hint?: EventHint): Event | null {\n  if (!event.exception || !event.exception.values || !hint || !isInstanceOf(hint.originalException, Error)) {\n    return event;\n  }\n  const linkedErrors = _walkErrorTree(limit, hint.originalException as ExtendedError, key);\n  event.exception.values = [...linkedErrors, ...event.exception.values];\n  return event;\n}\n\n/**\n * JSDOC\n */\nexport function _walkErrorTree(limit: number, error: ExtendedError, key: string, stack: Exception[] = []): Exception[] {\n  if (!isInstanceOf(error[key], Error) || stack.length + 1 >= limit) {\n    return stack;\n  }\n  const stacktrace = computeStackTrace(error[key]);\n  const exception = exceptionFromStacktrace(stacktrace);\n  return _walkErrorTree(limit, error[key], key, [exception, ...stack]);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}