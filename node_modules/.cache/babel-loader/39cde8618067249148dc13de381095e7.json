{"ast":null,"code":"if (process.env.NODE_ENV !== 'production' && typeof window !== 'undefined') {\n  const Refresh = require('react-refresh/runtime'); // Inject refresh runtime into global\n\n\n  Refresh.injectIntoGlobalHook(window); // Setup placeholder functions\n\n  window.$RefreshReg$ = function () {};\n\n  window.$RefreshSig$ = function () {\n    return function (type) {\n      return type;\n    };\n  };\n  /**\n   * Setup module refresh.\n   * @param {number} moduleId An ID of a module.\n   * @returns {function(): void} A function to restore handlers to their previous state.\n   */\n\n\n  window.$RefreshSetup$ = function setupModuleRefresh(moduleId) {\n    // Capture previous refresh state\n    const prevRefreshReg = window.$RefreshReg$;\n    const prevRefreshSig = window.$RefreshSig$;\n    /**\n     * Registers a refresh to react-refresh.\n     * @param {string} [type] A valid type of a module.\n     * @param {number} [id] An ID of a module.\n     * @returns {void}\n     */\n\n    window.$RefreshReg$ = function (type, id) {\n      const typeId = moduleId + ' ' + id;\n      Refresh.register(type, typeId);\n    };\n    /**\n     * Creates a module signature function from react-refresh.\n     * @returns {function(string): string} A created signature function.\n     */\n\n\n    window.$RefreshSig$ = Refresh.createSignatureFunctionForTransform; // Restore to previous refresh functions after initialization\n\n    return function cleanup() {\n      window.$RefreshReg$ = prevRefreshReg;\n      window.$RefreshSig$ = prevRefreshSig;\n    };\n  };\n}","map":{"version":3,"sources":["/home/harish/windo/phoenix/node_modules/customize-cra-react-refresh/node_modules/@pmmmwh/react-refresh-webpack-plugin/src/runtime/ReactRefreshEntry.js"],"names":["process","env","NODE_ENV","window","Refresh","require","injectIntoGlobalHook","$RefreshReg$","$RefreshSig$","type","$RefreshSetup$","setupModuleRefresh","moduleId","prevRefreshReg","prevRefreshSig","id","typeId","register","createSignatureFunctionForTransform","cleanup"],"mappings":"AAAA,IAAIA,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyC,OAAOC,MAAP,KAAkB,WAA/D,EAA4E;AAC1E,QAAMC,OAAO,GAAGC,OAAO,CAAC,uBAAD,CAAvB,CAD0E,CAG1E;;;AACAD,EAAAA,OAAO,CAACE,oBAAR,CAA6BH,MAA7B,EAJ0E,CAM1E;;AACAA,EAAAA,MAAM,CAACI,YAAP,GAAsB,YAAY,CAAE,CAApC;;AACAJ,EAAAA,MAAM,CAACK,YAAP,GAAsB,YAAY;AAChC,WAAO,UAAUC,IAAV,EAAgB;AACrB,aAAOA,IAAP;AACD,KAFD;AAGD,GAJD;AAMA;AACF;AACA;AACA;AACA;;;AACEN,EAAAA,MAAM,CAACO,cAAP,GAAwB,SAASC,kBAAT,CAA4BC,QAA5B,EAAsC;AAC5D;AACA,UAAMC,cAAc,GAAGV,MAAM,CAACI,YAA9B;AACA,UAAMO,cAAc,GAAGX,MAAM,CAACK,YAA9B;AAEA;AACJ;AACA;AACA;AACA;AACA;;AACIL,IAAAA,MAAM,CAACI,YAAP,GAAsB,UAAUE,IAAV,EAAgBM,EAAhB,EAAoB;AACxC,YAAMC,MAAM,GAAGJ,QAAQ,GAAG,GAAX,GAAiBG,EAAhC;AACAX,MAAAA,OAAO,CAACa,QAAR,CAAiBR,IAAjB,EAAuBO,MAAvB;AACD,KAHD;AAKA;AACJ;AACA;AACA;;;AACIb,IAAAA,MAAM,CAACK,YAAP,GAAsBJ,OAAO,CAACc,mCAA9B,CApB4D,CAsB5D;;AACA,WAAO,SAASC,OAAT,GAAmB;AACxBhB,MAAAA,MAAM,CAACI,YAAP,GAAsBM,cAAtB;AACAV,MAAAA,MAAM,CAACK,YAAP,GAAsBM,cAAtB;AACD,KAHD;AAID,GA3BD;AA4BD","sourcesContent":["if (process.env.NODE_ENV !== 'production' && typeof window !== 'undefined') {\n  const Refresh = require('react-refresh/runtime');\n\n  // Inject refresh runtime into global\n  Refresh.injectIntoGlobalHook(window);\n\n  // Setup placeholder functions\n  window.$RefreshReg$ = function () {};\n  window.$RefreshSig$ = function () {\n    return function (type) {\n      return type;\n    };\n  };\n\n  /**\n   * Setup module refresh.\n   * @param {number} moduleId An ID of a module.\n   * @returns {function(): void} A function to restore handlers to their previous state.\n   */\n  window.$RefreshSetup$ = function setupModuleRefresh(moduleId) {\n    // Capture previous refresh state\n    const prevRefreshReg = window.$RefreshReg$;\n    const prevRefreshSig = window.$RefreshSig$;\n\n    /**\n     * Registers a refresh to react-refresh.\n     * @param {string} [type] A valid type of a module.\n     * @param {number} [id] An ID of a module.\n     * @returns {void}\n     */\n    window.$RefreshReg$ = function (type, id) {\n      const typeId = moduleId + ' ' + id;\n      Refresh.register(type, typeId);\n    };\n\n    /**\n     * Creates a module signature function from react-refresh.\n     * @returns {function(string): string} A created signature function.\n     */\n    window.$RefreshSig$ = Refresh.createSignatureFunctionForTransform;\n\n    // Restore to previous refresh functions after initialization\n    return function cleanup() {\n      window.$RefreshReg$ = prevRefreshReg;\n      window.$RefreshSig$ = prevRefreshSig;\n    };\n  };\n}\n"]},"metadata":{},"sourceType":"script"}