{"ast":null,"code":"var _jsxFileName = \"/home/harish/windo/phoenix/src/components/products/ProductVariantDrawer.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Drawer } from \"../shared/Drawer\";\nimport { useToggle } from \"../../hooks/common\";\nimport { useParams } from 'react-router-dom';\nimport { Formik, useField, useFormikContext } from 'formik';\nimport { marshallPayload } from \"./variantUtils\";\nimport { Button, Card } from 'phoenix-components';\nimport { Radio } from 'phoenix-components/lib/formik';\nimport { Grid } from '@material-ui/core';\nimport _ from 'lodash';\nimport { useHistory } from 'react-router-dom';\nimport { Becca } from \"../../api\";\nimport { useDesktop } from \"../../contexts\";\nimport Alert from \"../shared/alert/Alert\";\nimport DraftAlert from \"../shared/alert/Draft/Alert\";\nimport SnackBar from \"../../services/snackbar\";\nimport Loader from \"../../services/loader\";\nimport EventManager from \"../../utils/events\";\nimport { ColorVariant } from \"./ColorVariant\";\nimport styles from \"./ProductVariantDrawer.module.css\";\nimport { getColorInitialValues, getCustomInitialValues, getSizeInitialValues, variantDrawerSchema } from \"./variantUtils\";\nimport { SizeVariant } from \"./SizeVariant\";\nimport { CustomVariant } from \"./CustomVariant\";\nexport function ProductVariantDrawer({\n  onClose\n}) {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const isUpdate = !_.isEmpty(id);\n  const [,, {\n    setValue: setSkuStatus\n  }] = useField('status');\n  const [{\n    value: variants = []\n  },, {\n    setValue\n  }] = useField('variants');\n  const [{\n    value: variantType\n  }] = useField('variantType');\n  const isDesktop = useDesktop();\n  const history = useHistory();\n  const [showAlert, toggleAlert] = useToggle(false);\n  const [{\n    value: amount\n  }] = useField('variant.amount');\n  const [{\n    value: discountedAmount\n  }] = useField('variant.discountedAmount');\n  const [{\n    value: colors\n  },, {\n    setValue: setColors\n  }] = useField('colors');\n  const emptyIdErr = 'You cannot keep both custom' + ' and size variants at once.';\n  const [openDraft, toggleDraft] = useToggle(false);\n  const {\n    values\n  } = useFormikContext();\n\n  const addSizeVariant = (setField, values) => () => {\n    if (values.variantType === 'size') {\n      setField('variants', [...values.variants, getSizeInitialValues({\n        amount,\n        discountedAmount\n      })]);\n    } else {\n      var _values$variants$, _values$variants$$inf;\n\n      const name = ((_values$variants$ = values.variants[0]) === null || _values$variants$ === void 0 ? void 0 : (_values$variants$$inf = _values$variants$.info) === null || _values$variants$$inf === void 0 ? void 0 : _values$variants$$inf.name) || '';\n      setField('variants', [...values.variants, getCustomInitialValues({\n        amount,\n        discountedAmount,\n        info: {\n          name\n        }\n      })]);\n    }\n  };\n\n  const saveDraft = async data => {\n    const {\n      variants,\n      sku\n    } = marshallPayload({ ...values,\n      ...data\n    });\n\n    if (sku.status === 'draft' && sku.title.length === 0) {\n      SnackBar.show('Please add product name', 'error');\n      onClose();\n      return;\n    }\n\n    Loader.show();\n    const {\n      _id\n    } = await Becca.createProduct({ ...sku,\n      variants\n    });\n    sku._id = _id;\n    EventManager.emitEvent('product_created', {\n      id: _id,\n      title: values.title\n    });\n    SnackBar.show('Product created successfully', 'success');\n    history.push('/products');\n    Loader.hide();\n  };\n\n  const addColor = (setField, values) => () => {\n    setField('colors', [...values.colors, getColorInitialValues()]);\n  };\n\n  const onSubmit = async values => {\n    setValue((values === null || values === void 0 ? void 0 : values.variants) || []);\n    setColors((values === null || values === void 0 ? void 0 : values.colors) || []);\n    onClose();\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, showAlert && /*#__PURE__*/React.createElement(Alert, {\n    text: emptyIdErr,\n    btnText: \"Ok\",\n    textClass: styles.textClass,\n    onClick: toggleAlert,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }), !isDesktop && /*#__PURE__*/React.createElement(Drawer, {\n    title: \"Product Variants\",\n    onClose: onClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Formik, {\n    initialValues: {\n      variants: variants || [],\n      colors: colors || [],\n      variantType\n    },\n    onSubmit: onSubmit,\n    validationSchema: variantDrawerSchema,\n    enableReinitialize: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }, ({\n    submitForm,\n    setFieldValue,\n    values\n  }) => {\n    var _values$variants$2, _values$variants$2$in;\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, openDraft && /*#__PURE__*/React.createElement(DraftAlert, {\n      text: \"Psst, save your details!\",\n      subText: \"Save your edits as a draft, so next time, you can pick up where you left off.\",\n      cancelText: \"Discard\",\n      clickText: \"Save as Draft\",\n      onCancel: toggleDraft,\n      onClick: () => {\n        saveDraft({\n          variants: values === null || values === void 0 ? void 0 : values.variants,\n          colors: values.colors\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.main,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.variants,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      spacing: 2,\n      justify: \"center\",\n      className: styles.radioGrid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 5,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Radio, {\n      name: \"variantType\",\n      label: \"Size Variant\",\n      value: \"size\",\n      inputProps: {\n        onChange: () => {\n          if (values.variants.length > 0) {\n            toggleAlert();\n            return;\n          }\n\n          setFieldValue('variantType', 'size');\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 5,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Radio, {\n      name: \"variantType\",\n      label: \"Custom Variant\",\n      value: \"custom\",\n      inputProps: {\n        onChange: () => {\n          if (values.variants.length > 0) {\n            toggleAlert();\n            return;\n          }\n\n          setFieldValue('variantType', 'custom');\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 21\n      }\n    }))), values.variants.length === 0 && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.heading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 21\n      }\n    }, values.variantType === 'size' ? 'Size' : 'Variant'), /*#__PURE__*/React.createElement(Card, {\n      className: styles.noItemCard,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      label: values.variantType === 'size' ? 'Add Size' : 'Add Variant',\n      size: \"small\",\n      className: styles.addItemButton,\n      onClick: addSizeVariant(setFieldValue, values),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 23\n      }\n    }))), values.variants.length > 0 && /*#__PURE__*/React.createElement(React.Fragment, null, values.variants.map((v, idx) => /*#__PURE__*/React.createElement(React.Fragment, null, values.variantType === 'size' ? /*#__PURE__*/React.createElement(SizeVariant, {\n      index: idx,\n      key: idx,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 27\n      }\n    }) : /*#__PURE__*/React.createElement(CustomVariant, {\n      index: idx,\n      key: idx,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 27\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.addAnother,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      label: values.variantType === 'size' ? 'Add Another Size' : `Add Another \n                            ${_.isEmpty((_values$variants$2 = values.variants[0]) === null || _values$variants$2 === void 0 ? void 0 : (_values$variants$2$in = _values$variants$2.info) === null || _values$variants$2$in === void 0 ? void 0 : _values$variants$2$in.name) ? 'Variant' : values.variants[0].info.name}`,\n      size: \"small\",\n      className: styles.addItemButton,\n      onClick: addSizeVariant(setFieldValue, values),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 23\n      }\n    })))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 15\n      }\n    }, values.colors.length === 0 && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.heading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 21\n      }\n    }, \"Color\"), /*#__PURE__*/React.createElement(Card, {\n      className: styles.noItemCard,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      label: \"Add Color\",\n      size: \"small\",\n      className: styles.addItemButton,\n      onClick: addColor(setFieldValue, values),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 23\n      }\n    }))), values.colors.length > 0 && /*#__PURE__*/React.createElement(React.Fragment, null, values.colors.map((v, idx) => /*#__PURE__*/React.createElement(ColorVariant, {\n      key: idx,\n      index: idx,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 23\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.addAnother,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      label: \"Add Another Color\",\n      size: \"small\",\n      className: styles.addItemButton,\n      onClick: addColor(setFieldValue, values),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 23\n      }\n    }))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.save,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      label: \"Save & Proceed\",\n      fullWidth: true,\n      onClick: async () => {\n        if (isUpdate) {\n          submitForm();\n          return;\n        }\n\n        try {\n          await variantDrawerSchema.validateSync({\n            colors: values.colors,\n            variants: values.variants\n          }, {\n            abortEarly: true\n          });\n        } catch (e) {\n          setSkuStatus('draft');\n          toggleDraft(true);\n          return;\n        }\n\n        submitForm();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 15\n      }\n    })));\n  })), isDesktop && /*#__PURE__*/React.createElement(Formik, {\n    initialValues: {\n      variants: variants || [],\n      colors: colors || [],\n      variantType\n    },\n    onSubmit: onSubmit,\n    validationSchema: variantDrawerSchema,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 5\n    }\n  }, ({\n    setFieldValue,\n    values,\n    submitForm\n  }) => {\n    var _values$variants$3, _values$variants$3$in;\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, openDraft && /*#__PURE__*/React.createElement(DraftAlert, {\n      text: \"Psst, save your details!\",\n      subText: \"Save your edits as a draft, so next time, you can pick up where you left off.\",\n      cancelText: \"Discard\",\n      clickText: \"Save as Draft\",\n      onCancel: toggleDraft,\n      onClick: () => {\n        saveDraft({\n          variants: values === null || values === void 0 ? void 0 : values.variants,\n          colors: values.colors\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.mainDesktop,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.variants1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      spacing: 2,\n      justify: \"center\",\n      className: styles.radioGrid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Radio, {\n      name: \"variantType\",\n      label: \"Size Variant\",\n      value: \"size\",\n      inputProps: {\n        onChange: () => {\n          if (values.variants.length > 0) {\n            toggleAlert();\n            return;\n          }\n\n          setFieldValue('variantType', 'size');\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Radio, {\n      name: \"variantType\",\n      label: \"Custom Variant\",\n      value: \"custom\",\n      inputProps: {\n        onChange: () => {\n          if (values.variants.length > 0) {\n            toggleAlert();\n            return;\n          }\n\n          setFieldValue('variantType', 'custom');\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 19\n      }\n    }))), values.variants.length === 0 && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.heading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 19\n      }\n    }, values.variantType === 'size' ? 'Size' : 'Variant'), /*#__PURE__*/React.createElement(Card, {\n      className: styles.noItemCard1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      label: values.variantType === 'size' ? 'Add Size' : 'Add Variant',\n      size: \"small\",\n      className: styles.addItemButton,\n      primary: false,\n      onClick: addSizeVariant(setFieldValue, values),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 21\n      }\n    }))), values.variants.length > 0 && /*#__PURE__*/React.createElement(React.Fragment, null, values.variants.map((v, idx) => /*#__PURE__*/React.createElement(React.Fragment, null, values.variantType === 'size' ? /*#__PURE__*/React.createElement(SizeVariant, {\n      index: idx,\n      key: idx,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 25\n      }\n    }) : /*#__PURE__*/React.createElement(CustomVariant, {\n      index: idx,\n      key: idx,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 25\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.addAnother1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      label: values.variantType === 'size' ? 'Add Another Size' : `Add Another \n                            ${_.isEmpty((_values$variants$3 = values.variants[0]) === null || _values$variants$3 === void 0 ? void 0 : (_values$variants$3$in = _values$variants$3.info) === null || _values$variants$3$in === void 0 ? void 0 : _values$variants$3$in.name) ? 'Variant' : values.variants[0].info.name}`,\n      size: \"small\",\n      className: styles.addItemButton1,\n      primary: false,\n      onClick: addSizeVariant(setFieldValue, values),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 21\n      }\n    })))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 13\n      }\n    }, values.colors.length === 0 && /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.colorContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.heading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 19\n      }\n    }, \"Color\"), /*#__PURE__*/React.createElement(Card, {\n      className: styles.noItemCard1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      label: \"Add Color\",\n      size: \"small\",\n      className: styles.addItemButton,\n      primary: false,\n      onClick: addColor(setFieldValue, values),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 21\n      }\n    }))), values.colors.length > 0 && /*#__PURE__*/React.createElement(React.Fragment, null, values.colors.map((v, idx) => /*#__PURE__*/React.createElement(ColorVariant, {\n      key: idx,\n      index: idx,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.addAnother1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      label: \"Add Another Color\",\n      size: \"small\",\n      className: styles.addItemButton,\n      primary: false,\n      onClick: addColor(setFieldValue, values),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 21\n      }\n    })))), /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.save,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      fullWidth: true,\n      label: \"Save & Proceed\",\n      bordered: false,\n      className: styles.saveButton,\n      onClick: async () => {\n        try {\n          if (isUpdate) {\n            submitForm();\n            return;\n          }\n\n          await variantDrawerSchema.validateSync({\n            colors: values.colors,\n            variants: values.variants\n          }, {\n            abortEarly: true\n          });\n        } catch (e) {\n          setSkuStatus('draft');\n          toggleDraft(true);\n          return;\n        }\n\n        submitForm();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 15\n      }\n    }))));\n  }));\n}\n\n_s(ProductVariantDrawer, \"IyBZlVf1HR1sRftumu1hsWbXoo8=\", false, function () {\n  return [useParams, useField, useField, useField, useDesktop, useHistory, useToggle, useField, useField, useField, useToggle, useFormikContext];\n});\n\n_c = ProductVariantDrawer;\nProductVariantDrawer.propTypes = {\n  onClose: PropTypes.func.isRequired\n};\nProductVariantDrawer.defaultProps = {};\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductVariantDrawer\");","map":{"version":3,"sources":["/home/harish/windo/phoenix/src/components/products/ProductVariantDrawer.jsx"],"names":["React","PropTypes","Drawer","useToggle","useParams","Formik","useField","useFormikContext","marshallPayload","Button","Card","Radio","Grid","_","useHistory","Becca","useDesktop","Alert","DraftAlert","SnackBar","Loader","EventManager","ColorVariant","styles","getColorInitialValues","getCustomInitialValues","getSizeInitialValues","variantDrawerSchema","SizeVariant","CustomVariant","ProductVariantDrawer","onClose","id","isUpdate","isEmpty","setValue","setSkuStatus","value","variants","variantType","isDesktop","history","showAlert","toggleAlert","amount","discountedAmount","colors","setColors","emptyIdErr","openDraft","toggleDraft","values","addSizeVariant","setField","name","info","saveDraft","data","sku","status","title","length","show","_id","createProduct","emitEvent","push","hide","addColor","onSubmit","textClass","submitForm","setFieldValue","main","radioGrid","onChange","heading","noItemCard","addItemButton","map","v","idx","addAnother","save","validateSync","abortEarly","e","mainDesktop","variants1","noItemCard1","addAnother1","addItemButton1","colorContainer","saveButton","propTypes","func","isRequired","defaultProps"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,MAAT;AACA,SAASC,SAAT;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,MAAT,EAAiBC,QAAjB,EAA2BC,gBAA3B,QAAmD,QAAnD;AACA,SACEC,eADF;AAGA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,oBAA7B;AACA,SAASC,KAAT,QAAsB,+BAAtB;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,KAAT;AACA,SAASC,UAAT;AACA,OAAOC,KAAP;AACA,OAAOC,UAAP;AACA,OAAOC,QAAP;AACA,OAAOC,MAAP;AACA,OAAOC,YAAP;AACA,SAASC,YAAT;AACA,OAAOC,MAAP;AACA,SACEC,qBADF,EAEEC,sBAFF,EAGEC,oBAHF,EAIEC,mBAJF;AAMA,SAASC,WAAT;AACA,SAASC,aAAT;AAEA,OAAO,SAASC,oBAAT,CAA8B;AAAEC,EAAAA;AAAF,CAA9B,EAA2C;AAAA;;AAChD,QAAM;AAAEC,IAAAA;AAAF,MAAS5B,SAAS,EAAxB;AACA,QAAM6B,QAAQ,GAAG,CAACpB,CAAC,CAACqB,OAAF,CAAUF,EAAV,CAAlB;AACA,QAAM,IAAK;AAAEG,IAAAA,QAAQ,EAAEC;AAAZ,GAAL,IAAmC9B,QAAQ,CAAC,QAAD,CAAjD;AACA,QAAM,CAAC;AAAE+B,IAAAA,KAAK,EAAEC,QAAQ,GAAG;AAApB,GAAD,GAA6B;AAAEH,IAAAA;AAAF,GAA7B,IAA6C7B,QAAQ,CAAC,UAAD,CAA3D;AACA,QAAM,CAAC;AAAE+B,IAAAA,KAAK,EAAEE;AAAT,GAAD,IAA2BjC,QAAQ,CAAC,aAAD,CAAzC;AACA,QAAMkC,SAAS,GAAGxB,UAAU,EAA5B;AACA,QAAMyB,OAAO,GAAG3B,UAAU,EAA1B;AACA,QAAM,CAAC4B,SAAD,EAAYC,WAAZ,IAA2BxC,SAAS,CAAC,KAAD,CAA1C;AACA,QAAM,CAAC;AAAEkC,IAAAA,KAAK,EAAEO;AAAT,GAAD,IAAsBtC,QAAQ,CAAC,gBAAD,CAApC;AACA,QAAM,CAAC;AAAE+B,IAAAA,KAAK,EAAEQ;AAAT,GAAD,IAAgCvC,QAAQ,CAAC,0BAAD,CAA9C;AACA,QAAM,CAAC;AAAE+B,IAAAA,KAAK,EAAES;AAAT,GAAD,GAAsB;AAAEX,IAAAA,QAAQ,EAAEY;AAAZ,GAAtB,IAAiDzC,QAAQ,CAAC,QAAD,CAA/D;AACA,QAAM0C,UAAU,GAAG,gCACf,6BADJ;AAEA,QAAM,CAACC,SAAD,EAAYC,WAAZ,IAA2B/C,SAAS,CAAC,KAAD,CAA1C;AACA,QAAM;AAAEgD,IAAAA;AAAF,MAAa5C,gBAAgB,EAAnC;;AAEA,QAAM6C,cAAc,GAAG,CAACC,QAAD,EAAWF,MAAX,KAAsB,MAAM;AACjD,QAAIA,MAAM,CAACZ,WAAP,KAAuB,MAA3B,EAAmC;AACjCc,MAAAA,QAAQ,CAAC,UAAD,EAAa,CAAC,GAAGF,MAAM,CAACb,QAAX,EAAqBZ,oBAAoB,CAAC;AAC7DkB,QAAAA,MAD6D;AAE7DC,QAAAA;AAF6D,OAAD,CAAzC,CAAb,CAAR;AAID,KALD,MAKO;AAAA;;AACL,YAAMS,IAAI,GAAG,sBAAAH,MAAM,CAACb,QAAP,CAAgB,CAAhB,kGAAoBiB,IAApB,gFAA0BD,IAA1B,KAAkC,EAA/C;AACAD,MAAAA,QAAQ,CAAC,UAAD,EAAa,CAAC,GAAGF,MAAM,CAACb,QAAX,EAAqBb,sBAAsB,CAAC;AAC/DmB,QAAAA,MAD+D;AAE/DC,QAAAA,gBAF+D;AAG/DU,QAAAA,IAAI,EAAE;AAAED,UAAAA;AAAF;AAHyD,OAAD,CAA3C,CAAb,CAAR;AAKD;AACF,GAdD;;AAgBA,QAAME,SAAS,GAAG,MAAOC,IAAP,IAAgB;AAChC,UAAM;AACJnB,MAAAA,QADI;AAEJoB,MAAAA;AAFI,QAGFlD,eAAe,CAAC,EAAE,GAAG2C,MAAL;AAAa,SAAGM;AAAhB,KAAD,CAHnB;;AAIA,QAAIC,GAAG,CAACC,MAAJ,KAAe,OAAf,IAA0BD,GAAG,CAACE,KAAJ,CAAUC,MAAV,KAAqB,CAAnD,EAAsD;AACpD1C,MAAAA,QAAQ,CAAC2C,IAAT,CAAc,yBAAd,EAAyC,OAAzC;AACA/B,MAAAA,OAAO;AACP;AACD;;AACDX,IAAAA,MAAM,CAAC0C,IAAP;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAU,MAAMhD,KAAK,CAACiD,aAAN,CAAoB,EACxC,GAAGN,GADqC;AAExCpB,MAAAA;AAFwC,KAApB,CAAtB;AAIAoB,IAAAA,GAAG,CAACK,GAAJ,GAAUA,GAAV;AACA1C,IAAAA,YAAY,CAAC4C,SAAb,CAAuB,iBAAvB,EAA0C;AACxCjC,MAAAA,EAAE,EAAE+B,GADoC;AAExCH,MAAAA,KAAK,EAAET,MAAM,CAACS;AAF0B,KAA1C;AAIAzC,IAAAA,QAAQ,CAAC2C,IAAT,CAAc,8BAAd,EAA8C,SAA9C;AACArB,IAAAA,OAAO,CAACyB,IAAR,CAAa,WAAb;AACA9C,IAAAA,MAAM,CAAC+C,IAAP;AACD,GAvBD;;AAyBA,QAAMC,QAAQ,GAAG,CAACf,QAAD,EAAWF,MAAX,KAAsB,MAAM;AAC3CE,IAAAA,QAAQ,CAAC,QAAD,EAAW,CAAC,GAAGF,MAAM,CAACL,MAAX,EAAmBtB,qBAAqB,EAAxC,CAAX,CAAR;AACD,GAFD;;AAIA,QAAM6C,QAAQ,GAAG,MAAOlB,MAAP,IAAkB;AACjChB,IAAAA,QAAQ,CAAC,CAAAgB,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEb,QAAR,KAAoB,EAArB,CAAR;AACAS,IAAAA,SAAS,CAAC,CAAAI,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEL,MAAR,KAAkB,EAAnB,CAAT;AACAf,IAAAA,OAAO;AACR,GAJD;;AAMA,sBACE,0CACGW,SAAS,iBACR,oBAAC,KAAD;AACE,IAAA,IAAI,EAAEM,UADR;AAEE,IAAA,OAAO,EAAC,IAFV;AAGE,IAAA,SAAS,EAAEzB,MAAM,CAAC+C,SAHpB;AAIE,IAAA,OAAO,EAAE3B,WAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EASG,CAACH,SAAD,iBAEH,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,kBAAd;AAAiC,IAAA,OAAO,EAAET,OAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AACE,IAAA,aAAa,EAAE;AACbO,MAAAA,QAAQ,EAAEA,QAAQ,IAAI,EADT;AAEbQ,MAAAA,MAAM,EAAEA,MAAM,IAAI,EAFL;AAGbP,MAAAA;AAHa,KADjB;AAME,IAAA,QAAQ,EAAE8B,QANZ;AAOE,IAAA,gBAAgB,EAAE1C,mBAPpB;AAQE,IAAA,kBAAkB,MARpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAUG,CAAC;AACA4C,IAAAA,UADA;AAEAC,IAAAA,aAFA;AAGArB,IAAAA;AAHA,GAAD;AAAA;;AAAA,wBAKC,0CACGF,SAAS,iBACR,oBAAC,UAAD;AACE,MAAA,IAAI,EAAC,0BADP;AAEE,MAAA,OAAO,EAAC,+EAFV;AAGE,MAAA,UAAU,EAAC,SAHb;AAIE,MAAA,SAAS,EAAC,eAJZ;AAKE,MAAA,QAAQ,EAAEC,WALZ;AAME,MAAA,OAAO,EAAE,MAAM;AACbM,QAAAA,SAAS,CAAC;AAAElB,UAAAA,QAAQ,EAAEa,MAAF,aAAEA,MAAF,uBAAEA,MAAM,CAAEb,QAApB;AAA8BQ,UAAAA,MAAM,EAAEK,MAAM,CAACL;AAA7C,SAAD,CAAT;AACD,OARH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,eAaE;AAAK,MAAA,SAAS,EAAEvB,MAAM,CAACkD,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAElD,MAAM,CAACe,QAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,OAAO,EAAE,CAAzB;AAA4B,MAAA,OAAO,EAAC,QAApC;AAA6C,MAAA,SAAS,EAAEf,MAAM,CAACmD,SAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD;AACE,MAAA,IAAI,EAAC,aADP;AAEE,MAAA,KAAK,EAAC,cAFR;AAGE,MAAA,KAAK,EAAC,MAHR;AAIE,MAAA,UAAU,EAAE;AACVC,QAAAA,QAAQ,EAAE,MAAM;AACd,cAAIxB,MAAM,CAACb,QAAP,CAAgBuB,MAAhB,GAAyB,CAA7B,EAAgC;AAC9BlB,YAAAA,WAAW;AACX;AACD;;AACD6B,UAAAA,aAAa,CAAC,aAAD,EAAgB,MAAhB,CAAb;AACD;AAPS,OAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,eAiBE,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD;AACE,MAAA,IAAI,EAAC,aADP;AAEE,MAAA,KAAK,EAAC,gBAFR;AAGE,MAAA,KAAK,EAAC,QAHR;AAIE,MAAA,UAAU,EAAE;AACVG,QAAAA,QAAQ,EAAE,MAAM;AACd,cAAIxB,MAAM,CAACb,QAAP,CAAgBuB,MAAhB,GAAyB,CAA7B,EAAgC;AAC9BlB,YAAAA,WAAW;AACX;AACD;;AACD6B,UAAAA,aAAa,CAAC,aAAD,EAAgB,QAAhB,CAAb;AACD;AAPS,OAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAjBF,CADF,EAmCGrB,MAAM,CAACb,QAAP,CAAgBuB,MAAhB,KAA2B,CAA3B,iBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAEtC,MAAM,CAACqD,OAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAiCzB,MAAM,CAACZ,WAAP,KAAuB,MAAvB,GAAgC,MAAhC,GAAyC,SAA1E,CADF,eAEE,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAEhB,MAAM,CAACsD,UAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AACE,MAAA,KAAK,EAAE1B,MAAM,CAACZ,WAAP,KAAuB,MAAvB,GAAgC,UAAhC,GAA6C,aADtD;AAEE,MAAA,IAAI,EAAC,OAFP;AAGE,MAAA,SAAS,EAAEhB,MAAM,CAACuD,aAHpB;AAIE,MAAA,OAAO,EAAE1B,cAAc,CAACoB,aAAD,EAAgBrB,MAAhB,CAJzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAFF,CApCJ,EAgDGA,MAAM,CAACb,QAAP,CAAgBuB,MAAhB,GAAyB,CAAzB,iBACC,0CACGV,MAAM,CAACb,QAAP,CAAgByC,GAAhB,CAAoB,CAACC,CAAD,EAAIC,GAAJ,kBACnB,0CACG9B,MAAM,CAACZ,WAAP,KAAuB,MAAvB,gBACC,oBAAC,WAAD;AAAa,MAAA,KAAK,EAAE0C,GAApB;AAAyB,MAAA,GAAG,EAAEA,GAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,gBAGC,oBAAC,aAAD;AAAe,MAAA,KAAK,EAAEA,GAAtB;AAA2B,MAAA,GAAG,EAAEA,GAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,CADD,CADH,eAUE;AAAK,MAAA,SAAS,EAAE1D,MAAM,CAAC2D,UAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AACE,MAAA,KAAK,EACH/B,MAAM,CAACZ,WAAP,KAAuB,MAAvB,GACI,kBADJ,GAEK;AAC/B,8BAA8B1B,CAAC,CAACqB,OAAF,uBAAUiB,MAAM,CAACb,QAAP,CAAgB,CAAhB,CAAV,gFAAU,mBAAoBiB,IAA9B,0DAAU,sBAA0BD,IAApC,IAA4C,SAA5C,GAAwDH,MAAM,CAACb,QAAP,CAAgB,CAAhB,EAAmBiB,IAAnB,CAAwBD,IAAK,EAL7F;AAOE,MAAA,IAAI,EAAC,OAPP;AAQE,MAAA,SAAS,EAAE/B,MAAM,CAACuD,aARpB;AASE,MAAA,OAAO,EAAE1B,cAAc,CAACoB,aAAD,EAAgBrB,MAAhB,CATzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAVF,CAjDJ,CADF,eA4EE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGA,MAAM,CAACL,MAAP,CAAce,MAAd,KAAyB,CAAzB,iBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAEtC,MAAM,CAACqD,OAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,eAEE,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAErD,MAAM,CAACsD,UAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AACE,MAAA,KAAK,EAAC,WADR;AAEE,MAAA,IAAI,EAAC,OAFP;AAGE,MAAA,SAAS,EAAEtD,MAAM,CAACuD,aAHpB;AAIE,MAAA,OAAO,EAAEV,QAAQ,CAACI,aAAD,EAAgBrB,MAAhB,CAJnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAFF,CAFJ,EAcGA,MAAM,CAACL,MAAP,CAAce,MAAd,GAAuB,CAAvB,iBACC,0CACGV,MAAM,CAACL,MAAP,CAAciC,GAAd,CAAkB,CAACC,CAAD,EAAIC,GAAJ,kBACjB,oBAAC,YAAD;AAAc,MAAA,GAAG,EAAEA,GAAnB;AAAwB,MAAA,KAAK,EAAEA,GAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CADH,eAIE;AAAK,MAAA,SAAS,EAAE1D,MAAM,CAAC2D,UAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AACE,MAAA,KAAK,EAAC,mBADR;AAEE,MAAA,IAAI,EAAC,OAFP;AAGE,MAAA,SAAS,EAAE3D,MAAM,CAACuD,aAHpB;AAIE,MAAA,OAAO,EAAEV,QAAQ,CAACI,aAAD,EAAgBrB,MAAhB,CAJnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAJF,CAfJ,CA5EF,CAbF,eAwHE;AAAK,MAAA,SAAS,EAAE5B,MAAM,CAAC4D,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AACE,MAAA,KAAK,EAAC,gBADR;AAEE,MAAA,SAAS,MAFX;AAGE,MAAA,OAAO,EAAE,YAAY;AACnB,YAAIlD,QAAJ,EAAc;AACZsC,UAAAA,UAAU;AACV;AACD;;AACD,YAAI;AACF,gBAAM5C,mBAAmB,CAACyD,YAApB,CAAiC;AACrCtC,YAAAA,MAAM,EAAEK,MAAM,CAACL,MADsB;AAErCR,YAAAA,QAAQ,EAAEa,MAAM,CAACb;AAFoB,WAAjC,EAGH;AACD+C,YAAAA,UAAU,EAAE;AADX,WAHG,CAAN;AAMD,SAPD,CAOE,OAAOC,CAAP,EAAU;AACVlD,UAAAA,YAAY,CAAC,OAAD,CAAZ;AACAc,UAAAA,WAAW,CAAC,IAAD,CAAX;AACA;AACD;;AACDqB,QAAAA,UAAU;AACX,OArBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAxHF,CALD;AAAA,GAVH,CADF,CAXA,EAiLG/B,SAAS,iBAEZ,oBAAC,MAAD;AACE,IAAA,aAAa,EAAE;AACbF,MAAAA,QAAQ,EAAEA,QAAQ,IAAI,EADT;AAEbQ,MAAAA,MAAM,EAAEA,MAAM,IAAI,EAFL;AAGbP,MAAAA;AAHa,KADjB;AAME,IAAA,QAAQ,EAAE8B,QANZ;AAOE,IAAA,gBAAgB,EAAE1C,mBAPpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASG,CAAC;AACA6C,IAAAA,aADA;AAEArB,IAAAA,MAFA;AAGAoB,IAAAA;AAHA,GAAD;AAAA;;AAAA,wBAKC,0CACGtB,SAAS,iBACR,oBAAC,UAAD;AACE,MAAA,IAAI,EAAC,0BADP;AAEE,MAAA,OAAO,EAAC,+EAFV;AAGE,MAAA,UAAU,EAAC,SAHb;AAIE,MAAA,SAAS,EAAC,eAJZ;AAKE,MAAA,QAAQ,EAAEC,WALZ;AAME,MAAA,OAAO,EAAE,MAAM;AACbM,QAAAA,SAAS,CAAC;AAAElB,UAAAA,QAAQ,EAAEa,MAAF,aAAEA,MAAF,uBAAEA,MAAM,CAAEb,QAApB;AAA8BQ,UAAAA,MAAM,EAAEK,MAAM,CAACL;AAA7C,SAAD,CAAT;AACD,OARH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,eAaE;AAAK,MAAA,SAAS,EAAEvB,MAAM,CAACgE,WAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAEhE,MAAM,CAACiE,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,OAAO,EAAE,CAAzB;AAA4B,MAAA,OAAO,EAAC,QAApC;AAA6C,MAAA,SAAS,EAAEjE,MAAM,CAACmD,SAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD;AACE,MAAA,IAAI,EAAC,aADP;AAEE,MAAA,KAAK,EAAC,cAFR;AAGE,MAAA,KAAK,EAAC,MAHR;AAIE,MAAA,UAAU,EAAE;AACVC,QAAAA,QAAQ,EAAE,MAAM;AACd,cAAIxB,MAAM,CAACb,QAAP,CAAgBuB,MAAhB,GAAyB,CAA7B,EAAgC;AAC9BlB,YAAAA,WAAW;AACX;AACD;;AACD6B,UAAAA,aAAa,CAAC,aAAD,EAAgB,MAAhB,CAAb;AACD;AAPS,OAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,eAiBE,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD;AACE,MAAA,IAAI,EAAC,aADP;AAEE,MAAA,KAAK,EAAC,gBAFR;AAGE,MAAA,KAAK,EAAC,QAHR;AAIE,MAAA,UAAU,EAAE;AACVG,QAAAA,QAAQ,EAAE,MAAM;AACd,cAAIxB,MAAM,CAACb,QAAP,CAAgBuB,MAAhB,GAAyB,CAA7B,EAAgC;AAC9BlB,YAAAA,WAAW;AACX;AACD;;AACD6B,UAAAA,aAAa,CAAC,aAAD,EAAgB,QAAhB,CAAb;AACD;AAPS,OAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAjBF,CADF,EAmCGrB,MAAM,CAACb,QAAP,CAAgBuB,MAAhB,KAA2B,CAA3B,iBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAEtC,MAAM,CAACqD,OAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAiCzB,MAAM,CAACZ,WAAP,KAAuB,MAAvB,GAAgC,MAAhC,GAAyC,SAA1E,CADF,eAEE,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAEhB,MAAM,CAACkE,WAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AACE,MAAA,KAAK,EAAEtC,MAAM,CAACZ,WAAP,KAAuB,MAAvB,GAAgC,UAAhC,GAA6C,aADtD;AAEE,MAAA,IAAI,EAAC,OAFP;AAGE,MAAA,SAAS,EAAEhB,MAAM,CAACuD,aAHpB;AAIE,MAAA,OAAO,EAAE,KAJX;AAKE,MAAA,OAAO,EAAE1B,cAAc,CAACoB,aAAD,EAAgBrB,MAAhB,CALzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAFF,CApCJ,EAiDGA,MAAM,CAACb,QAAP,CAAgBuB,MAAhB,GAAyB,CAAzB,iBACC,0CACGV,MAAM,CAACb,QAAP,CAAgByC,GAAhB,CAAoB,CAACC,CAAD,EAAIC,GAAJ,kBACnB,0CACG9B,MAAM,CAACZ,WAAP,KAAuB,MAAvB,gBACC,oBAAC,WAAD;AAAa,MAAA,KAAK,EAAE0C,GAApB;AAAyB,MAAA,GAAG,EAAEA,GAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,gBAGC,oBAAC,aAAD;AAAe,MAAA,KAAK,EAAEA,GAAtB;AAA2B,MAAA,GAAG,EAAEA,GAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,CADD,CADH,eAUE;AAAK,MAAA,SAAS,EAAE1D,MAAM,CAACmE,WAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AACE,MAAA,KAAK,EACHvC,MAAM,CAACZ,WAAP,KAAuB,MAAvB,GACI,kBADJ,GAEK;AAC7B,8BAA8B1B,CAAC,CAACqB,OAAF,uBAAUiB,MAAM,CAACb,QAAP,CAAgB,CAAhB,CAAV,gFAAU,mBAAoBiB,IAA9B,0DAAU,sBAA0BD,IAApC,IAA4C,SAA5C,GAAwDH,MAAM,CAACb,QAAP,CAAgB,CAAhB,EAAmBiB,IAAnB,CAAwBD,IAAK,EAL/F;AAOE,MAAA,IAAI,EAAC,OAPP;AAQE,MAAA,SAAS,EAAE/B,MAAM,CAACoE,cARpB;AASE,MAAA,OAAO,EAAE,KATX;AAUE,MAAA,OAAO,EAAEvC,cAAc,CAACoB,aAAD,EAAgBrB,MAAhB,CAVzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAVF,CAlDJ,CADF,eA8EE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGA,MAAM,CAACL,MAAP,CAAce,MAAd,KAAyB,CAAzB,iBACC;AAAK,MAAA,SAAS,EAAEtC,MAAM,CAACqE,cAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAErE,MAAM,CAACqD,OAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,eAEE,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAErD,MAAM,CAACkE,WAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AACE,MAAA,KAAK,EAAC,WADR;AAEE,MAAA,IAAI,EAAC,OAFP;AAGE,MAAA,SAAS,EAAElE,MAAM,CAACuD,aAHpB;AAIE,MAAA,OAAO,EAAE,KAJX;AAKE,MAAA,OAAO,EAAEV,QAAQ,CAACI,aAAD,EAAgBrB,MAAhB,CALnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAFF,CAFJ,EAeGA,MAAM,CAACL,MAAP,CAAce,MAAd,GAAuB,CAAvB,iBACC,0CACGV,MAAM,CAACL,MAAP,CAAciC,GAAd,CAAkB,CAACC,CAAD,EAAIC,GAAJ,kBACjB,oBAAC,YAAD;AAAc,MAAA,GAAG,EAAEA,GAAnB;AAAwB,MAAA,KAAK,EAAEA,GAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CADH,eAIE;AAAK,MAAA,SAAS,EAAE1D,MAAM,CAACmE,WAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AACE,MAAA,KAAK,EAAC,mBADR;AAEE,MAAA,IAAI,EAAC,OAFP;AAGE,MAAA,SAAS,EAAEnE,MAAM,CAACuD,aAHpB;AAIE,MAAA,OAAO,EAAE,KAJX;AAKE,MAAA,OAAO,EAAEV,QAAQ,CAACI,aAAD,EAAgBrB,MAAhB,CALnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAJF,CAhBJ,CA9EF,eA8GE;AAAK,MAAA,SAAS,EAAE5B,MAAM,CAAC4D,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AACE,MAAA,SAAS,MADX;AAEE,MAAA,KAAK,EAAC,gBAFR;AAGE,MAAA,QAAQ,EAAE,KAHZ;AAIE,MAAA,SAAS,EAAE5D,MAAM,CAACsE,UAJpB;AAKE,MAAA,OAAO,EAAE,YAAY;AACnB,YAAI;AACF,cAAI5D,QAAJ,EAAc;AACZsC,YAAAA,UAAU;AACV;AACD;;AACD,gBAAM5C,mBAAmB,CAACyD,YAApB,CAAiC;AACrCtC,YAAAA,MAAM,EAAEK,MAAM,CAACL,MADsB;AAErCR,YAAAA,QAAQ,EAAEa,MAAM,CAACb;AAFoB,WAAjC,EAGH;AACD+C,YAAAA,UAAU,EAAE;AADX,WAHG,CAAN;AAMD,SAXD,CAWE,OAAOC,CAAP,EAAU;AACVlD,UAAAA,YAAY,CAAC,OAAD,CAAZ;AACAc,UAAAA,WAAW,CAAC,IAAD,CAAX;AACA;AACD;;AACDqB,QAAAA,UAAU;AACX,OAvBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CA9GF,CAbF,CALD;AAAA,GATH,CAnLA,CADF;AA+VD;;GAnaezC,oB;UACC1B,S,EAE0BE,Q,EACUA,Q,EAClBA,Q,EACfU,U,EACFF,U,EACiBX,S,EACLG,Q,EACUA,Q,EACiBA,Q,EAGtBH,S,EACdI,gB;;;KAfLuB,oB;AAqahBA,oBAAoB,CAACgE,SAArB,GAAiC;AAC/B/D,EAAAA,OAAO,EAAE9B,SAAS,CAAC8F,IAAV,CAAeC;AADO,CAAjC;AAIAlE,oBAAoB,CAACmE,YAArB,GAAoC,EAApC","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Drawer } from 'components/shared/Drawer';\nimport { useToggle } from 'hooks/common';\nimport { useParams } from 'react-router-dom';\nimport { Formik, useField, useFormikContext } from 'formik';\nimport {\n  marshallPayload,\n} from 'components/products/variantUtils';\nimport { Button, Card } from 'phoenix-components';\nimport { Radio } from 'phoenix-components/lib/formik';\nimport { Grid } from '@material-ui/core';\nimport _ from 'lodash';\nimport { useHistory } from 'react-router-dom';\nimport { Becca } from 'api';\nimport { useDesktop } from 'contexts';\nimport Alert from 'components/shared/alert/Alert';\nimport DraftAlert from 'components/shared/alert/Draft/Alert';\nimport SnackBar from 'services/snackbar';\nimport Loader from 'services/loader';\nimport EventManager from 'utils/events';\nimport { ColorVariant } from './ColorVariant';\nimport styles from './ProductVariantDrawer.module.css';\nimport {\n  getColorInitialValues,\n  getCustomInitialValues,\n  getSizeInitialValues,\n  variantDrawerSchema\n} from './variantUtils';\nimport { SizeVariant } from './SizeVariant';\nimport { CustomVariant } from './CustomVariant';\n\nexport function ProductVariantDrawer({ onClose }) {\n  const { id } = useParams();\n  const isUpdate = !_.isEmpty(id);\n  const [, , { setValue: setSkuStatus }] = useField('status');\n  const [{ value: variants = [] }, , { setValue }] = useField('variants');\n  const [{ value: variantType }] = useField('variantType');\n  const isDesktop = useDesktop();\n  const history = useHistory();\n  const [showAlert, toggleAlert] = useToggle(false);\n  const [{ value: amount }] = useField('variant.amount');\n  const [{ value: discountedAmount }] = useField('variant.discountedAmount');\n  const [{ value: colors }, , { setValue: setColors }] = useField('colors');\n  const emptyIdErr = 'You cannot keep both custom'\n    + ' and size variants at once.';\n  const [openDraft, toggleDraft] = useToggle(false);\n  const { values } = useFormikContext();\n\n  const addSizeVariant = (setField, values) => () => {\n    if (values.variantType === 'size') {\n      setField('variants', [...values.variants, getSizeInitialValues({\n        amount,\n        discountedAmount\n      })]);\n    } else {\n      const name = values.variants[0]?.info?.name || '';\n      setField('variants', [...values.variants, getCustomInitialValues({\n        amount,\n        discountedAmount,\n        info: { name }\n      })]);\n    }\n  };\n\n  const saveDraft = async (data) => {\n    const {\n      variants,\n      sku\n    } = marshallPayload({ ...values, ...data });\n    if (sku.status === 'draft' && sku.title.length === 0) {\n      SnackBar.show('Please add product name', 'error');\n      onClose();\n      return;\n    }\n    Loader.show();\n    const { _id } = await Becca.createProduct({\n      ...sku,\n      variants,\n    });\n    sku._id = _id;\n    EventManager.emitEvent('product_created', {\n      id: _id,\n      title: values.title,\n    });\n    SnackBar.show('Product created successfully', 'success');\n    history.push('/products');\n    Loader.hide();\n  };\n\n  const addColor = (setField, values) => () => {\n    setField('colors', [...values.colors, getColorInitialValues()]);\n  };\n\n  const onSubmit = async (values) => {\n    setValue(values?.variants || []);\n    setColors(values?.colors || []);\n    onClose();\n  };\n\n  return (\n    <>\n      {showAlert && (\n        <Alert\n          text={emptyIdErr}\n          btnText=\"Ok\"\n          textClass={styles.textClass}\n          onClick={toggleAlert}\n        />\n      )}\n      {!isDesktop\n  && (\n    <Drawer title=\"Product Variants\" onClose={onClose}>\n      <Formik\n        initialValues={{\n          variants: variants || [],\n          colors: colors || [],\n          variantType,\n        }}\n        onSubmit={onSubmit}\n        validationSchema={variantDrawerSchema}\n        enableReinitialize\n      >\n        {({\n          submitForm,\n          setFieldValue,\n          values,\n        }) => (\n          <>\n            {openDraft && (\n              <DraftAlert\n                text=\"Psst, save your details!\"\n                subText=\"Save your edits as a draft, so next time, you can pick up where you left off.\"\n                cancelText=\"Discard\"\n                clickText=\"Save as Draft\"\n                onCancel={toggleDraft}\n                onClick={() => {\n                  saveDraft({ variants: values?.variants, colors: values.colors });\n                }}\n              />\n            )}\n            <div className={styles.main}>\n              <div className={styles.variants}>\n                <Grid container spacing={2} justify=\"center\" className={styles.radioGrid}>\n                  <Grid item xs={5}>\n                    <Radio\n                      name=\"variantType\"\n                      label=\"Size Variant\"\n                      value=\"size\"\n                      inputProps={{\n                        onChange: () => {\n                          if (values.variants.length > 0) {\n                            toggleAlert();\n                            return;\n                          }\n                          setFieldValue('variantType', 'size');\n                        }\n                      }}\n                    />\n                  </Grid>\n                  <Grid item xs={5}>\n                    <Radio\n                      name=\"variantType\"\n                      label=\"Custom Variant\"\n                      value=\"custom\"\n                      inputProps={{\n                        onChange: () => {\n                          if (values.variants.length > 0) {\n                            toggleAlert();\n                            return;\n                          }\n                          setFieldValue('variantType', 'custom');\n                        }\n                      }}\n                    />\n                  </Grid>\n                </Grid>\n                {values.variants.length === 0 && (\n                  <div>\n                    <div className={styles.heading}>{values.variantType === 'size' ? 'Size' : 'Variant'}</div>\n                    <Card className={styles.noItemCard}>\n                      <Button\n                        label={values.variantType === 'size' ? 'Add Size' : 'Add Variant'}\n                        size=\"small\"\n                        className={styles.addItemButton}\n                        onClick={addSizeVariant(setFieldValue, values)}\n                      />\n                    </Card>\n                  </div>\n                )}\n                {values.variants.length > 0 && (\n                  <>\n                    {values.variants.map((v, idx) => (\n                      <>\n                        {values.variantType === 'size' ? (\n                          <SizeVariant index={idx} key={idx} />\n                        ) : (\n                          <CustomVariant index={idx} key={idx} />\n                        )}\n                      </>\n                    ))}\n                    <div className={styles.addAnother}>\n                      <Button\n                        label={\n                          values.variantType === 'size'\n                            ? 'Add Another Size'\n                            : `Add Another \n                            ${_.isEmpty(values.variants[0]?.info?.name) ? 'Variant' : values.variants[0].info.name}`\n                        }\n                        size=\"small\"\n                        className={styles.addItemButton}\n                        onClick={addSizeVariant(setFieldValue, values)}\n                      />\n                    </div>\n                  </>\n                )}\n              </div>\n              <div>\n                {values.colors.length === 0 && (\n                  <div>\n                    <div className={styles.heading}>Color</div>\n                    <Card className={styles.noItemCard}>\n                      <Button\n                        label=\"Add Color\"\n                        size=\"small\"\n                        className={styles.addItemButton}\n                        onClick={addColor(setFieldValue, values)}\n                      />\n                    </Card>\n                  </div>\n                )}\n                {values.colors.length > 0 && (\n                  <>\n                    {values.colors.map((v, idx) => (\n                      <ColorVariant key={idx} index={idx} />\n                    ))}\n                    <div className={styles.addAnother}>\n                      <Button\n                        label=\"Add Another Color\"\n                        size=\"small\"\n                        className={styles.addItemButton}\n                        onClick={addColor(setFieldValue, values)}\n                      />\n                    </div>\n                  </>\n                )}\n              </div>\n            </div>\n            <div className={styles.save}>\n              <Button\n                label=\"Save & Proceed\"\n                fullWidth\n                onClick={async () => {\n                  if (isUpdate) {\n                    submitForm();\n                    return;\n                  }\n                  try {\n                    await variantDrawerSchema.validateSync({\n                      colors: values.colors,\n                      variants: values.variants,\n                    }, {\n                      abortEarly: true\n                    });\n                  } catch (e) {\n                    setSkuStatus('draft');\n                    toggleDraft(true);\n                    return;\n                  }\n                  submitForm();\n                }}\n              />\n            </div>\n          </>\n        )}\n      </Formik>\n    </Drawer>\n  )}\n      {isDesktop\n  && (\n    <Formik\n      initialValues={{\n        variants: variants || [],\n        colors: colors || [],\n        variantType,\n      }}\n      onSubmit={onSubmit}\n      validationSchema={variantDrawerSchema}\n    >\n      {({\n        setFieldValue,\n        values,\n        submitForm,\n      }) => (\n        <>\n          {openDraft && (\n            <DraftAlert\n              text=\"Psst, save your details!\"\n              subText=\"Save your edits as a draft, so next time, you can pick up where you left off.\"\n              cancelText=\"Discard\"\n              clickText=\"Save as Draft\"\n              onCancel={toggleDraft}\n              onClick={() => {\n                saveDraft({ variants: values?.variants, colors: values.colors });\n              }}\n            />\n          )}\n          <div className={styles.mainDesktop}>\n            <div className={styles.variants1}>\n              <Grid container spacing={2} justify=\"center\" className={styles.radioGrid}>\n                <Grid item xs={4}>\n                  <Radio\n                    name=\"variantType\"\n                    label=\"Size Variant\"\n                    value=\"size\"\n                    inputProps={{\n                      onChange: () => {\n                        if (values.variants.length > 0) {\n                          toggleAlert();\n                          return;\n                        }\n                        setFieldValue('variantType', 'size');\n                      }\n                    }}\n                  />\n                </Grid>\n                <Grid item xs={4}>\n                  <Radio\n                    name=\"variantType\"\n                    label=\"Custom Variant\"\n                    value=\"custom\"\n                    inputProps={{\n                      onChange: () => {\n                        if (values.variants.length > 0) {\n                          toggleAlert();\n                          return;\n                        }\n                        setFieldValue('variantType', 'custom');\n                      }\n                    }}\n                  />\n                </Grid>\n              </Grid>\n              {values.variants.length === 0 && (\n                <div>\n                  <div className={styles.heading}>{values.variantType === 'size' ? 'Size' : 'Variant'}</div>\n                  <Card className={styles.noItemCard1}>\n                    <Button\n                      label={values.variantType === 'size' ? 'Add Size' : 'Add Variant'}\n                      size=\"small\"\n                      className={styles.addItemButton}\n                      primary={false}\n                      onClick={addSizeVariant(setFieldValue, values)}\n                    />\n                  </Card>\n                </div>\n              )}\n              {values.variants.length > 0 && (\n                <>\n                  {values.variants.map((v, idx) => (\n                    <>\n                      {values.variantType === 'size' ? (\n                        <SizeVariant index={idx} key={idx} />\n                      ) : (\n                        <CustomVariant index={idx} key={idx} />\n                      )}\n                    </>\n                  ))}\n                  <div className={styles.addAnother1}>\n                    <Button\n                      label={\n                        values.variantType === 'size'\n                          ? 'Add Another Size'\n                          : `Add Another \n                            ${_.isEmpty(values.variants[0]?.info?.name) ? 'Variant' : values.variants[0].info.name}`\n                      }\n                      size=\"small\"\n                      className={styles.addItemButton1}\n                      primary={false}\n                      onClick={addSizeVariant(setFieldValue, values)}\n                    />\n                  </div>\n                </>\n              )}\n            </div>\n            <div>\n              {values.colors.length === 0 && (\n                <div className={styles.colorContainer}>\n                  <div className={styles.heading}>Color</div>\n                  <Card className={styles.noItemCard1}>\n                    <Button\n                      label=\"Add Color\"\n                      size=\"small\"\n                      className={styles.addItemButton}\n                      primary={false}\n                      onClick={addColor(setFieldValue, values)}\n                    />\n                  </Card>\n                </div>\n              )}\n              {values.colors.length > 0 && (\n                <>\n                  {values.colors.map((v, idx) => (\n                    <ColorVariant key={idx} index={idx} />\n                  ))}\n                  <div className={styles.addAnother1}>\n                    <Button\n                      label=\"Add Another Color\"\n                      size=\"small\"\n                      className={styles.addItemButton}\n                      primary={false}\n                      onClick={addColor(setFieldValue, values)}\n                    />\n                  </div>\n                </>\n              )}\n            </div>\n            <div className={styles.save}>\n              <Button\n                fullWidth\n                label=\"Save & Proceed\"\n                bordered={false}\n                className={styles.saveButton}\n                onClick={async () => {\n                  try {\n                    if (isUpdate) {\n                      submitForm();\n                      return;\n                    }\n                    await variantDrawerSchema.validateSync({\n                      colors: values.colors,\n                      variants: values.variants,\n                    }, {\n                      abortEarly: true\n                    });\n                  } catch (e) {\n                    setSkuStatus('draft');\n                    toggleDraft(true);\n                    return;\n                  }\n                  submitForm();\n                }}\n              />\n            </div>\n          </div>\n        </>\n      )}\n    </Formik>\n  )}\n    </>\n  );\n}\n\nProductVariantDrawer.propTypes = {\n  onClose: PropTypes.func.isRequired,\n};\n\nProductVariantDrawer.defaultProps = {};\n"]},"metadata":{},"sourceType":"module"}