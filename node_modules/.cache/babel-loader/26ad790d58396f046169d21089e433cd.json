{"ast":null,"code":"/**\n * Prettify a filename from error stacks into the desired format.\n * @param {string} filename The filename to be formatted.\n * @returns {string} The formatted filename.\n */\nfunction formatFilename(filename) {\n  // Strip away protocol and domain for compiled files\n  const htmlMatch = /^https?:\\/\\/(.*)\\/(.*)/.exec(filename);\n\n  if (htmlMatch && htmlMatch[1] && htmlMatch[2]) {\n    return htmlMatch[2];\n  } // Strip everything before the first directory for source files\n\n\n  const sourceMatch = /\\/.*?([^./]+[/|\\\\].*)$/.exec(filename);\n\n  if (sourceMatch && sourceMatch[1]) {\n    return sourceMatch[1].replace(/\\?$/, '');\n  } // Unknown filename type, use it as is\n\n\n  return filename;\n}\n\nmodule.exports = formatFilename;","map":{"version":3,"sources":["/home/harish/windo/phoenix/node_modules/customize-cra-react-refresh/node_modules/@pmmmwh/react-refresh-webpack-plugin/src/overlay/utils/formatFilename.js"],"names":["formatFilename","filename","htmlMatch","exec","sourceMatch","replace","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,SAASA,cAAT,CAAwBC,QAAxB,EAAkC;AAChC;AACA,QAAMC,SAAS,GAAG,yBAAyBC,IAAzB,CAA8BF,QAA9B,CAAlB;;AACA,MAAIC,SAAS,IAAIA,SAAS,CAAC,CAAD,CAAtB,IAA6BA,SAAS,CAAC,CAAD,CAA1C,EAA+C;AAC7C,WAAOA,SAAS,CAAC,CAAD,CAAhB;AACD,GAL+B,CAOhC;;;AACA,QAAME,WAAW,GAAG,yBAAyBD,IAAzB,CAA8BF,QAA9B,CAApB;;AACA,MAAIG,WAAW,IAAIA,WAAW,CAAC,CAAD,CAA9B,EAAmC;AACjC,WAAOA,WAAW,CAAC,CAAD,CAAX,CAAeC,OAAf,CAAuB,KAAvB,EAA8B,EAA9B,CAAP;AACD,GAX+B,CAahC;;;AACA,SAAOJ,QAAP;AACD;;AAEDK,MAAM,CAACC,OAAP,GAAiBP,cAAjB","sourcesContent":["/**\n * Prettify a filename from error stacks into the desired format.\n * @param {string} filename The filename to be formatted.\n * @returns {string} The formatted filename.\n */\nfunction formatFilename(filename) {\n  // Strip away protocol and domain for compiled files\n  const htmlMatch = /^https?:\\/\\/(.*)\\/(.*)/.exec(filename);\n  if (htmlMatch && htmlMatch[1] && htmlMatch[2]) {\n    return htmlMatch[2];\n  }\n\n  // Strip everything before the first directory for source files\n  const sourceMatch = /\\/.*?([^./]+[/|\\\\].*)$/.exec(filename);\n  if (sourceMatch && sourceMatch[1]) {\n    return sourceMatch[1].replace(/\\?$/, '');\n  }\n\n  // Unknown filename type, use it as is\n  return filename;\n}\n\nmodule.exports = formatFilename;\n"]},"metadata":{},"sourceType":"script"}