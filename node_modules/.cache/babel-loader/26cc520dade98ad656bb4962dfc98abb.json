{"ast":null,"code":"var _jsxFileName = \"/home/harish/windo/phoenix/src/containers/shippingTime/ShippingTimeDesktop.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport estimateDelivery from \"../../assets/overview/estimateDelivery.svg\";\nimport { FormikInput, Button } from 'phoenix-components';\nimport { Select } from 'phoenix-components/lib/formik';\nimport { Formik, useField } from 'formik';\nimport { Becca } from \"../../api\";\nimport Loader from \"../../services/loader\";\nimport SnackBar from \"../../services/snackbar\";\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport { useShop, useRefreshShop } from \"../../contexts\";\nimport EventManager from \"../../utils/events\";\nimport styles from \"./ShippingTime.module.css\";\nimport { getInitialValues, schema, typeOptions } from \"./utils\";\n\nfunction ShippingTimeDesktop({\n  isProduct,\n  onBack\n}) {\n  _s();\n\n  const {\n    delivery: {\n      shippingTime = {}\n    }\n  } = useShop();\n  const history = useHistory();\n  const [{\n    value: updated = {}\n  },, {\n    setValue\n  }] = isProduct ? useField('shippingTime') : [{\n    value: {}\n  }, null, {\n    setValue: null\n  }];\n  const refresh = useRefreshShop();\n\n  const onSubmit = async values => {\n    try {\n      Loader.show();\n      const {\n        toItemValue,\n        fromItemValue,\n        itemType\n      } = values;\n      const from = {\n        type: itemType,\n        value: fromItemValue\n      };\n      const to = {\n        type: itemType,\n        value: toItemValue\n      };\n\n      if (!isProduct) {\n        await Becca.updateShop({\n          shippingTime: {\n            from,\n            to\n          }\n        });\n        EventManager.emitEvent('shipping_time_added');\n        refresh();\n        SnackBar.show('updated successfully', 'success');\n        history.goBack();\n        return;\n      }\n\n      setValue({\n        from,\n        to\n      });\n\n      if (Object.keys(shippingTime).length === 0) {\n        await Becca.updateShop({\n          shippingTime: {\n            from,\n            to\n          }\n        });\n        refresh();\n      }\n\n      onBack();\n    } catch (e) {\n      SnackBar.showError(e);\n    } finally {\n      Loader.hide();\n    }\n  };\n\n  const getInitial = () => {\n    if (isProduct && Object.keys(updated).length > 0) {\n      return getInitialValues(updated);\n    }\n\n    return getInitialValues(shippingTime);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.mainContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Formik, {\n    validationSchema: schema,\n    initialValues: getInitial(),\n    onSubmit: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, ({\n    values,\n    setFieldValue,\n    submitForm\n  }) => /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.formik,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.firstDiv,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FormikInput, {\n    label: \"Min. no. of days/hours to ship\",\n    name: \"fromItemValue\",\n    placeholder: \"Enter Days/Hours\",\n    type: \"number\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.padding,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 19\n    }\n  }, \"Enter the least possible time it would take to prepare and delivery your order\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.select,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    label: \"Days/hours\",\n    name: \"itemType\",\n    onChange: val => {\n      setFieldValue('itemType', val.value);\n    },\n    options: typeOptions,\n    value: typeOptions.find(x => x.value === (values === null || values === void 0 ? void 0 : values.itemType)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 19\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.formik2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.firstDiv,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FormikInput, {\n    label: \"Max. no. of days/hours to ship\",\n    name: \"toItemValue\",\n    placeholder: \"Enter Days/Hours\",\n    type: \"number\",\n    className: styles.input,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.padding,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 19\n    }\n  }, \"Enter the maximum time it would take to prepare and deliver your order\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.select,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    name: \"itemType\",\n    label: \"Days/hours\",\n    onChange: val => {\n      setFieldValue('itemType', val.value);\n    },\n    options: typeOptions,\n    value: typeOptions.find(x => x.value === (values === null || values === void 0 ? void 0 : values.itemType)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 19\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.preview,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 15\n    }\n  }, \"Customer Preview\", /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.est,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: estimateDelivery,\n    alt: \"\",\n    className: styles.img,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 19\n    }\n  }), \"Estimated Delivery Time :\", ' ', values === null || values === void 0 ? void 0 : values.fromItemValue, ' ', \"-\", ' ', values === null || values === void 0 ? void 0 : values.toItemValue, ' ', values === null || values === void 0 ? void 0 : values.itemType), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.bottom,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 17\n    }\n  }, \"Note: Please add 3-4 days to your order ready time to include pickup and delivery time for the customer if shipping through 3rd party delivery partner.\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flexCenter\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    label: \"Save\",\n    size: \"large\",\n    onClick: submitForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 17\n    }\n  }))))));\n}\n\n_s(ShippingTimeDesktop, \"RJ1N33DtKY5vyiUCYSS/SiEmpoM=\", false, function () {\n  return [useShop, useHistory, useField, useRefreshShop];\n});\n\n_c = ShippingTimeDesktop;\nShippingTimeDesktop.propTypes = {\n  isProduct: PropTypes.bool,\n  onBack: PropTypes.func\n};\nShippingTimeDesktop.defaultProps = {\n  isProduct: false,\n  onBack: () => {}\n};\nexport default ShippingTimeDesktop;\n\nvar _c;\n\n$RefreshReg$(_c, \"ShippingTimeDesktop\");","map":{"version":3,"sources":["/home/harish/windo/phoenix/src/containers/shippingTime/ShippingTimeDesktop.jsx"],"names":["React","FormikInput","Button","Select","Formik","useField","Becca","Loader","SnackBar","PropTypes","useHistory","useShop","useRefreshShop","EventManager","styles","getInitialValues","schema","typeOptions","ShippingTimeDesktop","isProduct","onBack","delivery","shippingTime","history","value","updated","setValue","refresh","onSubmit","values","show","toItemValue","fromItemValue","itemType","from","type","to","updateShop","emitEvent","goBack","Object","keys","length","e","showError","hide","getInitial","mainContainer","setFieldValue","submitForm","container","formik","firstDiv","padding","select","val","find","x","formik2","input","preview","est","estimateDelivery","img","bottom","propTypes","bool","func","defaultProps"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,WAAT,EAAsBC,MAAtB,QAAoC,oBAApC;AACA,SAASC,MAAT,QAAuB,+BAAvB;AACA,SAASC,MAAT,EAAiBC,QAAjB,QAAiC,QAAjC;AACA,SAASC,KAAT;AACA,OAAOC,MAAP;AACA,OAAOC,QAAP;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,OAAT,EAAkBC,cAAlB;AACA,OAAOC,YAAP;AACA,OAAOC,MAAP;AACA,SAASC,gBAAT,EAA2BC,MAA3B,EAAmCC,WAAnC;;AAEA,SAASC,mBAAT,CAA6B;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAA7B,EAAoD;AAAA;;AAClD,QAAM;AAAEC,IAAAA,QAAQ,EAAE;AAAEC,MAAAA,YAAY,GAAG;AAAjB;AAAZ,MAAsCX,OAAO,EAAnD;AACA,QAAMY,OAAO,GAAGb,UAAU,EAA1B;AACA,QAAM,CAAC;AAAEc,IAAAA,KAAK,EAAEC,OAAO,GAAG;AAAnB,GAAD,GAA4B;AAAEC,IAAAA;AAAF,GAA5B,IAA4CP,SAAS,GACvDd,QAAQ,CAAC,cAAD,CAD+C,GAC5B,CAAC;AAAEmB,IAAAA,KAAK,EAAE;AAAT,GAAD,EAAgB,IAAhB,EAAsB;AAAEE,IAAAA,QAAQ,EAAE;AAAZ,GAAtB,CAD/B;AAEA,QAAMC,OAAO,GAAGf,cAAc,EAA9B;;AAEA,QAAMgB,QAAQ,GAAG,MAAOC,MAAP,IAAkB;AACjC,QAAI;AACFtB,MAAAA,MAAM,CAACuB,IAAP;AACA,YAAM;AAAEC,QAAAA,WAAF;AAAeC,QAAAA,aAAf;AAA8BC,QAAAA;AAA9B,UAA2CJ,MAAjD;AACA,YAAMK,IAAI,GAAG;AAAEC,QAAAA,IAAI,EAAEF,QAAR;AAAkBT,QAAAA,KAAK,EAAEQ;AAAzB,OAAb;AACA,YAAMI,EAAE,GAAG;AAAED,QAAAA,IAAI,EAAEF,QAAR;AAAkBT,QAAAA,KAAK,EAAEO;AAAzB,OAAX;;AACA,UAAI,CAACZ,SAAL,EAAgB;AACd,cAAMb,KAAK,CAAC+B,UAAN,CAAiB;AACrBf,UAAAA,YAAY,EAAE;AAAEY,YAAAA,IAAF;AAAQE,YAAAA;AAAR;AADO,SAAjB,CAAN;AAGAvB,QAAAA,YAAY,CAACyB,SAAb,CAAuB,qBAAvB;AACAX,QAAAA,OAAO;AACPnB,QAAAA,QAAQ,CAACsB,IAAT,CAAc,sBAAd,EAAsC,SAAtC;AACAP,QAAAA,OAAO,CAACgB,MAAR;AACA;AACD;;AACDb,MAAAA,QAAQ,CAAC;AAAEQ,QAAAA,IAAF;AAAQE,QAAAA;AAAR,OAAD,CAAR;;AACA,UAAII,MAAM,CAACC,IAAP,CAAYnB,YAAZ,EAA0BoB,MAA1B,KAAqC,CAAzC,EAA4C;AAC1C,cAAMpC,KAAK,CAAC+B,UAAN,CAAiB;AACrBf,UAAAA,YAAY,EAAE;AAAEY,YAAAA,IAAF;AAAQE,YAAAA;AAAR;AADO,SAAjB,CAAN;AAGAT,QAAAA,OAAO;AACR;;AACDP,MAAAA,MAAM;AACP,KAvBD,CAuBE,OAAOuB,CAAP,EAAU;AACVnC,MAAAA,QAAQ,CAACoC,SAAT,CAAmBD,CAAnB;AACD,KAzBD,SAyBU;AACRpC,MAAAA,MAAM,CAACsC,IAAP;AACD;AACF,GA7BD;;AA+BA,QAAMC,UAAU,GAAG,MAAM;AACvB,QAAI3B,SAAS,IAAIqB,MAAM,CAACC,IAAP,CAAYhB,OAAZ,EAAqBiB,MAArB,GAA8B,CAA/C,EAAkD;AAChD,aAAO3B,gBAAgB,CAACU,OAAD,CAAvB;AACD;;AACD,WAAOV,gBAAgB,CAACO,YAAD,CAAvB;AACD,GALD;;AAOA,sBACE,uDACE;AAAK,IAAA,SAAS,EAAER,MAAM,CAACiC,aAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AACE,IAAA,gBAAgB,EAAE/B,MADpB;AAEE,IAAA,aAAa,EAAE8B,UAAU,EAF3B;AAGE,IAAA,QAAQ,EAAElB,QAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKG,CAAC;AACAC,IAAAA,MADA;AAEAmB,IAAAA,aAFA;AAGAC,IAAAA;AAHA,GAAD,kBAKC;AAAK,IAAA,SAAS,EAAEnC,MAAM,CAACoC,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAEpC,MAAM,CAACqC,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAErC,MAAM,CAACsC,QAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,WAAD;AACE,IAAA,KAAK,EAAC,gCADR;AAEE,IAAA,IAAI,EAAC,eAFP;AAGE,IAAA,WAAW,EAAC,kBAHd;AAIE,IAAA,IAAI,EAAC,QAJP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAOE;AAAK,IAAA,SAAS,EAAEtC,MAAM,CAACuC,OAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sFAPF,CADF,eAaE;AAAK,IAAA,SAAS,EAAEvC,MAAM,CAACwC,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AACE,IAAA,KAAK,EAAC,YADR;AAEE,IAAA,IAAI,EAAC,UAFP;AAGE,IAAA,QAAQ,EAAGC,GAAD,IAAS;AACjBP,MAAAA,aAAa,CAAC,UAAD,EAAaO,GAAG,CAAC/B,KAAjB,CAAb;AACD,KALH;AAME,IAAA,OAAO,EAAEP,WANX;AAOE,IAAA,KAAK,EAAEA,WAAW,CAACuC,IAAZ,CAAiBC,CAAC,IAAIA,CAAC,CAACjC,KAAF,MAAYK,MAAZ,aAAYA,MAAZ,uBAAYA,MAAM,CAAEI,QAApB,CAAtB,CAPT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAbF,CADF,eA0BE;AAAK,IAAA,SAAS,EAAEnB,MAAM,CAAC4C,OAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAE5C,MAAM,CAACsC,QAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,WAAD;AACE,IAAA,KAAK,EAAC,gCADR;AAEE,IAAA,IAAI,EAAC,aAFP;AAGE,IAAA,WAAW,EAAC,kBAHd;AAIE,IAAA,IAAI,EAAC,QAJP;AAKE,IAAA,SAAS,EAAEtC,MAAM,CAAC6C,KALpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAQE;AAAK,IAAA,SAAS,EAAE7C,MAAM,CAACuC,OAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8EARF,CADF,eAcE;AAAK,IAAA,SAAS,EAAEvC,MAAM,CAACwC,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AACE,IAAA,IAAI,EAAC,UADP;AAEE,IAAA,KAAK,EAAC,YAFR;AAGE,IAAA,QAAQ,EAAGC,GAAD,IAAS;AACjBP,MAAAA,aAAa,CAAC,UAAD,EAAaO,GAAG,CAAC/B,KAAjB,CAAb;AACD,KALH;AAME,IAAA,OAAO,EAAEP,WANX;AAOE,IAAA,KAAK,EAAEA,WAAW,CAACuC,IAAZ,CAAiBC,CAAC,IAAIA,CAAC,CAACjC,KAAF,MAAYK,MAAZ,aAAYA,MAAZ,uBAAYA,MAAM,CAAEI,QAApB,CAAtB,CAPT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAdF,CA1BF,eAoDE;AAAK,IAAA,SAAS,EAAEnB,MAAM,CAAC8C,OAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAEE;AAAK,IAAA,SAAS,EAAE9C,MAAM,CAAC+C,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,GAAG,EAAEC,gBAAV;AAA4B,IAAA,GAAG,EAAC,EAAhC;AAAmC,IAAA,SAAS,EAAEhD,MAAM,CAACiD,GAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,+BAIG,GAJH,EAKGlC,MALH,aAKGA,MALH,uBAKGA,MAAM,CAAEG,aALX,EAMG,GANH,OAQG,GARH,EASGH,MATH,aASGA,MATH,uBASGA,MAAM,CAAEE,WATX,EAUG,GAVH,EAWGF,MAXH,aAWGA,MAXH,uBAWGA,MAAM,CAAEI,QAXX,CAFF,eAeE;AAAK,IAAA,SAAS,EAAEnB,MAAM,CAACkD,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+JAfF,CApDF,eAwEE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AACE,IAAA,KAAK,EAAC,MADR;AAEE,IAAA,IAAI,EAAC,OAFP;AAGE,IAAA,OAAO,EAAEf,UAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAxEF,CAVJ,CADF,CADF,CADF;AAkGD;;GA/IQ/B,mB;UACqCP,O,EAC5BD,U,EAEZL,Q,EACYO,c;;;KALTM,mB;AAiJTA,mBAAmB,CAAC+C,SAApB,GAAgC;AAC9B9C,EAAAA,SAAS,EAAEV,SAAS,CAACyD,IADS;AAE9B9C,EAAAA,MAAM,EAAEX,SAAS,CAAC0D;AAFY,CAAhC;AAKAjD,mBAAmB,CAACkD,YAApB,GAAmC;AACjCjD,EAAAA,SAAS,EAAE,KADsB;AAEjCC,EAAAA,MAAM,EAAE,MAAM,CAAE;AAFiB,CAAnC;AAKA,eAAeF,mBAAf","sourcesContent":["import React from 'react';\nimport estimateDelivery from 'assets/overview/estimateDelivery.svg';\nimport { FormikInput, Button } from 'phoenix-components';\nimport { Select } from 'phoenix-components/lib/formik';\nimport { Formik, useField } from 'formik';\nimport { Becca } from 'api';\nimport Loader from 'services/loader';\nimport SnackBar from 'services/snackbar';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport { useShop, useRefreshShop } from 'contexts';\nimport EventManager from 'utils/events';\nimport styles from './ShippingTime.module.css';\nimport { getInitialValues, schema, typeOptions } from './utils';\n\nfunction ShippingTimeDesktop({ isProduct, onBack }) {\n  const { delivery: { shippingTime = {} } } = useShop();\n  const history = useHistory();\n  const [{ value: updated = {} }, , { setValue }] = isProduct\n    ? useField('shippingTime') : [{ value: {} }, null, { setValue: null }];\n  const refresh = useRefreshShop();\n\n  const onSubmit = async (values) => {\n    try {\n      Loader.show();\n      const { toItemValue, fromItemValue, itemType } = values;\n      const from = { type: itemType, value: fromItemValue };\n      const to = { type: itemType, value: toItemValue };\n      if (!isProduct) {\n        await Becca.updateShop({\n          shippingTime: { from, to },\n        });\n        EventManager.emitEvent('shipping_time_added');\n        refresh();\n        SnackBar.show('updated successfully', 'success');\n        history.goBack();\n        return;\n      }\n      setValue({ from, to });\n      if (Object.keys(shippingTime).length === 0) {\n        await Becca.updateShop({\n          shippingTime: { from, to },\n        });\n        refresh();\n      }\n      onBack();\n    } catch (e) {\n      SnackBar.showError(e);\n    } finally {\n      Loader.hide();\n    }\n  };\n\n  const getInitial = () => {\n    if (isProduct && Object.keys(updated).length > 0) {\n      return getInitialValues(updated);\n    }\n    return getInitialValues(shippingTime);\n  };\n\n  return (\n    <>\n      <div className={styles.mainContainer}>\n        <Formik\n          validationSchema={schema}\n          initialValues={getInitial()}\n          onSubmit={onSubmit}\n        >\n          {({\n            values,\n            setFieldValue,\n            submitForm,\n          }) => (\n            <div className={styles.container}>\n              <div className={styles.formik}>\n                <div className={styles.firstDiv}>\n                  <FormikInput\n                    label=\"Min. no. of days/hours to ship\"\n                    name=\"fromItemValue\"\n                    placeholder=\"Enter Days/Hours\"\n                    type=\"number\"\n                  />\n                  <div className={styles.padding}>\n                    Enter the least possible time it would take to\n                    prepare and delivery your order\n                  </div>\n                </div>\n                <div className={styles.select}>\n                  <Select\n                    label=\"Days/hours\"\n                    name=\"itemType\"\n                    onChange={(val) => {\n                      setFieldValue('itemType', val.value);\n                    }}\n                    options={typeOptions}\n                    value={typeOptions.find(x => x.value === values?.itemType)}\n                  />\n                </div>\n              </div>\n              <div className={styles.formik2}>\n                <div className={styles.firstDiv}>\n                  <FormikInput\n                    label=\"Max. no. of days/hours to ship\"\n                    name=\"toItemValue\"\n                    placeholder=\"Enter Days/Hours\"\n                    type=\"number\"\n                    className={styles.input}\n                  />\n                  <div className={styles.padding}>\n                    Enter the maximum time it would take to\n                    prepare and deliver your order\n                  </div>\n                </div>\n                <div className={styles.select}>\n                  <Select\n                    name=\"itemType\"\n                    label=\"Days/hours\"\n                    onChange={(val) => {\n                      setFieldValue('itemType', val.value);\n                    }}\n                    options={typeOptions}\n                    value={typeOptions.find(x => x.value === values?.itemType)}\n                  />\n                </div>\n              </div>\n              <div className={styles.preview}>\n                Customer Preview\n                <div className={styles.est}>\n                  <img src={estimateDelivery} alt=\"\" className={styles.img} />\n                  {}\n                  Estimated Delivery Time :\n                  {' '}\n                  {values?.fromItemValue}\n                  {' '}\n                  -\n                  {' '}\n                  {values?.toItemValue}\n                  {' '}\n                  {values?.itemType}\n                </div>\n                <div className={styles.bottom}>\n                  Note: Please add 3-4 days to your order ready time to include pickup and delivery time\n                  for the customer if shipping through 3rd party delivery partner.\n                </div>\n              </div>\n              <div className=\"flexCenter\">\n                <Button\n                  label=\"Save\"\n                  size=\"large\"\n                  onClick={submitForm}\n                />\n              </div>\n            </div>\n          )}\n        </Formik>\n      </div>\n    </>\n  );\n}\n\nShippingTimeDesktop.propTypes = {\n  isProduct: PropTypes.bool,\n  onBack: PropTypes.func,\n};\n\nShippingTimeDesktop.defaultProps = {\n  isProduct: false,\n  onBack: () => {}\n};\n\nexport default ShippingTimeDesktop;\n"]},"metadata":{},"sourceType":"module"}