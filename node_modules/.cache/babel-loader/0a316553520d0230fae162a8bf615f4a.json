{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\nimport { createContext, useContext, useEffect, useState } from 'react';\nexport const AppContext = /*#__PURE__*/createContext({\n  isDesktop: false,\n  language: 'en',\n  setLanguage: () => {}\n});\nexport function useDesktop() {\n  _s();\n\n  return useContext(AppContext).isDesktop;\n}\n\n_s(useDesktop, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function useLanguage() {\n  _s2();\n\n  return useContext(AppContext).language;\n}\n\n_s2(useLanguage, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function useSetLanguage() {\n  _s3();\n\n  return useContext(AppContext).setLanguage;\n}\n\n_s3(useSetLanguage, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function useIsKeyboardOpen() {\n  _s4();\n\n  const isDesktop = useDesktop();\n  const [isOpen, setIsOpen] = useState(false);\n  const [height] = useState(window.innerHeight);\n  useEffect(() => {\n    var _window, _window$visualViewpor;\n\n    if (isDesktop) {\n      return;\n    }\n\n    const onResize = () => {\n      setTimeout(() => {\n        const isOpened = window.innerHeight < height * 0.8;\n        setIsOpen(isOpened);\n      }, 25);\n    };\n\n    if (!((_window = window) !== null && _window !== void 0 && (_window$visualViewpor = _window.visualViewport) !== null && _window$visualViewpor !== void 0 && _window$visualViewpor.addEventListener)) {\n      return;\n    }\n\n    window.visualViewport.addEventListener('resize', onResize);\n    return () => {\n      window.visualViewport.removeEventListener('resize', onResize);\n    };\n  }, [isDesktop]);\n  return isOpen;\n}\n\n_s4(useIsKeyboardOpen, \"66VjxYhYJ2w3wZURyIoAoXNpVpw=\", false, function () {\n  return [useDesktop];\n});","map":{"version":3,"sources":["/home/harish/windo/phoenix/src/contexts/appContext.js"],"names":["createContext","useContext","useEffect","useState","AppContext","isDesktop","language","setLanguage","useDesktop","useLanguage","useSetLanguage","useIsKeyboardOpen","isOpen","setIsOpen","height","window","innerHeight","onResize","setTimeout","isOpened","visualViewport","addEventListener","removeEventListener"],"mappings":";;;;;AAAA,SACEA,aADF,EACiBC,UADjB,EAC6BC,SAD7B,EACwCC,QADxC,QAEO,OAFP;AAIA,OAAO,MAAMC,UAAU,gBAAGJ,aAAa,CAAC;AACtCK,EAAAA,SAAS,EAAE,KAD2B;AAEtCC,EAAAA,QAAQ,EAAE,IAF4B;AAGtCC,EAAAA,WAAW,EAAE,MAAM,CAAE;AAHiB,CAAD,CAAhC;AAMP,OAAO,SAASC,UAAT,GAAsB;AAAA;;AAC3B,SAAOP,UAAU,CAACG,UAAD,CAAV,CAAuBC,SAA9B;AACD;;GAFeG,U;;AAIhB,OAAO,SAASC,WAAT,GAAuB;AAAA;;AAC5B,SAAOR,UAAU,CAACG,UAAD,CAAV,CAAuBE,QAA9B;AACD;;IAFeG,W;;AAIhB,OAAO,SAASC,cAAT,GAA0B;AAAA;;AAC/B,SAAOT,UAAU,CAACG,UAAD,CAAV,CAAuBG,WAA9B;AACD;;IAFeG,c;;AAIhB,OAAO,SAASC,iBAAT,GAA6B;AAAA;;AAClC,QAAMN,SAAS,GAAGG,UAAU,EAA5B;AACA,QAAM,CAACI,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACW,MAAD,IAAWX,QAAQ,CAACY,MAAM,CAACC,WAAR,CAAzB;AAEAd,EAAAA,SAAS,CAAC,MAAM;AAAA;;AACd,QAAIG,SAAJ,EAAe;AACb;AACD;;AACD,UAAMY,QAAQ,GAAG,MAAM;AACrBC,MAAAA,UAAU,CAAC,MAAM;AACf,cAAMC,QAAQ,GAAGJ,MAAM,CAACC,WAAP,GAAqBF,MAAM,GAAG,GAA/C;AACAD,QAAAA,SAAS,CAACM,QAAD,CAAT;AACD,OAHS,EAGP,EAHO,CAAV;AAID,KALD;;AAMA,QAAI,aAACJ,MAAD,6DAAC,QAAQK,cAAT,kDAAC,sBAAwBC,gBAAzB,CAAJ,EAA+C;AAC7C;AACD;;AACDN,IAAAA,MAAM,CAACK,cAAP,CAAsBC,gBAAtB,CAAuC,QAAvC,EAAiDJ,QAAjD;AAEA,WAAO,MAAM;AACXF,MAAAA,MAAM,CAACK,cAAP,CAAsBE,mBAAtB,CAA0C,QAA1C,EAAoDL,QAApD;AACD,KAFD;AAGD,GAlBQ,EAkBN,CAACZ,SAAD,CAlBM,CAAT;AAoBA,SAAOO,MAAP;AACD;;IA1BeD,iB;UACIH,U","sourcesContent":["import {\n  createContext, useContext, useEffect, useState\n} from 'react';\n\nexport const AppContext = createContext({\n  isDesktop: false,\n  language: 'en',\n  setLanguage: () => {},\n});\n\nexport function useDesktop() {\n  return useContext(AppContext).isDesktop;\n}\n\nexport function useLanguage() {\n  return useContext(AppContext).language;\n}\n\nexport function useSetLanguage() {\n  return useContext(AppContext).setLanguage;\n}\n\nexport function useIsKeyboardOpen() {\n  const isDesktop = useDesktop();\n  const [isOpen, setIsOpen] = useState(false);\n  const [height] = useState(window.innerHeight);\n\n  useEffect(() => {\n    if (isDesktop) {\n      return;\n    }\n    const onResize = () => {\n      setTimeout(() => {\n        const isOpened = window.innerHeight < height * 0.8;\n        setIsOpen(isOpened);\n      }, 25);\n    };\n    if (!window?.visualViewport?.addEventListener) {\n      return;\n    }\n    window.visualViewport.addEventListener('resize', onResize);\n\n    return () => {\n      window.visualViewport.removeEventListener('resize', onResize);\n    };\n  }, [isDesktop]);\n\n  return isOpen;\n}\n"]},"metadata":{},"sourceType":"module"}