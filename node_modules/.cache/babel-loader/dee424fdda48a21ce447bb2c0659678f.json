{"ast":null,"code":"var _jsxFileName = \"/home/harish/windo/phoenix/src/components/profile/delivery/ConditionForm.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Formik, useField } from 'formik';\nimport { useToggle } from \"../../../hooks/common\";\nimport { useShop } from \"../../../contexts\";\nimport { DeleteAlert } from \"../../shared/DeleteAlert\";\nimport { useIsConditionalChargesEnabled } from \"../../../contexts/userContext\";\nimport { useHistory } from 'react-router-dom';\nimport { useQueryParams } from \"../../../hooks\";\nimport { FormikInput, Button } from 'phoenix-components';\nimport { getInitialConditionalValues } from \"./utils\";\nimport styles from \"./Delivery.module.css\";\nimport { conditionalChargeSchema } from \"./schema\";\nexport function ConditionForm({\n  index,\n  onClose\n}) {\n  _s();\n\n  const [{\n    value: charges = []\n  },, {\n    setValue\n  }] = useField('otherCharges');\n  const [del, toggleDel] = useToggle(false);\n  const shop = useShop();\n  const params = useQueryParams();\n  const history = useHistory();\n  const isConditionalChargesEnabled = useIsConditionalChargesEnabled();\n\n  const onSubmit = values => {\n    if (index !== null) {\n      charges[index] = values;\n    } else {\n      charges.push(values);\n    }\n\n    setValue([...charges]);\n    onClose();\n  };\n\n  const onDelete = () => {\n    setValue(charges.filter((_, idx) => idx !== index));\n    toggleDel();\n    onClose();\n  };\n\n  return /*#__PURE__*/React.createElement(Formik, {\n    initialValues: getInitialConditionalValues(charges, index),\n    validationSchema: conditionalChargeSchema,\n    onSubmit: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, ({\n    submitForm\n  }) => /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, del && /*#__PURE__*/React.createElement(DeleteAlert, {\n    onCancel: toggleDel,\n    onDelete: onDelete,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.paddingBottom,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(FormikInput, {\n    name: \"from\",\n    label: \"Minimum Order Value\",\n    type: \"number\",\n    readonly: false,\n    placeholder: `${shop.currency} 2000`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.paddingBottom,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(FormikInput, {\n    name: \"to\",\n    label: \"Maximum order value\",\n    type: \"number\",\n    placeholder: `${shop.currency} 5000`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.paddingBottom,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(FormikInput, {\n    name: \"charge\",\n    label: \"Delivery Charges\",\n    type: \"number\",\n    placeholder: `${shop.currency} 500`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.chargeButtons,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }\n  }, charges.length !== 0 && /*#__PURE__*/React.createElement(Button, {\n    label: \"Cancel\",\n    primary: false,\n    className: styles.button,\n    onClick: onClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    label: index !== null ? 'Update' : 'Add',\n    className: styles.button,\n    onClick: () => {\n      if (!isConditionalChargesEnabled) {\n        params.set('openPlans', 'generic');\n        history.push({\n          search: params.toString()\n        });\n        return;\n      }\n\n      submitForm();\n    },\n    variant: \"outlined\",\n    size: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }))));\n}\n\n_s(ConditionForm, \"B1c2XXm8xVDJSdVkQmfy+v0mLdI=\", false, function () {\n  return [useField, useToggle, useShop, useQueryParams, useHistory, useIsConditionalChargesEnabled];\n});\n\n_c = ConditionForm;\nConditionForm.propTypes = {\n  index: PropTypes.number,\n  onClose: PropTypes.func.isRequired\n};\nConditionForm.defaultProps = {\n  index: null\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"ConditionForm\");","map":{"version":3,"sources":["/home/harish/windo/phoenix/src/components/profile/delivery/ConditionForm.jsx"],"names":["React","PropTypes","Formik","useField","useToggle","useShop","DeleteAlert","useIsConditionalChargesEnabled","useHistory","useQueryParams","FormikInput","Button","getInitialConditionalValues","styles","conditionalChargeSchema","ConditionForm","index","onClose","value","charges","setValue","del","toggleDel","shop","params","history","isConditionalChargesEnabled","onSubmit","values","push","onDelete","filter","_","idx","submitForm","paddingBottom","currency","chargeButtons","length","button","set","search","toString","propTypes","number","func","isRequired","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Formik, useField } from 'formik';\nimport { useToggle } from 'hooks/common';\nimport { useShop } from 'contexts';\nimport { DeleteAlert } from 'components/shared/DeleteAlert';\nimport {\n  useIsConditionalChargesEnabled\n} from 'contexts/userContext';\nimport { useHistory } from 'react-router-dom';\nimport { useQueryParams } from 'hooks';\nimport { FormikInput, Button } from 'phoenix-components';\nimport { getInitialConditionalValues } from './utils';\nimport styles from './Delivery.module.css';\nimport { conditionalChargeSchema } from './schema';\n\nexport function ConditionForm({\n  index,\n  onClose\n}) {\n  const [{ value: charges = [] }, , { setValue }] = useField('otherCharges');\n  const [del, toggleDel] = useToggle(false);\n  const shop = useShop();\n  const params = useQueryParams();\n  const history = useHistory();\n  const isConditionalChargesEnabled = useIsConditionalChargesEnabled();\n\n  const onSubmit = (values) => {\n    if (index !== null) {\n      charges[index] = values;\n    } else {\n      charges.push(values);\n    }\n    setValue([...charges]);\n    onClose();\n  };\n\n  const onDelete = () => {\n    setValue(charges.filter((_, idx) => idx !== index));\n    toggleDel();\n    onClose();\n  };\n\n  return (\n    <Formik\n      initialValues={getInitialConditionalValues(charges, index)}\n      validationSchema={conditionalChargeSchema}\n      onSubmit={onSubmit}\n    >\n      {({ submitForm }) => (\n        <div>\n          {del && <DeleteAlert onCancel={toggleDel} onDelete={onDelete} />}\n          <div className={styles.paddingBottom}>\n            <FormikInput\n              name=\"from\"\n              label=\"Minimum Order Value\"\n              type=\"number\"\n              readonly={false}\n              placeholder={`${shop.currency} 2000`}\n            />\n          </div>\n          <div className={styles.paddingBottom}>\n            <FormikInput\n              name=\"to\"\n              label=\"Maximum order value\"\n              type=\"number\"\n              placeholder={`${shop.currency} 5000`}\n            />\n          </div>\n          <div className={styles.paddingBottom}>\n            <FormikInput\n              name=\"charge\"\n              label=\"Delivery Charges\"\n              type=\"number\"\n              placeholder={`${shop.currency} 500`}\n            />\n          </div>\n          <div className={styles.chargeButtons}>\n            {charges.length !== 0 && (\n              <Button\n                label=\"Cancel\"\n                primary={false}\n                className={styles.button}\n                onClick={onClose}\n              />\n            )}\n            <Button\n              label={index !== null ? 'Update' : 'Add'}\n              className={styles.button}\n              onClick={() => {\n                if (!isConditionalChargesEnabled) {\n                  params.set('openPlans', 'generic');\n                  history.push({\n                    search: params.toString(),\n                  });\n                  return;\n                }\n                submitForm();\n              }}\n              variant=\"outlined\"\n              size=\"small\"\n            />\n          </div>\n        </div>\n      )}\n    </Formik>\n  );\n}\n\nConditionForm.propTypes = {\n  index: PropTypes.number,\n  onClose: PropTypes.func.isRequired,\n};\n\nConditionForm.defaultProps = {\n  index: null,\n};\n"]},"metadata":{},"sourceType":"module"}