{"ast":null,"code":"var _jsxFileName = \"/home/harish/windo/phoenix/src/components/common/CodPopUp.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Dialog, DialogContent } from '@material-ui/core';\nimport check from \"../../assets/v2/common/checkPrimary.svg\";\nimport uncheck from \"../../assets/v2/common/unCheckPrimary.svg\";\nimport { Button, Clickable } from 'phoenix-components';\nimport { useDesktop } from \"../../contexts\";\nimport closeIcon from \"../../assets/images/orders/list/close.svg\";\nimport styles from \"./CodPopUp.module.css\";\nexport function CodPopUp({\n  onClose,\n  onAccept,\n  content\n}) {\n  _s();\n\n  const [codTerms, setCodTerms] = useState(false);\n  const [error, setError] = useState(false);\n  const isDesktop = useDesktop();\n\n  const onClick = () => {\n    if (!codTerms) {\n      setError(true);\n      return;\n    }\n\n    setError(false);\n    onAccept();\n  };\n\n  return /*#__PURE__*/React.createElement(Dialog, {\n    open: true,\n    maxWidth: isDesktop ? 'xs' : 'md',\n    fullWidth: true,\n    onClose: onClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(DialogContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, isDesktop && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flexEnd\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Clickable, {\n    onClick: onClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: closeIcon,\n    alt: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(\"p\", {\n    className: styles.para,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, content || `If you're accepting cash for your order, \n            remember to collect the payment directly from the customer and make your \n            order status Mark as Paid. `), /*#__PURE__*/React.createElement(Clickable, {\n    className: styles.terms,\n    onClick: () => {\n      setCodTerms(!codTerms);\n      setError(codTerms);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: codTerms ? check : uncheck,\n    alt: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }\n  }), \"I accept the terms\"), error && /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  }, \"Please tick the checkbox to continue\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.button,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    label: \"Ok\",\n    onClick: onClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  }))));\n}\n\n_s(CodPopUp, \"AIWrZbfGs02YTjGevYuAYk2/Zco=\", false, function () {\n  return [useDesktop];\n});\n\n_c = CodPopUp;\nCodPopUp.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  onAccept: PropTypes.func.isRequired,\n  content: PropTypes.string\n};\nCodPopUp.defaultProps = {\n  content: null\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"CodPopUp\");","map":{"version":3,"sources":["/home/harish/windo/phoenix/src/components/common/CodPopUp.jsx"],"names":["React","useState","PropTypes","Dialog","DialogContent","Button","Clickable","useDesktop","styles","CodPopUp","onClose","onAccept","content","codTerms","setCodTerms","error","setError","isDesktop","onClick","closeIcon","para","terms","check","uncheck","button","propTypes","func","isRequired","string","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Dialog, DialogContent } from '@material-ui/core';\nimport check from 'assets/v2/common/checkPrimary.svg';\nimport uncheck from 'assets/v2/common/unCheckPrimary.svg';\nimport { Button, Clickable, } from 'phoenix-components';\nimport { useDesktop } from 'contexts';\nimport closeIcon from 'assets/images/orders/list/close.svg';\nimport styles from './CodPopUp.module.css';\n\nexport function CodPopUp({\n  onClose,\n  onAccept,\n  content,\n}) {\n  const [codTerms, setCodTerms] = useState(false);\n  const [error, setError] = useState(false);\n  const isDesktop = useDesktop();\n\n  const onClick = () => {\n    if (!codTerms) {\n      setError(true);\n      return;\n    }\n    setError(false);\n    onAccept();\n  };\n\n  return (\n    <Dialog\n      open={true}\n      maxWidth={isDesktop ? 'xs' : 'md'}\n      fullWidth\n      onClose={onClose}\n    >\n      <DialogContent>\n        {isDesktop && (\n          <div className=\"flexEnd\">\n            <Clickable\n              onClick={onClose}>\n              <img src={closeIcon} alt=\"\" />\n            </Clickable>\n          </div>\n        )}\n        <p className={styles.para}>\n          {content || `If you're accepting cash for your order, \n            remember to collect the payment directly from the customer and make your \n            order status Mark as Paid. `}\n        </p>\n        <Clickable\n          className={styles.terms}\n          onClick={() => {\n            setCodTerms(!codTerms);\n            setError(codTerms);\n          }}>\n          <img src={codTerms ? check : uncheck} alt=\"\" />\n          I accept the terms\n        </Clickable>\n        {error && (\n          <div className={styles.error}>\n            Please tick the checkbox to continue\n          </div>\n        )}\n        <div className={styles.button}>\n          <Button\n            label=\"Ok\"\n            onClick={onClick}\n          />\n        </div>\n      </DialogContent>\n    </Dialog>\n\n  );\n}\n\nCodPopUp.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  onAccept: PropTypes.func.isRequired,\n  content: PropTypes.string,\n};\n\nCodPopUp.defaultProps = {\n  content: null,\n};\n"]},"metadata":{},"sourceType":"module"}