{"ast":null,"code":"import { addInstrumentationHandler, logger } from '@sentry/utils';\nimport { getActiveTransaction } from './utils';\n/**\n * Configures global error listeners\n */\n\nexport function registerErrorInstrumentation() {\n  addInstrumentationHandler('error', errorCallback);\n  addInstrumentationHandler('unhandledrejection', errorCallback);\n}\n/**\n * If an error or unhandled promise occurs, we mark the active transaction as failed\n */\n\nfunction errorCallback() {\n  var activeTransaction = getActiveTransaction();\n\n  if (activeTransaction) {\n    var status_1 = 'internal_error';\n    logger.log(\"[Tracing] Transaction: \" + status_1 + \" -> Global error occured\");\n    activeTransaction.setStatus(status_1);\n  }\n}","map":{"version":3,"sources":["../src/errors.ts"],"names":[],"mappings":"AAAA,SAAS,yBAAT,EAAoC,MAApC,QAAkD,eAAlD;AAGA,SAAS,oBAAT,QAAqC,SAArC;AAEA;;AAEG;;AACH,OAAM,SAAU,4BAAV,GAAsC;AAC1C,EAAA,yBAAyB,CAAC,OAAD,EAAU,aAAV,CAAzB;AACA,EAAA,yBAAyB,CAAC,oBAAD,EAAuB,aAAvB,CAAzB;AACD;AAED;;AAEG;;AACH,SAAS,aAAT,GAAsB;AACpB,MAAM,iBAAiB,GAAG,oBAAoB,EAA9C;;AACA,MAAI,iBAAJ,EAAuB;AACrB,QAAM,QAAM,GAAmB,gBAA/B;AACA,IAAA,MAAM,CAAC,GAAP,CAAW,4BAA0B,QAA1B,GAAgC,0BAA3C;AACA,IAAA,iBAAiB,CAAC,SAAlB,CAA4B,QAA5B;AACD;AACF","sourcesContent":["import { addInstrumentationHandler, logger } from '@sentry/utils';\n\nimport { SpanStatusType } from './span';\nimport { getActiveTransaction } from './utils';\n\n/**\n * Configures global error listeners\n */\nexport function registerErrorInstrumentation(): void {\n  addInstrumentationHandler('error', errorCallback);\n  addInstrumentationHandler('unhandledrejection', errorCallback);\n}\n\n/**\n * If an error or unhandled promise occurs, we mark the active transaction as failed\n */\nfunction errorCallback(): void {\n  const activeTransaction = getActiveTransaction();\n  if (activeTransaction) {\n    const status: SpanStatusType = 'internal_error';\n    logger.log(`[Tracing] Transaction: ${status} -> Global error occured`);\n    activeTransaction.setStatus(status);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}