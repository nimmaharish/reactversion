{"ast":null,"code":"import { generateRandomId, setLabel, merge, getDuration, getTime } from '../common/utils';\nimport { NAME_UNKNOWN, TYPE_CUSTOM } from '../common/constants';\n\nvar SpanBase = function () {\n  function SpanBase(name, type, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    if (!name) {\n      name = NAME_UNKNOWN;\n    }\n\n    if (!type) {\n      type = TYPE_CUSTOM;\n    }\n\n    this.name = name;\n    this.type = type;\n    this.options = options;\n    this.id = options.id || generateRandomId(16);\n    this.traceId = options.traceId;\n    this.sampled = options.sampled;\n    this.sampleRate = options.sampleRate;\n    this.timestamp = options.timestamp;\n    this._start = getTime(options.startTime);\n    this._end = undefined;\n    this.ended = false;\n    this.outcome = undefined;\n    this.onEnd = options.onEnd;\n  }\n\n  var _proto = SpanBase.prototype;\n\n  _proto.ensureContext = function ensureContext() {\n    if (!this.context) {\n      this.context = {};\n    }\n  };\n\n  _proto.addLabels = function addLabels(tags) {\n    this.ensureContext();\n    var ctx = this.context;\n\n    if (!ctx.tags) {\n      ctx.tags = {};\n    }\n\n    var keys = Object.keys(tags);\n    keys.forEach(function (k) {\n      return setLabel(k, tags[k], ctx.tags);\n    });\n  };\n\n  _proto.addContext = function addContext() {\n    for (var _len = arguments.length, context = new Array(_len), _key = 0; _key < _len; _key++) {\n      context[_key] = arguments[_key];\n    }\n\n    if (context.length === 0) return;\n    this.ensureContext();\n    merge.apply(void 0, [this.context].concat(context));\n  };\n\n  _proto.end = function end(endTime) {\n    if (this.ended) {\n      return;\n    }\n\n    this.ended = true;\n    this._end = getTime(endTime);\n    this.callOnEnd();\n  };\n\n  _proto.callOnEnd = function callOnEnd() {\n    if (typeof this.onEnd === 'function') {\n      this.onEnd(this);\n    }\n  };\n\n  _proto.duration = function duration() {\n    return getDuration(this._start, this._end);\n  };\n\n  return SpanBase;\n}();\n\nexport default SpanBase;","map":{"version":3,"sources":["/home/harish/windo/phoenix/node_modules/@elastic/apm-rum-core/dist/es/performance-monitoring/span-base.js"],"names":["generateRandomId","setLabel","merge","getDuration","getTime","NAME_UNKNOWN","TYPE_CUSTOM","SpanBase","name","type","options","id","traceId","sampled","sampleRate","timestamp","_start","startTime","_end","undefined","ended","outcome","onEnd","_proto","prototype","ensureContext","context","addLabels","tags","ctx","keys","Object","forEach","k","addContext","_len","arguments","length","Array","_key","apply","concat","end","endTime","callOnEnd","duration"],"mappings":"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","sourcesContent":["import { generateRandomId, setLabel, merge, getDuration, getTime } from '../common/utils';\nimport { NAME_UNKNOWN, TYPE_CUSTOM } from '../common/constants';\n\nvar SpanBase = function () {\n  function SpanBase(name, type, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    if (!name) {\n      name = NAME_UNKNOWN;\n    }\n\n    if (!type) {\n      type = TYPE_CUSTOM;\n    }\n\n    this.name = name;\n    this.type = type;\n    this.options = options;\n    this.id = options.id || generateRandomId(16);\n    this.traceId = options.traceId;\n    this.sampled = options.sampled;\n    this.sampleRate = options.sampleRate;\n    this.timestamp = options.timestamp;\n    this._start = getTime(options.startTime);\n    this._end = undefined;\n    this.ended = false;\n    this.outcome = undefined;\n    this.onEnd = options.onEnd;\n  }\n\n  var _proto = SpanBase.prototype;\n\n  _proto.ensureContext = function ensureContext() {\n    if (!this.context) {\n      this.context = {};\n    }\n  };\n\n  _proto.addLabels = function addLabels(tags) {\n    this.ensureContext();\n    var ctx = this.context;\n\n    if (!ctx.tags) {\n      ctx.tags = {};\n    }\n\n    var keys = Object.keys(tags);\n    keys.forEach(function (k) {\n      return setLabel(k, tags[k], ctx.tags);\n    });\n  };\n\n  _proto.addContext = function addContext() {\n    for (var _len = arguments.length, context = new Array(_len), _key = 0; _key < _len; _key++) {\n      context[_key] = arguments[_key];\n    }\n\n    if (context.length === 0) return;\n    this.ensureContext();\n    merge.apply(void 0, [this.context].concat(context));\n  };\n\n  _proto.end = function end(endTime) {\n    if (this.ended) {\n      return;\n    }\n\n    this.ended = true;\n    this._end = getTime(endTime);\n    this.callOnEnd();\n  };\n\n  _proto.callOnEnd = function callOnEnd() {\n    if (typeof this.onEnd === 'function') {\n      this.onEnd(this);\n    }\n  };\n\n  _proto.duration = function duration() {\n    return getDuration(this._start, this._end);\n  };\n\n  return SpanBase;\n}();\n\nexport default SpanBase;"]},"metadata":{},"sourceType":"module"}