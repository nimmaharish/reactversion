{"ast":null,"code":"var _jsxFileName = \"/home/harish/windo/phoenix/src/components/products/VariantBlock.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useField } from 'formik';\nimport { OtherButton } from \"./OtherButton\";\nimport { useToggle } from \"../../hooks/common\";\nimport { useDesktop } from \"../../contexts\";\nimport { Button, Card, Chip } from 'phoenix-components';\nimport { ProductVariantDrawer } from \"./ProductVariantDrawer\";\nimport styles from \"./VariantBlock.module.css\";\nexport function VariantBlock() {\n  _s();\n\n  var _variants$, _variants$$info, _variants$0$info$name, _variants$2, _variants$2$info, _variants$3, _variants$3$info, _variants$0$info$name2, _variants$4, _variants$4$info;\n\n  const isDesktop = useDesktop();\n  const [{\n    value: variants = []\n  }] = useField('variants');\n  const [{\n    value: colors = []\n  }] = useField('colors');\n  const [openVariants, toggleVariants] = useToggle(false);\n  const [open, toggle] = useToggle(variants.length > 0);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, !isDesktop && /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }\n  }, openVariants && /*#__PURE__*/React.createElement(ProductVariantDrawer, {\n    onClose: toggleVariants,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 26\n    }\n  }), /*#__PURE__*/React.createElement(OtherButton, {\n    onClick: toggle,\n    label: \"Variants\",\n    open: open,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  }), open && /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.drawer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.buttonContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: toggleVariants,\n    label: variants.length === 0 && colors.length === 0 ? 'Add Variants' : 'Edit Variants',\n    className: styles.button,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 15\n    }\n  })), (variants.length > 0 || colors.length > 0) && /*#__PURE__*/React.createElement(Card, {\n    className: styles.card,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 15\n    }\n  }, variants.length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.heading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 21\n    }\n  }, ((_variants$ = variants[0]) === null || _variants$ === void 0 ? void 0 : (_variants$$info = _variants$.info) === null || _variants$$info === void 0 ? void 0 : _variants$$info.type) === 'size' ? 'Size' : (_variants$0$info$name = (_variants$2 = variants[0]) === null || _variants$2 === void 0 ? void 0 : (_variants$2$info = _variants$2.info) === null || _variants$2$info === void 0 ? void 0 : _variants$2$info.name) !== null && _variants$0$info$name !== void 0 ? _variants$0$info$name : 'Custom'), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.row,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 21\n    }\n  }, variants.map((v, idx) => {\n    var _v$info;\n\n    return /*#__PURE__*/React.createElement(Chip, {\n      key: idx,\n      label: v === null || v === void 0 ? void 0 : (_v$info = v.info) === null || _v$info === void 0 ? void 0 : _v$info.value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 25\n      }\n    });\n  }))), colors.length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.heading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 21\n    }\n  }, \"Color\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.row,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 21\n    }\n  }, colors.map((c, idx) => /*#__PURE__*/React.createElement(\"div\", {\n    key: idx,\n    style: {\n      background: c.hex\n    },\n    className: styles.colorBlock,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 25\n    }\n  }))))))), isDesktop && /*#__PURE__*/React.createElement(React.Fragment, null, (variants.length > 0 || colors.length > 0) && /*#__PURE__*/React.createElement(Card, {\n    className: styles.card,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  }, variants.length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.heading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }\n  }, ((_variants$3 = variants[0]) === null || _variants$3 === void 0 ? void 0 : (_variants$3$info = _variants$3.info) === null || _variants$3$info === void 0 ? void 0 : _variants$3$info.type) === 'size' ? 'Size' : (_variants$0$info$name2 = (_variants$4 = variants[0]) === null || _variants$4 === void 0 ? void 0 : (_variants$4$info = _variants$4.info) === null || _variants$4$info === void 0 ? void 0 : _variants$4$info.name) !== null && _variants$0$info$name2 !== void 0 ? _variants$0$info$name2 : 'Custom'), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.row,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 17\n    }\n  }, variants.map((v, idx) => {\n    var _v$info2;\n\n    return /*#__PURE__*/React.createElement(Chip, {\n      key: idx,\n      label: v === null || v === void 0 ? void 0 : (_v$info2 = v.info) === null || _v$info2 === void 0 ? void 0 : _v$info2.value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }\n    });\n  }))), colors.length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.heading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }\n  }, \"Color\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.row,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }\n  }, colors.map((c, idx) => /*#__PURE__*/React.createElement(\"div\", {\n    key: idx,\n    style: {\n      background: c.hex\n    },\n    className: styles.colorBlock,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 21\n    }\n  })))))));\n}\n\n_s(VariantBlock, \"Lqb/j3/mJRB3TQTp1sP3GK1q314=\", false, function () {\n  return [useDesktop, useField, useField, useToggle, useToggle];\n});\n\n_c = VariantBlock;\nVariantBlock.propTypes = {};\nVariantBlock.defaultProps = {};\n\nvar _c;\n\n$RefreshReg$(_c, \"VariantBlock\");","map":{"version":3,"sources":["/home/harish/windo/phoenix/src/components/products/VariantBlock.jsx"],"names":["React","useField","OtherButton","useToggle","useDesktop","Button","Card","Chip","ProductVariantDrawer","styles","VariantBlock","isDesktop","value","variants","colors","openVariants","toggleVariants","open","toggle","length","container","drawer","buttonContainer","button","card","heading","info","type","name","row","map","v","idx","c","background","hex","colorBlock","propTypes","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useField } from 'formik';\nimport { OtherButton } from 'components/products/OtherButton';\nimport { useToggle } from 'hooks/common';\nimport { useDesktop } from 'contexts';\nimport { Button, Card, Chip } from 'phoenix-components';\nimport { ProductVariantDrawer } from 'components/products/ProductVariantDrawer';\nimport styles from './VariantBlock.module.css';\n\nexport function VariantBlock() {\n  const isDesktop = useDesktop();\n  const [{ value: variants = [] }] = useField('variants');\n  const [{ value: colors = [] }] = useField('colors');\n  const [openVariants, toggleVariants] = useToggle(false);\n  const [open, toggle] = useToggle(variants.length > 0);\n\n  return (\n    <>\n      {!isDesktop\n    && (\n      <div className={styles.container}>\n        {openVariants && <ProductVariantDrawer onClose={toggleVariants} />}\n        <OtherButton onClick={toggle} label=\"Variants\" open={open} />\n        {open && (\n          <div className={styles.drawer}>\n            <div className={styles.buttonContainer}>\n              <Button\n                onClick={toggleVariants}\n                label={(variants.length === 0 && colors.length === 0) ? 'Add Variants' : 'Edit Variants'}\n                className={styles.button}\n              />\n            </div>\n            {(variants.length > 0 || colors.length > 0) && (\n              <Card className={styles.card}>\n                {variants.length > 0 && (\n                  <div>\n                    <div className={styles.heading}>\n                      {variants[0]?.info?.type === 'size' ? 'Size' : (variants[0]?.info?.name ?? 'Custom')}\n                    </div>\n                    <div className={styles.row}>\n                      {variants.map((v, idx) => (\n                        <Chip key={idx} label={v?.info?.value} />\n                      ))}\n                    </div>\n                  </div>\n                )}\n                {colors.length > 0 && (\n                  <div>\n                    <div className={styles.heading}>\n                      Color\n                    </div>\n                    <div className={styles.row}>\n                      {colors.map((c, idx) => (\n                        <div\n                          key={idx}\n                          style={{\n                            background: c.hex,\n                          }}\n                          className={styles.colorBlock}\n                        >\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </Card>\n            )}\n          </div>\n        )}\n      </div>\n    )}\n      {isDesktop\n    && (\n      <>\n        {(variants.length > 0 || colors.length > 0) && (\n          <Card className={styles.card}>\n            {variants.length > 0 && (\n              <div>\n                <div className={styles.heading}>\n                  {variants[0]?.info?.type === 'size' ? 'Size' : (variants[0]?.info?.name ?? 'Custom')}\n                </div>\n                <div className={styles.row}>\n                  {variants.map((v, idx) => (\n                    <Chip key={idx} label={v?.info?.value} />\n                  ))}\n                </div>\n              </div>\n            )}\n            {colors.length > 0 && (\n              <div>\n                <div className={styles.heading}>\n                  Color\n                </div>\n                <div className={styles.row}>\n                  {colors.map((c, idx) => (\n                    <div\n                      key={idx}\n                      style={{\n                        background: c.hex,\n                      }}\n                      className={styles.colorBlock}\n                    >\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </Card>\n        )}\n      </>\n    )}\n    </>\n  );\n}\n\nVariantBlock.propTypes = {};\n\nVariantBlock.defaultProps = {};\n"]},"metadata":{},"sourceType":"module"}