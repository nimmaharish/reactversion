{"ast":null,"code":"import { dsnToString, makeDsn, urlEncode } from '@sentry/utils';\nvar SENTRY_API_VERSION = '7';\n/**\n * Helper class to provide urls, headers and metadata that can be used to form\n * different types of requests to Sentry endpoints.\n * Supports both envelopes and regular event requests.\n *\n * @deprecated Please use APIDetails\n **/\n\nvar API =\n/** @class */\nfunction () {\n  /** Create a new instance of API */\n  function API(dsn, metadata, tunnel) {\n    if (metadata === void 0) {\n      metadata = {};\n    }\n\n    this.dsn = dsn;\n    this._dsnObject = makeDsn(dsn);\n    this.metadata = metadata;\n    this._tunnel = tunnel;\n  }\n  /** Returns the Dsn object. */\n\n\n  API.prototype.getDsn = function () {\n    return this._dsnObject;\n  };\n  /** Does this transport force envelopes? */\n\n\n  API.prototype.forceEnvelope = function () {\n    return !!this._tunnel;\n  };\n  /** Returns the prefix to construct Sentry ingestion API endpoints. */\n\n\n  API.prototype.getBaseApiEndpoint = function () {\n    return getBaseApiEndpoint(this._dsnObject);\n  };\n  /** Returns the store endpoint URL. */\n\n\n  API.prototype.getStoreEndpoint = function () {\n    return getStoreEndpoint(this._dsnObject);\n  };\n  /**\n   * Returns the store endpoint URL with auth in the query string.\n   *\n   * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n   */\n\n\n  API.prototype.getStoreEndpointWithUrlEncodedAuth = function () {\n    return getStoreEndpointWithUrlEncodedAuth(this._dsnObject);\n  };\n  /**\n   * Returns the envelope endpoint URL with auth in the query string.\n   *\n   * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n   */\n\n\n  API.prototype.getEnvelopeEndpointWithUrlEncodedAuth = function () {\n    return getEnvelopeEndpointWithUrlEncodedAuth(this._dsnObject, this._tunnel);\n  };\n\n  return API;\n}();\n\nexport { API };\n/** Initializes API Details */\n\nexport function initAPIDetails(dsn, metadata, tunnel) {\n  return {\n    initDsn: dsn,\n    metadata: metadata || {},\n    dsn: makeDsn(dsn),\n    tunnel: tunnel\n  };\n}\n/** Returns the prefix to construct Sentry ingestion API endpoints. */\n\nfunction getBaseApiEndpoint(dsn) {\n  var protocol = dsn.protocol ? dsn.protocol + \":\" : '';\n  var port = dsn.port ? \":\" + dsn.port : '';\n  return protocol + \"//\" + dsn.host + port + (dsn.path ? \"/\" + dsn.path : '') + \"/api/\";\n}\n/** Returns the ingest API endpoint for target. */\n\n\nfunction _getIngestEndpoint(dsn, target) {\n  return \"\" + getBaseApiEndpoint(dsn) + dsn.projectId + \"/\" + target + \"/\";\n}\n/** Returns a URL-encoded string with auth config suitable for a query string. */\n\n\nfunction _encodedAuth(dsn) {\n  return urlEncode({\n    // We send only the minimum set of required information. See\n    // https://github.com/getsentry/sentry-javascript/issues/2572.\n    sentry_key: dsn.publicKey,\n    sentry_version: SENTRY_API_VERSION\n  });\n}\n/** Returns the store endpoint URL. */\n\n\nfunction getStoreEndpoint(dsn) {\n  return _getIngestEndpoint(dsn, 'store');\n}\n/**\n * Returns the store endpoint URL with auth in the query string.\n *\n * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n */\n\n\nexport function getStoreEndpointWithUrlEncodedAuth(dsn) {\n  return getStoreEndpoint(dsn) + \"?\" + _encodedAuth(dsn);\n}\n/** Returns the envelope endpoint URL. */\n\nfunction _getEnvelopeEndpoint(dsn) {\n  return _getIngestEndpoint(dsn, 'envelope');\n}\n/**\n * Returns the envelope endpoint URL with auth in the query string.\n *\n * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n */\n\n\nexport function getEnvelopeEndpointWithUrlEncodedAuth(dsn, tunnel) {\n  return tunnel ? tunnel : _getEnvelopeEndpoint(dsn) + \"?\" + _encodedAuth(dsn);\n}\n/**\n * Returns an object that can be used in request headers.\n * This is needed for node and the old /store endpoint in sentry\n */\n\nexport function getRequestHeaders(dsn, clientName, clientVersion) {\n  // CHANGE THIS to use metadata but keep clientName and clientVersion compatible\n  var header = [\"Sentry sentry_version=\" + SENTRY_API_VERSION];\n  header.push(\"sentry_client=\" + clientName + \"/\" + clientVersion);\n  header.push(\"sentry_key=\" + dsn.publicKey);\n\n  if (dsn.pass) {\n    header.push(\"sentry_secret=\" + dsn.pass);\n  }\n\n  return {\n    'Content-Type': 'application/json',\n    'X-Sentry-Auth': header.join(', ')\n  };\n}\n/** Returns the url to the report dialog endpoint. */\n\nexport function getReportDialogEndpoint(dsnLike, dialogOptions) {\n  var dsn = makeDsn(dsnLike);\n  var endpoint = getBaseApiEndpoint(dsn) + \"embed/error-page/\";\n  var encodedOptions = \"dsn=\" + dsnToString(dsn);\n\n  for (var key in dialogOptions) {\n    if (key === 'dsn') {\n      continue;\n    }\n\n    if (key === 'user') {\n      if (!dialogOptions.user) {\n        continue;\n      }\n\n      if (dialogOptions.user.name) {\n        encodedOptions += \"&name=\" + encodeURIComponent(dialogOptions.user.name);\n      }\n\n      if (dialogOptions.user.email) {\n        encodedOptions += \"&email=\" + encodeURIComponent(dialogOptions.user.email);\n      }\n    } else {\n      encodedOptions += \"&\" + encodeURIComponent(key) + \"=\" + encodeURIComponent(dialogOptions[key]);\n    }\n  }\n\n  return endpoint + \"?\" + encodedOptions;\n}","map":{"version":3,"sources":["../src/api.ts"],"names":[],"mappings":"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","sourcesContent":["import { DsnComponents, DsnLike, SdkMetadata } from '@sentry/types';\nimport { dsnToString, makeDsn, urlEncode } from '@sentry/utils';\n\nconst SENTRY_API_VERSION = '7';\n\n/**\n * Stores details about a Sentry SDK\n */\nexport interface APIDetails {\n  /** The DSN as passed to Sentry.init() */\n  initDsn: DsnLike;\n  /** Metadata about the SDK (name, version, etc) for inclusion in envelope headers */\n  metadata: SdkMetadata;\n  /** The internally used Dsn object. */\n  readonly dsn: DsnComponents;\n  /** The envelope tunnel to use. */\n  readonly tunnel?: string;\n}\n\n/**\n * Helper class to provide urls, headers and metadata that can be used to form\n * different types of requests to Sentry endpoints.\n * Supports both envelopes and regular event requests.\n *\n * @deprecated Please use APIDetails\n **/\nexport class API {\n  /** The DSN as passed to Sentry.init() */\n  public dsn: DsnLike;\n\n  /** Metadata about the SDK (name, version, etc) for inclusion in envelope headers */\n  public metadata: SdkMetadata;\n\n  /** The internally used Dsn object. */\n  private readonly _dsnObject: DsnComponents;\n\n  /** The envelope tunnel to use. */\n  private readonly _tunnel?: string;\n\n  /** Create a new instance of API */\n  public constructor(dsn: DsnLike, metadata: SdkMetadata = {}, tunnel?: string) {\n    this.dsn = dsn;\n    this._dsnObject = makeDsn(dsn);\n    this.metadata = metadata;\n    this._tunnel = tunnel;\n  }\n\n  /** Returns the Dsn object. */\n  public getDsn(): DsnComponents {\n    return this._dsnObject;\n  }\n\n  /** Does this transport force envelopes? */\n  public forceEnvelope(): boolean {\n    return !!this._tunnel;\n  }\n\n  /** Returns the prefix to construct Sentry ingestion API endpoints. */\n  public getBaseApiEndpoint(): string {\n    return getBaseApiEndpoint(this._dsnObject);\n  }\n\n  /** Returns the store endpoint URL. */\n  public getStoreEndpoint(): string {\n    return getStoreEndpoint(this._dsnObject);\n  }\n\n  /**\n   * Returns the store endpoint URL with auth in the query string.\n   *\n   * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n   */\n  public getStoreEndpointWithUrlEncodedAuth(): string {\n    return getStoreEndpointWithUrlEncodedAuth(this._dsnObject);\n  }\n\n  /**\n   * Returns the envelope endpoint URL with auth in the query string.\n   *\n   * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n   */\n  public getEnvelopeEndpointWithUrlEncodedAuth(): string {\n    return getEnvelopeEndpointWithUrlEncodedAuth(this._dsnObject, this._tunnel);\n  }\n}\n\n/** Initializes API Details */\nexport function initAPIDetails(dsn: DsnLike, metadata?: SdkMetadata, tunnel?: string): APIDetails {\n  return {\n    initDsn: dsn,\n    metadata: metadata || {},\n    dsn: makeDsn(dsn),\n    tunnel,\n  } as APIDetails;\n}\n\n/** Returns the prefix to construct Sentry ingestion API endpoints. */\nfunction getBaseApiEndpoint(dsn: DsnComponents): string {\n  const protocol = dsn.protocol ? `${dsn.protocol}:` : '';\n  const port = dsn.port ? `:${dsn.port}` : '';\n  return `${protocol}//${dsn.host}${port}${dsn.path ? `/${dsn.path}` : ''}/api/`;\n}\n\n/** Returns the ingest API endpoint for target. */\nfunction _getIngestEndpoint(dsn: DsnComponents, target: 'store' | 'envelope'): string {\n  return `${getBaseApiEndpoint(dsn)}${dsn.projectId}/${target}/`;\n}\n\n/** Returns a URL-encoded string with auth config suitable for a query string. */\nfunction _encodedAuth(dsn: DsnComponents): string {\n  return urlEncode({\n    // We send only the minimum set of required information. See\n    // https://github.com/getsentry/sentry-javascript/issues/2572.\n    sentry_key: dsn.publicKey,\n    sentry_version: SENTRY_API_VERSION,\n  });\n}\n\n/** Returns the store endpoint URL. */\nfunction getStoreEndpoint(dsn: DsnComponents): string {\n  return _getIngestEndpoint(dsn, 'store');\n}\n\n/**\n * Returns the store endpoint URL with auth in the query string.\n *\n * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n */\nexport function getStoreEndpointWithUrlEncodedAuth(dsn: DsnComponents): string {\n  return `${getStoreEndpoint(dsn)}?${_encodedAuth(dsn)}`;\n}\n\n/** Returns the envelope endpoint URL. */\nfunction _getEnvelopeEndpoint(dsn: DsnComponents): string {\n  return _getIngestEndpoint(dsn, 'envelope');\n}\n\n/**\n * Returns the envelope endpoint URL with auth in the query string.\n *\n * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n */\nexport function getEnvelopeEndpointWithUrlEncodedAuth(dsn: DsnComponents, tunnel?: string): string {\n  return tunnel ? tunnel : `${_getEnvelopeEndpoint(dsn)}?${_encodedAuth(dsn)}`;\n}\n\n/**\n * Returns an object that can be used in request headers.\n * This is needed for node and the old /store endpoint in sentry\n */\nexport function getRequestHeaders(\n  dsn: DsnComponents,\n  clientName: string,\n  clientVersion: string,\n): { [key: string]: string } {\n  // CHANGE THIS to use metadata but keep clientName and clientVersion compatible\n  const header = [`Sentry sentry_version=${SENTRY_API_VERSION}`];\n  header.push(`sentry_client=${clientName}/${clientVersion}`);\n  header.push(`sentry_key=${dsn.publicKey}`);\n  if (dsn.pass) {\n    header.push(`sentry_secret=${dsn.pass}`);\n  }\n  return {\n    'Content-Type': 'application/json',\n    'X-Sentry-Auth': header.join(', '),\n  };\n}\n\n/** Returns the url to the report dialog endpoint. */\nexport function getReportDialogEndpoint(\n  dsnLike: DsnLike,\n  dialogOptions: {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    [key: string]: any;\n    user?: { name?: string; email?: string };\n  },\n): string {\n  const dsn = makeDsn(dsnLike);\n  const endpoint = `${getBaseApiEndpoint(dsn)}embed/error-page/`;\n\n  let encodedOptions = `dsn=${dsnToString(dsn)}`;\n  for (const key in dialogOptions) {\n    if (key === 'dsn') {\n      continue;\n    }\n\n    if (key === 'user') {\n      if (!dialogOptions.user) {\n        continue;\n      }\n      if (dialogOptions.user.name) {\n        encodedOptions += `&name=${encodeURIComponent(dialogOptions.user.name)}`;\n      }\n      if (dialogOptions.user.email) {\n        encodedOptions += `&email=${encodeURIComponent(dialogOptions.user.email)}`;\n      }\n    } else {\n      encodedOptions += `&${encodeURIComponent(key)}=${encodeURIComponent(dialogOptions[key] as string)}`;\n    }\n  }\n\n  return `${endpoint}?${encodedOptions}`;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}