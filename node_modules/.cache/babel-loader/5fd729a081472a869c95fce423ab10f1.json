{"ast":null,"code":"var _jsxFileName = \"/home/harish/windo/phoenix/src/components/orders/v2/ShippingStatusDrawer.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Snackbar from \"../../../services/snackbar\";\nimport Loader from \"../../../services/loader\";\nimport { Factory } from \"../../../api\";\nimport { useOrder, useRefresh } from \"../../../contexts/orderContext\";\nimport _ from 'lodash';\nimport { useToggle } from \"../../../hooks/common\";\nimport Alert from \"../../shared/alert/Alert\";\nimport { ShippingModal } from \"../ShippingModal\";\nimport { SHIPPING_STATUS_LIST } from \"./statusUtils\";\nimport { CommonStatusDrawer } from \"./CommonStatusDrawer\";\nexport function ShippingStatusDrawer({\n  onClose,\n  items\n}) {\n  _s();\n\n  const [openAlert, toggleAlert] = useToggle();\n  const refreshOrder = useRefresh();\n  const [groupId, setGroupId] = useState(null);\n  const order = useOrder();\n\n  const onUpdate = async (status, nt, digitalProducts) => {\n    try {\n      Loader.show();\n      await Factory.updateStatus(order._id, 'shipping', status, items.map(item => item._id), nt, {}, digitalProducts);\n      refreshOrder();\n      onClose();\n    } catch (e) {\n      Snackbar.showError(e);\n    } finally {\n      Loader.hide();\n    }\n  };\n\n  const onStartShipping = async () => {\n    const shippedItems = new Set(_.flatten(order.groups.shipped.map(g => g.items.map(i => i._id))));\n    console.log(items);\n    const alreadyShippedItems = items.filter(i => shippedItems.has(i));\n\n    if (alreadyShippedItems.length > 0) {\n      toggleAlert();\n      return;\n    }\n\n    try {\n      const data = await Factory.getShippingMeta(order === null || order === void 0 ? void 0 : order._id, {\n        ids: items.map(item => item._id)\n      });\n      setGroupId(data.groupId);\n      refreshOrder();\n    } catch (e) {\n      Snackbar.showError(e);\n    } finally {\n      Loader.hide();\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, openAlert && /*#__PURE__*/React.createElement(Alert, {\n    btnText: \"Ok\",\n    text: \"Some items are already shipped. Unselect the items that are shipped and try again.\",\n    onClick: toggleAlert,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }), groupId && /*#__PURE__*/React.createElement(ShippingModal, {\n    groupId: groupId,\n    order: order,\n    onClose: onClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(CommonStatusDrawer, {\n    statusList: SHIPPING_STATUS_LIST,\n    onSubmit: onUpdate,\n    onClose: onClose,\n    title: \"Shipping Status\",\n    showStartShipping: true,\n    onStartShipping: onStartShipping,\n    items: items,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }));\n}\n\n_s(ShippingStatusDrawer, \"sFyFZjJjgxPOBCxTDB90m9bcGnE=\", false, function () {\n  return [useToggle, useRefresh, useOrder];\n});\n\n_c = ShippingStatusDrawer;\nShippingStatusDrawer.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  items: PropTypes.array.isRequired\n};\nShippingStatusDrawer.defaultProps = {};\n\nvar _c;\n\n$RefreshReg$(_c, \"ShippingStatusDrawer\");","map":{"version":3,"sources":["/home/harish/windo/phoenix/src/components/orders/v2/ShippingStatusDrawer.jsx"],"names":["React","useState","PropTypes","Snackbar","Loader","Factory","useOrder","useRefresh","_","useToggle","Alert","ShippingModal","SHIPPING_STATUS_LIST","CommonStatusDrawer","ShippingStatusDrawer","onClose","items","openAlert","toggleAlert","refreshOrder","groupId","setGroupId","order","onUpdate","status","nt","digitalProducts","show","updateStatus","_id","map","item","e","showError","hide","onStartShipping","shippedItems","Set","flatten","groups","shipped","g","i","console","log","alreadyShippedItems","filter","has","length","data","getShippingMeta","ids","propTypes","func","isRequired","array","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Snackbar from 'services/snackbar';\nimport Loader from 'services/loader';\nimport { Factory } from 'api';\nimport { useOrder, useRefresh } from 'contexts/orderContext';\nimport _ from 'lodash';\nimport { useToggle } from 'hooks/common';\nimport Alert from 'components/shared/alert/Alert';\nimport { ShippingModal } from 'components/orders/ShippingModal';\nimport { SHIPPING_STATUS_LIST } from './statusUtils';\nimport { CommonStatusDrawer } from './CommonStatusDrawer';\n\nexport function ShippingStatusDrawer({\n  onClose,\n  items\n}) {\n  const [openAlert, toggleAlert] = useToggle();\n  const refreshOrder = useRefresh();\n  const [groupId, setGroupId] = useState(null);\n  const order = useOrder();\n\n  const onUpdate = async (status, nt, digitalProducts) => {\n    try {\n      Loader.show();\n      await Factory.updateStatus(\n        order._id, 'shipping', status, items.map(item => item._id), nt, {}, digitalProducts\n      );\n      refreshOrder();\n      onClose();\n    } catch (e) {\n      Snackbar.showError(e);\n    } finally {\n      Loader.hide();\n    }\n  };\n\n  const onStartShipping = async () => {\n    const shippedItems = new Set(_.flatten(order.groups.shipped.map(g => g.items.map(i => i._id))));\n    console.log(items);\n    const alreadyShippedItems = items.filter(i => shippedItems.has(i));\n    if (alreadyShippedItems.length > 0) {\n      toggleAlert();\n      return;\n    }\n    try {\n      const data = await Factory.getShippingMeta(order?._id, { ids: items.map(item => item._id) });\n      setGroupId(data.groupId);\n      refreshOrder();\n    } catch (e) {\n      Snackbar.showError(e);\n    } finally {\n      Loader.hide();\n    }\n  };\n\n  return (\n    <>\n      {openAlert && (\n        <Alert\n          btnText=\"Ok\"\n          text=\"Some items are already shipped. Unselect the items that are shipped and try again.\"\n          onClick={toggleAlert}\n        />\n      )}\n      {groupId && (\n        <ShippingModal groupId={groupId} order={order} onClose={onClose} />\n      )}\n      <CommonStatusDrawer\n        statusList={SHIPPING_STATUS_LIST}\n        onSubmit={onUpdate}\n        onClose={onClose}\n        title=\"Shipping Status\"\n        showStartShipping={true}\n        onStartShipping={onStartShipping}\n        items={items}\n      />\n    </>\n  );\n}\n\nShippingStatusDrawer.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  items: PropTypes.array.isRequired,\n};\n\nShippingStatusDrawer.defaultProps = {};\n"]},"metadata":{},"sourceType":"module"}