{"ast":null,"code":"import Snackbar from \"../services/snackbar\";\nimport compressor from 'browser-image-compression';\nimport { inParallelWithLimit } from \"./parallel\";\n/**\n * @param {File} file\n * @param {Number} size\n * @param {Number} maxWidthOrHeight\n * @param {Function} onProgress\n * @returns {Promise<File>}\n */\n\nexport async function compressImage(file, size = 10, maxWidthOrHeight = 8192, onProgress = undefined) {\n  const compressed = await compressor(file, {\n    maxSizeMB: size,\n    maxWidthOrHeight,\n    useWebWorker: true,\n    maxIterations: 2,\n    onProgress\n  });\n  return new File([compressed], file.name);\n}\nconst compressionSet = new Set(['jpg', 'jpeg', 'png']);\nconst videoCompressionSet = new Set(['mp4', 'mov']);\nconst allSet = new Set([...compressionSet, ...videoCompressionSet]);\nexport async function compressImages(files, size, maxWidthOrHeight, onProgress) {\n  const notAllowed = []; // eslint-disable-next-line array-callback-return\n\n  files.map(file => {\n    const ext = file.name.toLowerCase().split('.').pop().toLowerCase();\n    const size = Math.round((file === null || file === void 0 ? void 0 : file.size) / (1024 * 1024));\n\n    if (compressionSet.has(ext)) {\n      if (size > 5) {\n        file.ext = ext;\n        notAllowed.push(file);\n        return;\n      }\n    }\n\n    if (videoCompressionSet.has(ext)) {\n      if (size > 50) {\n        file.ext = ext;\n        notAllowed.push(file);\n        return;\n      }\n    }\n\n    if (!allSet.has(ext)) {\n      file.ext = ext;\n      notAllowed.push(file);\n    }\n  });\n\n  if (notAllowed.length > 0) {\n    if (compressionSet.has(notAllowed[0].ext)) {\n      Snackbar.show(`${notAllowed[0].name} is too big! Max 5 Mb allowed`, 'error');\n    }\n\n    if (videoCompressionSet.has(notAllowed[0].ext)) {\n      Snackbar.show(`${notAllowed[0].name} is too big! Max 50 Mb allowed`, 'error');\n    }\n\n    if (!allSet.has(notAllowed[0].ext)) {\n      Snackbar.show(`${notAllowed[0].name} is not supported!`, 'error');\n    }\n  }\n\n  const list = Array.isArray(files) ? files : [files];\n  const fileMap = list.reduce((acc, file) => {\n    const ext = file.name.toLowerCase().split('.').pop().toLowerCase();\n    acc[compressionSet.has(ext) ? 'yes' : 'no'].push(file);\n    return acc;\n  }, {\n    yes: [],\n    no: []\n  });\n  const compressedFiles = await inParallelWithLimit(fileMap.yes, 2, file => compressImage(file, size, maxWidthOrHeight, onProgress));\n  const finalList = [...compressedFiles, ...fileMap.no];\n  return Array.isArray(files) ? finalList : finalList[0];\n}","map":{"version":3,"sources":["/home/harish/windo/phoenix/src/utils/image.js"],"names":["Snackbar","compressor","inParallelWithLimit","compressImage","file","size","maxWidthOrHeight","onProgress","undefined","compressed","maxSizeMB","useWebWorker","maxIterations","File","name","compressionSet","Set","videoCompressionSet","allSet","compressImages","files","notAllowed","map","ext","toLowerCase","split","pop","Math","round","has","push","length","show","list","Array","isArray","fileMap","reduce","acc","yes","no","compressedFiles","finalList"],"mappings":"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","sourcesContent":["import Snackbar from 'services/snackbar';\nimport compressor from 'browser-image-compression';\nimport { inParallelWithLimit } from 'utils/parallel';\n\n/**\n * @param {File} file\n * @param {Number} size\n * @param {Number} maxWidthOrHeight\n * @param {Function} onProgress\n * @returns {Promise<File>}\n */\nexport async function compressImage(file, size = 10, maxWidthOrHeight = 8192, onProgress = undefined) {\n  const compressed = await compressor(file, {\n    maxSizeMB: size,\n    maxWidthOrHeight,\n    useWebWorker: true,\n    maxIterations: 2,\n    onProgress,\n  });\n\n  return new File([compressed], file.name);\n}\n\nconst compressionSet = new Set(['jpg', 'jpeg', 'png']);\nconst videoCompressionSet = new Set(['mp4', 'mov']);\nconst allSet = new Set([...compressionSet, ...videoCompressionSet]);\n\nexport async function compressImages(files, size, maxWidthOrHeight, onProgress) {\n  const notAllowed = [];\n  // eslint-disable-next-line array-callback-return\n  files.map((file) => {\n    const ext = file.name.toLowerCase().split('.').pop().toLowerCase();\n    const size = Math.round((file?.size / (1024 * 1024)));\n    if (compressionSet.has(ext)) {\n      if (size > 5) {\n        file.ext = ext;\n        notAllowed.push(file);\n        return;\n      }\n    }\n    if (videoCompressionSet.has(ext)) {\n      if (size > 50) {\n        file.ext = ext;\n        notAllowed.push(file);\n        return;\n      }\n    }\n    if (!allSet.has(ext)) {\n      file.ext = ext;\n      notAllowed.push(file);\n    }\n  });\n\n  if (notAllowed.length > 0) {\n    if (compressionSet.has(notAllowed[0].ext)) {\n      Snackbar.show(`${notAllowed[0].name} is too big! Max 5 Mb allowed`, 'error');\n    }\n    if (videoCompressionSet.has(notAllowed[0].ext)) {\n      Snackbar.show(`${notAllowed[0].name} is too big! Max 50 Mb allowed`, 'error');\n    }\n    if (!allSet.has(notAllowed[0].ext)) {\n      Snackbar.show(`${notAllowed[0].name} is not supported!`, 'error');\n    }\n  }\n\n  const list = Array.isArray(files) ? files : [files];\n  const fileMap = list.reduce((acc, file) => {\n    const ext = file.name.toLowerCase().split('.').pop().toLowerCase();\n    acc[compressionSet.has(ext) ? 'yes' : 'no'].push(file);\n    return acc;\n  }, { yes: [], no: [] });\n\n  const compressedFiles = await inParallelWithLimit(\n    fileMap.yes,\n    2,\n    (file) => compressImage(file, size, maxWidthOrHeight, onProgress),\n  );\n\n  const finalList = [...compressedFiles, ...fileMap.no];\n\n  return Array.isArray(files) ? finalList : finalList[0];\n}\n"]},"metadata":{},"sourceType":"module"}