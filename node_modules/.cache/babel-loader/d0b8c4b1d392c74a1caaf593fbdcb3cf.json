{"ast":null,"code":"export function getAddressFromComponents(addressComponents, geometry) {\n  const shouldBeComponent = {\n    pincode: ['postal_code'],\n    addressLine2: ['street_address', 'route'],\n    state: ['administrative_area_level_1', 'administrative_area_level_2', 'administrative_area_level_3', 'administrative_area_level_4', 'administrative_area_level_5'],\n    city: ['locality', 'sublocality', 'sublocality_level_1', 'sublocality_level_2', 'sublocality_level_3', 'sublocality_level_4'],\n    country: ['country']\n  };\n  const address = {\n    addressLine2: '',\n    pincode: '',\n    state: '',\n    city: '',\n    country: '',\n    coords: {\n      lat: geometry.location.lat(),\n      long: geometry.location.lng()\n    }\n  };\n  addressComponents.forEach(component => {\n    // eslint-disable-next-line no-restricted-syntax\n    for (const shouldBe in shouldBeComponent) {\n      if (shouldBeComponent[shouldBe].indexOf(component.types[0]) !== -1) {\n        if (shouldBe === 'country') {\n          address[shouldBe] = component.short_name;\n        } else {\n          address[shouldBe] = component.long_name;\n        }\n      }\n    }\n  });\n  return address;\n}","map":{"version":3,"sources":["/home/harish/windo/phoenix/src/utils/gmaps.js"],"names":["getAddressFromComponents","addressComponents","geometry","shouldBeComponent","pincode","addressLine2","state","city","country","address","coords","lat","location","long","lng","forEach","component","shouldBe","indexOf","types","short_name","long_name"],"mappings":"AAAA,OAAO,SAASA,wBAAT,CAAkCC,iBAAlC,EAAqDC,QAArD,EAA+D;AACpE,QAAMC,iBAAiB,GAAG;AACxBC,IAAAA,OAAO,EAAE,CAAC,aAAD,CADe;AAExBC,IAAAA,YAAY,EAAE,CAAC,gBAAD,EAAmB,OAAnB,CAFU;AAGxBC,IAAAA,KAAK,EAAE,CACL,6BADK,EAEL,6BAFK,EAGL,6BAHK,EAIL,6BAJK,EAKL,6BALK,CAHiB;AAUxBC,IAAAA,IAAI,EAAE,CACJ,UADI,EAEJ,aAFI,EAGJ,qBAHI,EAIJ,qBAJI,EAKJ,qBALI,EAMJ,qBANI,CAVkB;AAkBxBC,IAAAA,OAAO,EAAE,CAAC,SAAD;AAlBe,GAA1B;AAqBA,QAAMC,OAAO,GAAG;AACdJ,IAAAA,YAAY,EAAE,EADA;AAEdD,IAAAA,OAAO,EAAE,EAFK;AAGdE,IAAAA,KAAK,EAAE,EAHO;AAIdC,IAAAA,IAAI,EAAE,EAJQ;AAKdC,IAAAA,OAAO,EAAE,EALK;AAMdE,IAAAA,MAAM,EAAE;AACNC,MAAAA,GAAG,EAAET,QAAQ,CAACU,QAAT,CAAkBD,GAAlB,EADC;AAENE,MAAAA,IAAI,EAAEX,QAAQ,CAACU,QAAT,CAAkBE,GAAlB;AAFA;AANM,GAAhB;AAWAb,EAAAA,iBAAiB,CAACc,OAAlB,CAA0BC,SAAS,IAAI;AACrC;AACA,SAAK,MAAMC,QAAX,IAAuBd,iBAAvB,EAA0C;AACxC,UAAIA,iBAAiB,CAACc,QAAD,CAAjB,CAA4BC,OAA5B,CAAoCF,SAAS,CAACG,KAAV,CAAgB,CAAhB,CAApC,MAA4D,CAAC,CAAjE,EAAoE;AAClE,YAAIF,QAAQ,KAAK,SAAjB,EAA4B;AAC1BR,UAAAA,OAAO,CAACQ,QAAD,CAAP,GAAoBD,SAAS,CAACI,UAA9B;AACD,SAFD,MAEO;AACLX,UAAAA,OAAO,CAACQ,QAAD,CAAP,GAAoBD,SAAS,CAACK,SAA9B;AACD;AACF;AACF;AACF,GAXD;AAYA,SAAOZ,OAAP;AACD","sourcesContent":["export function getAddressFromComponents(addressComponents, geometry) {\n  const shouldBeComponent = {\n    pincode: ['postal_code'],\n    addressLine2: ['street_address', 'route'],\n    state: [\n      'administrative_area_level_1',\n      'administrative_area_level_2',\n      'administrative_area_level_3',\n      'administrative_area_level_4',\n      'administrative_area_level_5'\n    ],\n    city: [\n      'locality',\n      'sublocality',\n      'sublocality_level_1',\n      'sublocality_level_2',\n      'sublocality_level_3',\n      'sublocality_level_4'\n    ],\n    country: ['country']\n  };\n\n  const address = {\n    addressLine2: '',\n    pincode: '',\n    state: '',\n    city: '',\n    country: '',\n    coords: {\n      lat: geometry.location.lat(),\n      long: geometry.location.lng(),\n    },\n  };\n  addressComponents.forEach(component => {\n    // eslint-disable-next-line no-restricted-syntax\n    for (const shouldBe in shouldBeComponent) {\n      if (shouldBeComponent[shouldBe].indexOf(component.types[0]) !== -1) {\n        if (shouldBe === 'country') {\n          address[shouldBe] = component.short_name;\n        } else {\n          address[shouldBe] = component.long_name;\n        }\n      }\n    }\n  });\n  return address;\n}\n"]},"metadata":{},"sourceType":"module"}