{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { Factory } from \"../api\";\nimport Snackbar from \"../services/snackbar\";\nimport { inParallelWithLimit } from \"../utils/parallel\";\nimport Loader from \"../services/loader\";\nexport function useInfinitePayments(type = 'all', filters = {}, sorts = {}) {\n  _s();\n\n  const [items, setItems] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [page, setPage] = useState(0);\n  const [hasMore, setHasMore] = useState(true);\n  const [isEmptyProducts, setIsEmptyProducts] = useState(false);\n\n  const loadMore = async ({\n    stopIndex = 10\n  } = {}) => {\n    if (loading) {\n      return;\n    }\n\n    const newPage = Math.floor(stopIndex / 10);\n\n    if (newPage <= page) {\n      return;\n    }\n\n    if (!hasMore) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const data = await Factory.getSettlements(type, page, filters, sorts);\n      setItems([...(items || []), ...data]);\n\n      if (page === 0 && (data === null || data === void 0 ? void 0 : data.length) === 0) {\n        setIsEmptyProducts(true);\n      }\n\n      if (data.length === 0) {\n        setHasMore(false);\n      }\n\n      setPage(page + 1);\n    } catch (e) {\n      console.error(e);\n      Snackbar.show('Error Occurred', 'error');\n    } finally {\n      Loader.hide();\n      setLoading(false);\n    }\n  };\n\n  const refresh = () => {\n    setPage(0);\n    setHasMore(true);\n    setItems([]);\n    setTimeout(loadMore, 500);\n  };\n\n  useEffect(() => {\n    setPage(0);\n    refresh();\n  }, [type, JSON.stringify(filters), JSON.stringify(sorts)]);\n  return [items, loadMore, hasMore, loading, refresh, isEmptyProducts];\n}\n\n_s(useInfinitePayments, \"SCe53MKYAc0DQODdDqBJqwib+A8=\");\n\nexport function usePaymentStats(summaryFilters, statusFilters, modeWideFilters) {\n  _s2();\n\n  const [summary, setSummary] = useState(null);\n  const [statusSummary, setStatusSummary] = useState(null);\n  const [modeWiseSummary, setModeWiseSummary] = useState(null);\n\n  const refreshSummary = async () => {\n    try {\n      Loader.show();\n      setSummary(await Factory.paymentSummary(summaryFilters));\n    } catch (e) {\n      console.error(e);\n      Snackbar.show('Errror Occured', 'error');\n    } finally {\n      Loader.hide();\n    }\n  };\n\n  const refreshStatusSummary = async () => {\n    try {\n      Loader.show();\n      setStatusSummary(await Factory.paymentStatusSummary(statusFilters));\n    } catch (e) {\n      console.error(e);\n      Snackbar.show('Errror Occured', 'error');\n    } finally {\n      Loader.hide();\n    }\n  };\n\n  const refreshModeSummary = async () => {\n    try {\n      Loader.show();\n      const {\n        modes = [],\n        ...others\n      } = modeWideFilters || {};\n\n      if (modes) {\n        const uploaded = await inParallelWithLimit(modes, 5, async file => {\n          const mode = file['payments.paymentMode'];\n          let name = file['payments.vendor'];\n          const isCp = mode === 'custompayment';\n\n          if (isCp) {\n            name = file['payments.customPaymentDetails.mode'];\n          }\n\n          const isCod = mode === 'cod';\n\n          if (isCod) {\n            name = 'cash';\n          }\n\n          try {\n            const res = await Factory.paymentSummary({ ...file,\n              ...others\n            });\n            return { ...res,\n              name\n            };\n          } catch (e) {\n            console.log(e);\n          }\n        });\n        setModeWiseSummary(uploaded);\n        return;\n      }\n\n      setModeWiseSummary([await Factory.paymentSummary(modeWideFilters)]);\n    } catch (e) {\n      console.error(e);\n      Snackbar.show('Errror Occured', 'error');\n    } finally {\n      Loader.hide();\n    }\n  };\n\n  useEffect(() => {\n    if (!statusFilters) {\n      return;\n    }\n\n    console.log('status fire once', statusFilters);\n    refreshStatusSummary();\n  }, [JSON.stringify(statusFilters)]);\n  useEffect(() => {\n    if (!modeWideFilters) {\n      return;\n    }\n\n    refreshModeSummary();\n    console.log('mode fire once', modeWideFilters);\n  }, [JSON.stringify(modeWideFilters)]);\n  useEffect(() => {\n    if (!summaryFilters) {\n      return;\n    }\n\n    refreshSummary();\n    console.log('summary fire once', summaryFilters);\n  }, [JSON.stringify(summaryFilters)]);\n  return [summary, statusSummary, modeWiseSummary];\n}\n\n_s2(usePaymentStats, \"JHb0ybRBXyBJusJclR7eOfoyGtA=\");","map":{"version":3,"sources":["/home/harish/windo/phoenix/src/hooks/payments.js"],"names":["useEffect","useState","Factory","Snackbar","inParallelWithLimit","Loader","useInfinitePayments","type","filters","sorts","items","setItems","loading","setLoading","page","setPage","hasMore","setHasMore","isEmptyProducts","setIsEmptyProducts","loadMore","stopIndex","newPage","Math","floor","data","getSettlements","length","e","console","error","show","hide","refresh","setTimeout","JSON","stringify","usePaymentStats","summaryFilters","statusFilters","modeWideFilters","summary","setSummary","statusSummary","setStatusSummary","modeWiseSummary","setModeWiseSummary","refreshSummary","paymentSummary","refreshStatusSummary","paymentStatusSummary","refreshModeSummary","modes","others","uploaded","file","mode","name","isCp","isCod","res","log"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\nimport { Factory } from 'api';\nimport Snackbar from 'services/snackbar';\nimport { inParallelWithLimit } from 'utils/parallel';\nimport Loader from 'services/loader';\n\nexport function useInfinitePayments(type = 'all', filters = {}, sorts = {}) {\n  const [items, setItems] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [page, setPage] = useState(0);\n  const [hasMore, setHasMore] = useState(true);\n  const [isEmptyProducts, setIsEmptyProducts] = useState(false);\n  const loadMore = async ({ stopIndex = 10 } = {}) => {\n    if (loading) {\n      return;\n    }\n    const newPage = Math.floor(stopIndex / 10);\n    if (newPage <= page) {\n      return;\n    }\n    if (!hasMore) {\n      return;\n    }\n    try {\n      setLoading(true);\n      const data = await Factory.getSettlements(type, page, filters, sorts);\n      setItems([...items || [], ...data]);\n      if (page === 0 && data?.length === 0) {\n        setIsEmptyProducts(true);\n      }\n      if (data.length === 0) {\n        setHasMore(false);\n      }\n      setPage(page + 1);\n    } catch (e) {\n      console.error(e);\n      Snackbar.show('Error Occurred', 'error');\n    } finally {\n      Loader.hide();\n      setLoading(false);\n    }\n  };\n\n  const refresh = () => {\n    setPage(0);\n    setHasMore(true);\n    setItems([]);\n    setTimeout(loadMore, 500);\n  };\n\n  useEffect(() => {\n    setPage(0);\n    refresh();\n  }, [type, JSON.stringify(filters), JSON.stringify(sorts)]);\n\n  return [items, loadMore, hasMore, loading, refresh, isEmptyProducts];\n}\n\nexport function usePaymentStats(summaryFilters, statusFilters, modeWideFilters) {\n  const [summary, setSummary] = useState(null);\n  const [statusSummary, setStatusSummary] = useState(null);\n  const [modeWiseSummary, setModeWiseSummary] = useState(null);\n\n  const refreshSummary = async () => {\n    try {\n      Loader.show();\n      setSummary(await Factory.paymentSummary(summaryFilters));\n    } catch (e) {\n      console.error(e);\n      Snackbar.show('Errror Occured', 'error');\n    } finally {\n      Loader.hide();\n    }\n  };\n\n  const refreshStatusSummary = async () => {\n    try {\n      Loader.show();\n      setStatusSummary(await Factory.paymentStatusSummary(statusFilters));\n    } catch (e) {\n      console.error(e);\n      Snackbar.show('Errror Occured', 'error');\n    } finally {\n      Loader.hide();\n    }\n  };\n\n  const refreshModeSummary = async () => {\n    try {\n      Loader.show();\n      const { modes = [], ...others } = modeWideFilters || {};\n      if (modes) {\n        const uploaded = await inParallelWithLimit(modes, 5, async file => {\n          const mode = file['payments.paymentMode'];\n          let name = file['payments.vendor'];\n          const isCp = mode === 'custompayment';\n          if (isCp) {\n            name = file['payments.customPaymentDetails.mode'];\n          }\n          const isCod = mode === 'cod';\n          if (isCod) {\n            name = 'cash';\n          }\n          try {\n            const res = await Factory.paymentSummary({ ...file, ...others });\n            return { ...res, name };\n          } catch (e) {\n            console.log(e);\n          }\n        });\n        setModeWiseSummary(uploaded);\n        return;\n      }\n      setModeWiseSummary([await Factory.paymentSummary(modeWideFilters)]);\n    } catch (e) {\n      console.error(e);\n      Snackbar.show('Errror Occured', 'error');\n    } finally {\n      Loader.hide();\n    }\n  };\n\n  useEffect(() => {\n    if (!statusFilters) {\n      return;\n    }\n    console.log('status fire once', statusFilters);\n    refreshStatusSummary();\n  }, [JSON.stringify(statusFilters)]);\n\n  useEffect(() => {\n    if (!modeWideFilters) {\n      return;\n    }\n    refreshModeSummary();\n    console.log('mode fire once', modeWideFilters);\n  }, [JSON.stringify(modeWideFilters)]);\n\n  useEffect(() => {\n    if (!summaryFilters) {\n      return;\n    }\n    refreshSummary();\n    console.log('summary fire once', summaryFilters);\n  }, [JSON.stringify(summaryFilters)]);\n\n  return [summary, statusSummary, modeWiseSummary];\n}\n"]},"metadata":{},"sourceType":"module"}