{"ast":null,"code":"import { __assign, __read } from \"tslib\";\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\nimport { getCurrentHub } from '@sentry/core';\nimport { Severity } from '@sentry/types';\nimport { addExceptionMechanism, addInstrumentationHandler, getLocationHref, isDebugBuild, isErrorEvent, isPrimitive, isString, logger } from '@sentry/utils';\nimport { eventFromUnknownInput } from '../eventbuilder';\nimport { shouldIgnoreOnError } from '../helpers';\n/** Global handlers */\n\nvar GlobalHandlers =\n/** @class */\nfunction () {\n  /** JSDoc */\n  function GlobalHandlers(options) {\n    /**\n     * @inheritDoc\n     */\n    this.name = GlobalHandlers.id;\n    /**\n     * Stores references functions to installing handlers. Will set to undefined\n     * after they have been run so that they are not used twice.\n     */\n\n    this._installFunc = {\n      onerror: _installGlobalOnErrorHandler,\n      onunhandledrejection: _installGlobalOnUnhandledRejectionHandler\n    };\n    this._options = __assign({\n      onerror: true,\n      onunhandledrejection: true\n    }, options);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  GlobalHandlers.prototype.setupOnce = function () {\n    Error.stackTraceLimit = 50;\n    var options = this._options; // We can disable guard-for-in as we construct the options object above + do checks against\n    // `this._installFunc` for the property.\n    // eslint-disable-next-line guard-for-in\n\n    for (var key in options) {\n      var installFunc = this._installFunc[key];\n\n      if (installFunc && options[key]) {\n        globalHandlerLog(key);\n        installFunc();\n        this._installFunc[key] = undefined;\n      }\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  GlobalHandlers.id = 'GlobalHandlers';\n  return GlobalHandlers;\n}();\n\nexport { GlobalHandlers };\n/** JSDoc */\n\nfunction _installGlobalOnErrorHandler() {\n  addInstrumentationHandler('error', // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function (data) {\n    var _a = __read(getHubAndAttachStacktrace(), 2),\n        hub = _a[0],\n        attachStacktrace = _a[1];\n\n    if (!hub.getIntegration(GlobalHandlers)) {\n      return;\n    }\n\n    var msg = data.msg,\n        url = data.url,\n        line = data.line,\n        column = data.column,\n        error = data.error;\n\n    if (shouldIgnoreOnError() || error && error.__sentry_own_request__) {\n      return;\n    }\n\n    var event = error === undefined && isString(msg) ? _eventFromIncompleteOnError(msg, url, line, column) : _enhanceEventWithInitialFrame(eventFromUnknownInput(error || msg, undefined, {\n      attachStacktrace: attachStacktrace,\n      isRejection: false\n    }), url, line, column);\n    event.level = Severity.Error;\n    addMechanismAndCapture(hub, error, event, 'onerror');\n  });\n}\n/** JSDoc */\n\n\nfunction _installGlobalOnUnhandledRejectionHandler() {\n  addInstrumentationHandler('unhandledrejection', // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function (e) {\n    var _a = __read(getHubAndAttachStacktrace(), 2),\n        hub = _a[0],\n        attachStacktrace = _a[1];\n\n    if (!hub.getIntegration(GlobalHandlers)) {\n      return;\n    }\n\n    var error = e; // dig the object of the rejection out of known event types\n\n    try {\n      // PromiseRejectionEvents store the object of the rejection under 'reason'\n      // see https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent\n      if ('reason' in e) {\n        error = e.reason;\n      } // something, somewhere, (likely a browser extension) effectively casts PromiseRejectionEvents\n      // to CustomEvents, moving the `promise` and `reason` attributes of the PRE into\n      // the CustomEvent's `detail` attribute, since they're not part of CustomEvent's spec\n      // see https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent and\n      // https://github.com/getsentry/sentry-javascript/issues/2380\n      else if ('detail' in e && 'reason' in e.detail) {\n        error = e.detail.reason;\n      }\n    } catch (_oO) {// no-empty\n    }\n\n    if (shouldIgnoreOnError() || error && error.__sentry_own_request__) {\n      return true;\n    }\n\n    var event = isPrimitive(error) ? _eventFromRejectionWithPrimitive(error) : eventFromUnknownInput(error, undefined, {\n      attachStacktrace: attachStacktrace,\n      isRejection: true\n    });\n    event.level = Severity.Error;\n    addMechanismAndCapture(hub, error, event, 'onunhandledrejection');\n    return;\n  });\n}\n/**\n * Create an event from a promise rejection where the `reason` is a primitive.\n *\n * @param reason: The `reason` property of the promise rejection\n * @returns An Event object with an appropriate `exception` value\n */\n\n\nfunction _eventFromRejectionWithPrimitive(reason) {\n  return {\n    exception: {\n      values: [{\n        type: 'UnhandledRejection',\n        // String() is needed because the Primitive type includes symbols (which can't be automatically stringified)\n        value: \"Non-Error promise rejection captured with value: \" + String(reason)\n      }]\n    }\n  };\n}\n/**\n * This function creates a stack from an old, error-less onerror handler.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nfunction _eventFromIncompleteOnError(msg, url, line, column) {\n  var ERROR_TYPES_RE = /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i; // If 'message' is ErrorEvent, get real message from inside\n\n  var message = isErrorEvent(msg) ? msg.message : msg;\n  var name = 'Error';\n  var groups = message.match(ERROR_TYPES_RE);\n\n  if (groups) {\n    name = groups[1];\n    message = groups[2];\n  }\n\n  var event = {\n    exception: {\n      values: [{\n        type: name,\n        value: message\n      }]\n    }\n  };\n  return _enhanceEventWithInitialFrame(event, url, line, column);\n}\n/** JSDoc */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nfunction _enhanceEventWithInitialFrame(event, url, line, column) {\n  // event.exception\n  var e = event.exception = event.exception || {}; // event.exception.values\n\n  var ev = e.values = e.values || []; // event.exception.values[0]\n\n  var ev0 = ev[0] = ev[0] || {}; // event.exception.values[0].stacktrace\n\n  var ev0s = ev0.stacktrace = ev0.stacktrace || {}; // event.exception.values[0].stacktrace.frames\n\n  var ev0sf = ev0s.frames = ev0s.frames || [];\n  var colno = isNaN(parseInt(column, 10)) ? undefined : column;\n  var lineno = isNaN(parseInt(line, 10)) ? undefined : line;\n  var filename = isString(url) && url.length > 0 ? url : getLocationHref(); // event.exception.values[0].stacktrace.frames\n\n  if (ev0sf.length === 0) {\n    ev0sf.push({\n      colno: colno,\n      filename: filename,\n      function: '?',\n      in_app: true,\n      lineno: lineno\n    });\n  }\n\n  return event;\n}\n\nfunction globalHandlerLog(type) {\n  if (isDebugBuild()) {\n    logger.log(\"Global Handler attached: \" + type);\n  }\n}\n\nfunction addMechanismAndCapture(hub, error, event, type) {\n  addExceptionMechanism(event, {\n    handled: false,\n    type: type\n  });\n  hub.captureEvent(event, {\n    originalException: error\n  });\n}\n\nfunction getHubAndAttachStacktrace() {\n  var hub = getCurrentHub();\n  var client = hub.getClient();\n  var attachStacktrace = client && client.getOptions().attachStacktrace;\n  return [hub, attachStacktrace];\n}","map":{"version":3,"sources":["../../src/integrations/globalhandlers.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-member-access */\nimport { getCurrentHub } from '@sentry/core';\nimport { Event, EventHint, Hub, Integration, Primitive, Severity } from '@sentry/types';\nimport {\n  addExceptionMechanism,\n  addInstrumentationHandler,\n  getLocationHref,\n  isDebugBuild,\n  isErrorEvent,\n  isPrimitive,\n  isString,\n  logger,\n} from '@sentry/utils';\n\nimport { eventFromUnknownInput } from '../eventbuilder';\nimport { shouldIgnoreOnError } from '../helpers';\n\ntype GlobalHandlersIntegrationsOptionKeys = 'onerror' | 'onunhandledrejection';\n\n/** JSDoc */\ntype GlobalHandlersIntegrations = Record<GlobalHandlersIntegrationsOptionKeys, boolean>;\n\n/** Global handlers */\nexport class GlobalHandlers implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'GlobalHandlers';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = GlobalHandlers.id;\n\n  /** JSDoc */\n  private readonly _options: GlobalHandlersIntegrations;\n\n  /**\n   * Stores references functions to installing handlers. Will set to undefined\n   * after they have been run so that they are not used twice.\n   */\n  private _installFunc: Record<GlobalHandlersIntegrationsOptionKeys, (() => void) | undefined> = {\n    onerror: _installGlobalOnErrorHandler,\n    onunhandledrejection: _installGlobalOnUnhandledRejectionHandler,\n  };\n\n  /** JSDoc */\n  public constructor(options?: GlobalHandlersIntegrations) {\n    this._options = {\n      onerror: true,\n      onunhandledrejection: true,\n      ...options,\n    };\n  }\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    Error.stackTraceLimit = 50;\n    const options = this._options;\n\n    // We can disable guard-for-in as we construct the options object above + do checks against\n    // `this._installFunc` for the property.\n    // eslint-disable-next-line guard-for-in\n    for (const key in options) {\n      const installFunc = this._installFunc[key as GlobalHandlersIntegrationsOptionKeys];\n      if (installFunc && options[key as GlobalHandlersIntegrationsOptionKeys]) {\n        globalHandlerLog(key);\n        installFunc();\n        this._installFunc[key as GlobalHandlersIntegrationsOptionKeys] = undefined;\n      }\n    }\n  }\n}\n\n/** JSDoc */\nfunction _installGlobalOnErrorHandler(): void {\n  addInstrumentationHandler(\n    'error',\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (data: { msg: any; url: any; line: any; column: any; error: any }) => {\n      const [hub, attachStacktrace] = getHubAndAttachStacktrace();\n      if (!hub.getIntegration(GlobalHandlers)) {\n        return;\n      }\n      const { msg, url, line, column, error } = data;\n      if (shouldIgnoreOnError() || (error && error.__sentry_own_request__)) {\n        return;\n      }\n\n      const event =\n        error === undefined && isString(msg)\n          ? _eventFromIncompleteOnError(msg, url, line, column)\n          : _enhanceEventWithInitialFrame(\n              eventFromUnknownInput(error || msg, undefined, {\n                attachStacktrace,\n                isRejection: false,\n              }),\n              url,\n              line,\n              column,\n            );\n\n      event.level = Severity.Error;\n\n      addMechanismAndCapture(hub, error, event, 'onerror');\n    },\n  );\n}\n\n/** JSDoc */\nfunction _installGlobalOnUnhandledRejectionHandler(): void {\n  addInstrumentationHandler(\n    'unhandledrejection',\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (e: any) => {\n      const [hub, attachStacktrace] = getHubAndAttachStacktrace();\n      if (!hub.getIntegration(GlobalHandlers)) {\n        return;\n      }\n      let error = e;\n\n      // dig the object of the rejection out of known event types\n      try {\n        // PromiseRejectionEvents store the object of the rejection under 'reason'\n        // see https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent\n        if ('reason' in e) {\n          error = e.reason;\n        }\n        // something, somewhere, (likely a browser extension) effectively casts PromiseRejectionEvents\n        // to CustomEvents, moving the `promise` and `reason` attributes of the PRE into\n        // the CustomEvent's `detail` attribute, since they're not part of CustomEvent's spec\n        // see https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent and\n        // https://github.com/getsentry/sentry-javascript/issues/2380\n        else if ('detail' in e && 'reason' in e.detail) {\n          error = e.detail.reason;\n        }\n      } catch (_oO) {\n        // no-empty\n      }\n\n      if (shouldIgnoreOnError() || (error && error.__sentry_own_request__)) {\n        return true;\n      }\n\n      const event = isPrimitive(error)\n        ? _eventFromRejectionWithPrimitive(error)\n        : eventFromUnknownInput(error, undefined, {\n            attachStacktrace,\n            isRejection: true,\n          });\n\n      event.level = Severity.Error;\n\n      addMechanismAndCapture(hub, error, event, 'onunhandledrejection');\n      return;\n    },\n  );\n}\n\n/**\n * Create an event from a promise rejection where the `reason` is a primitive.\n *\n * @param reason: The `reason` property of the promise rejection\n * @returns An Event object with an appropriate `exception` value\n */\nfunction _eventFromRejectionWithPrimitive(reason: Primitive): Event {\n  return {\n    exception: {\n      values: [\n        {\n          type: 'UnhandledRejection',\n          // String() is needed because the Primitive type includes symbols (which can't be automatically stringified)\n          value: `Non-Error promise rejection captured with value: ${String(reason)}`,\n        },\n      ],\n    },\n  };\n}\n\n/**\n * This function creates a stack from an old, error-less onerror handler.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _eventFromIncompleteOnError(msg: any, url: any, line: any, column: any): Event {\n  const ERROR_TYPES_RE =\n    /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i;\n\n  // If 'message' is ErrorEvent, get real message from inside\n  let message = isErrorEvent(msg) ? msg.message : msg;\n  let name = 'Error';\n\n  const groups = message.match(ERROR_TYPES_RE);\n  if (groups) {\n    name = groups[1];\n    message = groups[2];\n  }\n\n  const event = {\n    exception: {\n      values: [\n        {\n          type: name,\n          value: message,\n        },\n      ],\n    },\n  };\n\n  return _enhanceEventWithInitialFrame(event, url, line, column);\n}\n\n/** JSDoc */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _enhanceEventWithInitialFrame(event: Event, url: any, line: any, column: any): Event {\n  // event.exception\n  const e = (event.exception = event.exception || {});\n  // event.exception.values\n  const ev = (e.values = e.values || []);\n  // event.exception.values[0]\n  const ev0 = (ev[0] = ev[0] || {});\n  // event.exception.values[0].stacktrace\n  const ev0s = (ev0.stacktrace = ev0.stacktrace || {});\n  // event.exception.values[0].stacktrace.frames\n  const ev0sf = (ev0s.frames = ev0s.frames || []);\n\n  const colno = isNaN(parseInt(column, 10)) ? undefined : column;\n  const lineno = isNaN(parseInt(line, 10)) ? undefined : line;\n  const filename = isString(url) && url.length > 0 ? url : getLocationHref();\n\n  // event.exception.values[0].stacktrace.frames\n  if (ev0sf.length === 0) {\n    ev0sf.push({\n      colno,\n      filename,\n      function: '?',\n      in_app: true,\n      lineno,\n    });\n  }\n\n  return event;\n}\n\nfunction globalHandlerLog(type: string): void {\n  if (isDebugBuild()) {\n    logger.log(`Global Handler attached: ${type}`);\n  }\n}\n\nfunction addMechanismAndCapture(hub: Hub, error: EventHint['originalException'], event: Event, type: string): void {\n  addExceptionMechanism(event, {\n    handled: false,\n    type,\n  });\n  hub.captureEvent(event, {\n    originalException: error,\n  });\n}\n\nfunction getHubAndAttachStacktrace(): [Hub, boolean | undefined] {\n  const hub = getCurrentHub();\n  const client = hub.getClient();\n  const attachStacktrace = client && client.getOptions().attachStacktrace;\n  return [hub, attachStacktrace];\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}