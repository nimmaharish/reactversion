{"ast":null,"code":"import { __assign } from \"tslib\";\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\n/* eslint-disable max-lines */\n\nimport { getCurrentHub } from '@sentry/core';\nimport { Severity } from '@sentry/types';\nimport { addInstrumentationHandler, getEventDescription, getGlobalObject, htmlTreeAsString, parseUrl, safeJoin, severityFromString } from '@sentry/utils';\n/**\n * Default Breadcrumbs instrumentations\n * TODO: Deprecated - with v6, this will be renamed to `Instrument`\n */\n\nvar Breadcrumbs =\n/** @class */\nfunction () {\n  /**\n   * @inheritDoc\n   */\n  function Breadcrumbs(options) {\n    /**\n     * @inheritDoc\n     */\n    this.name = Breadcrumbs.id;\n    this._options = __assign({\n      console: true,\n      dom: true,\n      fetch: true,\n      history: true,\n      sentry: true,\n      xhr: true\n    }, options);\n  }\n  /**\n   * Create a breadcrumb of `sentry` from the events themselves\n   */\n\n\n  Breadcrumbs.prototype.addSentryBreadcrumb = function (event) {\n    if (!this._options.sentry) {\n      return;\n    }\n\n    getCurrentHub().addBreadcrumb({\n      category: \"sentry.\" + (event.type === 'transaction' ? 'transaction' : 'event'),\n      event_id: event.event_id,\n      level: event.level,\n      message: getEventDescription(event)\n    }, {\n      event: event\n    });\n  };\n  /**\n   * Instrument browser built-ins w/ breadcrumb capturing\n   *  - Console API\n   *  - DOM API (click/typing)\n   *  - XMLHttpRequest API\n   *  - Fetch API\n   *  - History API\n   */\n\n\n  Breadcrumbs.prototype.setupOnce = function () {\n    if (this._options.console) {\n      addInstrumentationHandler('console', _consoleBreadcrumb);\n    }\n\n    if (this._options.dom) {\n      addInstrumentationHandler('dom', _domBreadcrumb(this._options.dom));\n    }\n\n    if (this._options.xhr) {\n      addInstrumentationHandler('xhr', _xhrBreadcrumb);\n    }\n\n    if (this._options.fetch) {\n      addInstrumentationHandler('fetch', _fetchBreadcrumb);\n    }\n\n    if (this._options.history) {\n      addInstrumentationHandler('history', _historyBreadcrumb);\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Breadcrumbs.id = 'Breadcrumbs';\n  return Breadcrumbs;\n}();\n\nexport { Breadcrumbs };\n/**\n * A HOC that creaes a function that creates breadcrumbs from DOM API calls.\n * This is a HOC so that we get access to dom options in the closure.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nfunction _domBreadcrumb(dom) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function _innerDomBreadcrumb(handlerData) {\n    var target;\n    var keyAttrs = typeof dom === 'object' ? dom.serializeAttribute : undefined;\n\n    if (typeof keyAttrs === 'string') {\n      keyAttrs = [keyAttrs];\n    } // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n\n\n    try {\n      target = handlerData.event.target ? htmlTreeAsString(handlerData.event.target, keyAttrs) : htmlTreeAsString(handlerData.event, keyAttrs);\n    } catch (e) {\n      target = '<unknown>';\n    }\n\n    if (target.length === 0) {\n      return;\n    }\n\n    getCurrentHub().addBreadcrumb({\n      category: \"ui.\" + handlerData.name,\n      message: target\n    }, {\n      event: handlerData.event,\n      name: handlerData.name,\n      global: handlerData.global\n    });\n  }\n\n  return _innerDomBreadcrumb;\n}\n/**\n * Creates breadcrumbs from console API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nfunction _consoleBreadcrumb(handlerData) {\n  var breadcrumb = {\n    category: 'console',\n    data: {\n      arguments: handlerData.args,\n      logger: 'console'\n    },\n    level: severityFromString(handlerData.level),\n    message: safeJoin(handlerData.args, ' ')\n  };\n\n  if (handlerData.level === 'assert') {\n    if (handlerData.args[0] === false) {\n      breadcrumb.message = \"Assertion failed: \" + (safeJoin(handlerData.args.slice(1), ' ') || 'console.assert');\n      breadcrumb.data.arguments = handlerData.args.slice(1);\n    } else {\n      // Don't capture a breadcrumb for passed assertions\n      return;\n    }\n  }\n\n  getCurrentHub().addBreadcrumb(breadcrumb, {\n    input: handlerData.args,\n    level: handlerData.level\n  });\n}\n/**\n * Creates breadcrumbs from XHR API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nfunction _xhrBreadcrumb(handlerData) {\n  if (handlerData.endTimestamp) {\n    // We only capture complete, non-sentry requests\n    if (handlerData.xhr.__sentry_own_request__) {\n      return;\n    }\n\n    var _a = handlerData.xhr.__sentry_xhr__ || {},\n        method = _a.method,\n        url = _a.url,\n        status_code = _a.status_code,\n        body = _a.body;\n\n    getCurrentHub().addBreadcrumb({\n      category: 'xhr',\n      data: {\n        method: method,\n        url: url,\n        status_code: status_code\n      },\n      type: 'http'\n    }, {\n      xhr: handlerData.xhr,\n      input: body\n    });\n    return;\n  }\n}\n/**\n * Creates breadcrumbs from fetch API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nfunction _fetchBreadcrumb(handlerData) {\n  // We only capture complete fetch requests\n  if (!handlerData.endTimestamp) {\n    return;\n  }\n\n  if (handlerData.fetchData.url.match(/sentry_key/) && handlerData.fetchData.method === 'POST') {\n    // We will not create breadcrumbs for fetch requests that contain `sentry_key` (internal sentry requests)\n    return;\n  }\n\n  if (handlerData.error) {\n    getCurrentHub().addBreadcrumb({\n      category: 'fetch',\n      data: handlerData.fetchData,\n      level: Severity.Error,\n      type: 'http'\n    }, {\n      data: handlerData.error,\n      input: handlerData.args\n    });\n  } else {\n    getCurrentHub().addBreadcrumb({\n      category: 'fetch',\n      data: __assign(__assign({}, handlerData.fetchData), {\n        status_code: handlerData.response.status\n      }),\n      type: 'http'\n    }, {\n      input: handlerData.args,\n      response: handlerData.response\n    });\n  }\n}\n/**\n * Creates breadcrumbs from history API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nfunction _historyBreadcrumb(handlerData) {\n  var global = getGlobalObject();\n  var from = handlerData.from;\n  var to = handlerData.to;\n  var parsedLoc = parseUrl(global.location.href);\n  var parsedFrom = parseUrl(from);\n  var parsedTo = parseUrl(to); // Initial pushState doesn't provide `from` information\n\n  if (!parsedFrom.path) {\n    parsedFrom = parsedLoc;\n  } // Use only the path component of the URL if the URL matches the current\n  // document (almost all the time when using pushState)\n\n\n  if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host) {\n    to = parsedTo.relative;\n  }\n\n  if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host) {\n    from = parsedFrom.relative;\n  }\n\n  getCurrentHub().addBreadcrumb({\n    category: 'navigation',\n    data: {\n      from: from,\n      to: to\n    }\n  });\n}","map":{"version":3,"sources":["../../src/integrations/breadcrumbs.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable max-lines */\nimport { getCurrentHub } from '@sentry/core';\nimport { Event, Integration, Severity } from '@sentry/types';\nimport {\n  addInstrumentationHandler,\n  getEventDescription,\n  getGlobalObject,\n  htmlTreeAsString,\n  parseUrl,\n  safeJoin,\n  severityFromString,\n} from '@sentry/utils';\n\n/** JSDoc */\ninterface BreadcrumbsOptions {\n  console: boolean;\n  dom: boolean | { serializeAttribute: string | string[] };\n  fetch: boolean;\n  history: boolean;\n  sentry: boolean;\n  xhr: boolean;\n}\n\n/**\n * Default Breadcrumbs instrumentations\n * TODO: Deprecated - with v6, this will be renamed to `Instrument`\n */\nexport class Breadcrumbs implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Breadcrumbs';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Breadcrumbs.id;\n\n  /** JSDoc */\n  private readonly _options: BreadcrumbsOptions;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options?: Partial<BreadcrumbsOptions>) {\n    this._options = {\n      console: true,\n      dom: true,\n      fetch: true,\n      history: true,\n      sentry: true,\n      xhr: true,\n      ...options,\n    };\n  }\n\n  /**\n   * Create a breadcrumb of `sentry` from the events themselves\n   */\n  public addSentryBreadcrumb(event: Event): void {\n    if (!this._options.sentry) {\n      return;\n    }\n    getCurrentHub().addBreadcrumb(\n      {\n        category: `sentry.${event.type === 'transaction' ? 'transaction' : 'event'}`,\n        event_id: event.event_id,\n        level: event.level,\n        message: getEventDescription(event),\n      },\n      {\n        event,\n      },\n    );\n  }\n\n  /**\n   * Instrument browser built-ins w/ breadcrumb capturing\n   *  - Console API\n   *  - DOM API (click/typing)\n   *  - XMLHttpRequest API\n   *  - Fetch API\n   *  - History API\n   */\n  public setupOnce(): void {\n    if (this._options.console) {\n      addInstrumentationHandler('console', _consoleBreadcrumb);\n    }\n    if (this._options.dom) {\n      addInstrumentationHandler('dom', _domBreadcrumb(this._options.dom));\n    }\n    if (this._options.xhr) {\n      addInstrumentationHandler('xhr', _xhrBreadcrumb);\n    }\n    if (this._options.fetch) {\n      addInstrumentationHandler('fetch', _fetchBreadcrumb);\n    }\n    if (this._options.history) {\n      addInstrumentationHandler('history', _historyBreadcrumb);\n    }\n  }\n}\n\n/**\n * A HOC that creaes a function that creates breadcrumbs from DOM API calls.\n * This is a HOC so that we get access to dom options in the closure.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _domBreadcrumb(dom: BreadcrumbsOptions['dom']): (handlerData: { [key: string]: any }) => void {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function _innerDomBreadcrumb(handlerData: { [key: string]: any }): void {\n    let target;\n    let keyAttrs = typeof dom === 'object' ? dom.serializeAttribute : undefined;\n\n    if (typeof keyAttrs === 'string') {\n      keyAttrs = [keyAttrs];\n    }\n\n    // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n    try {\n      target = handlerData.event.target\n        ? htmlTreeAsString(handlerData.event.target as Node, keyAttrs)\n        : htmlTreeAsString(handlerData.event as unknown as Node, keyAttrs);\n    } catch (e) {\n      target = '<unknown>';\n    }\n\n    if (target.length === 0) {\n      return;\n    }\n\n    getCurrentHub().addBreadcrumb(\n      {\n        category: `ui.${handlerData.name}`,\n        message: target,\n      },\n      {\n        event: handlerData.event,\n        name: handlerData.name,\n        global: handlerData.global,\n      },\n    );\n  }\n\n  return _innerDomBreadcrumb;\n}\n\n/**\n * Creates breadcrumbs from console API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _consoleBreadcrumb(handlerData: { [key: string]: any }): void {\n  const breadcrumb = {\n    category: 'console',\n    data: {\n      arguments: handlerData.args,\n      logger: 'console',\n    },\n    level: severityFromString(handlerData.level),\n    message: safeJoin(handlerData.args, ' '),\n  };\n\n  if (handlerData.level === 'assert') {\n    if (handlerData.args[0] === false) {\n      breadcrumb.message = `Assertion failed: ${safeJoin(handlerData.args.slice(1), ' ') || 'console.assert'}`;\n      breadcrumb.data.arguments = handlerData.args.slice(1);\n    } else {\n      // Don't capture a breadcrumb for passed assertions\n      return;\n    }\n  }\n\n  getCurrentHub().addBreadcrumb(breadcrumb, {\n    input: handlerData.args,\n    level: handlerData.level,\n  });\n}\n\n/**\n * Creates breadcrumbs from XHR API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _xhrBreadcrumb(handlerData: { [key: string]: any }): void {\n  if (handlerData.endTimestamp) {\n    // We only capture complete, non-sentry requests\n    if (handlerData.xhr.__sentry_own_request__) {\n      return;\n    }\n\n    const { method, url, status_code, body } = handlerData.xhr.__sentry_xhr__ || {};\n\n    getCurrentHub().addBreadcrumb(\n      {\n        category: 'xhr',\n        data: {\n          method,\n          url,\n          status_code,\n        },\n        type: 'http',\n      },\n      {\n        xhr: handlerData.xhr,\n        input: body,\n      },\n    );\n\n    return;\n  }\n}\n\n/**\n * Creates breadcrumbs from fetch API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _fetchBreadcrumb(handlerData: { [key: string]: any }): void {\n  // We only capture complete fetch requests\n  if (!handlerData.endTimestamp) {\n    return;\n  }\n\n  if (handlerData.fetchData.url.match(/sentry_key/) && handlerData.fetchData.method === 'POST') {\n    // We will not create breadcrumbs for fetch requests that contain `sentry_key` (internal sentry requests)\n    return;\n  }\n\n  if (handlerData.error) {\n    getCurrentHub().addBreadcrumb(\n      {\n        category: 'fetch',\n        data: handlerData.fetchData,\n        level: Severity.Error,\n        type: 'http',\n      },\n      {\n        data: handlerData.error,\n        input: handlerData.args,\n      },\n    );\n  } else {\n    getCurrentHub().addBreadcrumb(\n      {\n        category: 'fetch',\n        data: {\n          ...handlerData.fetchData,\n          status_code: handlerData.response.status,\n        },\n        type: 'http',\n      },\n      {\n        input: handlerData.args,\n        response: handlerData.response,\n      },\n    );\n  }\n}\n\n/**\n * Creates breadcrumbs from history API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _historyBreadcrumb(handlerData: { [key: string]: any }): void {\n  const global = getGlobalObject<Window>();\n  let from = handlerData.from;\n  let to = handlerData.to;\n  const parsedLoc = parseUrl(global.location.href);\n  let parsedFrom = parseUrl(from);\n  const parsedTo = parseUrl(to);\n\n  // Initial pushState doesn't provide `from` information\n  if (!parsedFrom.path) {\n    parsedFrom = parsedLoc;\n  }\n\n  // Use only the path component of the URL if the URL matches the current\n  // document (almost all the time when using pushState)\n  if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host) {\n    to = parsedTo.relative;\n  }\n  if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host) {\n    from = parsedFrom.relative;\n  }\n\n  getCurrentHub().addBreadcrumb({\n    category: 'navigation',\n    data: {\n      from,\n      to,\n    },\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}