{"ast":null,"code":"var _serviceCreators;\n\nimport ApmServer from './apm-server';\nimport ConfigService from './config-service';\nimport LoggingService from './logging-service';\nimport { CONFIG_CHANGE, CONFIG_SERVICE, LOGGING_SERVICE, APM_SERVER } from './constants';\nimport { __DEV__ } from '../state';\nvar serviceCreators = (_serviceCreators = {}, _serviceCreators[CONFIG_SERVICE] = function () {\n  return new ConfigService();\n}, _serviceCreators[LOGGING_SERVICE] = function () {\n  return new LoggingService({\n    prefix: '[Elastic APM] '\n  });\n}, _serviceCreators[APM_SERVER] = function (factory) {\n  var _factory$getService = factory.getService([CONFIG_SERVICE, LOGGING_SERVICE]),\n      configService = _factory$getService[0],\n      loggingService = _factory$getService[1];\n\n  return new ApmServer(configService, loggingService);\n}, _serviceCreators);\n\nvar ServiceFactory = function () {\n  function ServiceFactory() {\n    this.instances = {};\n    this.initialized = false;\n  }\n\n  var _proto = ServiceFactory.prototype;\n\n  _proto.init = function init() {\n    if (this.initialized) {\n      return;\n    }\n\n    this.initialized = true;\n    var configService = this.getService(CONFIG_SERVICE);\n    configService.init();\n\n    var _this$getService = this.getService([LOGGING_SERVICE, APM_SERVER]),\n        loggingService = _this$getService[0],\n        apmServer = _this$getService[1];\n\n    configService.events.observe(CONFIG_CHANGE, function () {\n      var logLevel = configService.get('logLevel');\n      loggingService.setLevel(logLevel);\n    });\n    apmServer.init();\n  };\n\n  _proto.getService = function getService(name) {\n    var _this = this;\n\n    if (typeof name === 'string') {\n      if (!this.instances[name]) {\n        if (typeof serviceCreators[name] === 'function') {\n          this.instances[name] = serviceCreators[name](this);\n        } else if (__DEV__) {\n          console.log('Cannot get service, No creator for: ' + name);\n        }\n      }\n\n      return this.instances[name];\n    } else if (Array.isArray(name)) {\n      return name.map(function (n) {\n        return _this.getService(n);\n      });\n    }\n  };\n\n  return ServiceFactory;\n}();\n\nexport { serviceCreators, ServiceFactory };","map":{"version":3,"sources":["/home/harish/windo/phoenix/node_modules/@elastic/apm-rum-core/dist/es/common/service-factory.js"],"names":["_serviceCreators","ApmServer","ConfigService","LoggingService","CONFIG_CHANGE","CONFIG_SERVICE","LOGGING_SERVICE","APM_SERVER","__DEV__","serviceCreators","prefix","factory","_factory$getService","getService","configService","loggingService","ServiceFactory","instances","initialized","_proto","prototype","init","_this$getService","apmServer","events","observe","logLevel","get","setLevel","name","_this","console","log","Array","isArray","map","n"],"mappings":"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","sourcesContent":["var _serviceCreators;\n\nimport ApmServer from './apm-server';\nimport ConfigService from './config-service';\nimport LoggingService from './logging-service';\nimport { CONFIG_CHANGE, CONFIG_SERVICE, LOGGING_SERVICE, APM_SERVER } from './constants';\nimport { __DEV__ } from '../state';\nvar serviceCreators = (_serviceCreators = {}, _serviceCreators[CONFIG_SERVICE] = function () {\n  return new ConfigService();\n}, _serviceCreators[LOGGING_SERVICE] = function () {\n  return new LoggingService({\n    prefix: '[Elastic APM] '\n  });\n}, _serviceCreators[APM_SERVER] = function (factory) {\n  var _factory$getService = factory.getService([CONFIG_SERVICE, LOGGING_SERVICE]),\n      configService = _factory$getService[0],\n      loggingService = _factory$getService[1];\n\n  return new ApmServer(configService, loggingService);\n}, _serviceCreators);\n\nvar ServiceFactory = function () {\n  function ServiceFactory() {\n    this.instances = {};\n    this.initialized = false;\n  }\n\n  var _proto = ServiceFactory.prototype;\n\n  _proto.init = function init() {\n    if (this.initialized) {\n      return;\n    }\n\n    this.initialized = true;\n    var configService = this.getService(CONFIG_SERVICE);\n    configService.init();\n\n    var _this$getService = this.getService([LOGGING_SERVICE, APM_SERVER]),\n        loggingService = _this$getService[0],\n        apmServer = _this$getService[1];\n\n    configService.events.observe(CONFIG_CHANGE, function () {\n      var logLevel = configService.get('logLevel');\n      loggingService.setLevel(logLevel);\n    });\n    apmServer.init();\n  };\n\n  _proto.getService = function getService(name) {\n    var _this = this;\n\n    if (typeof name === 'string') {\n      if (!this.instances[name]) {\n        if (typeof serviceCreators[name] === 'function') {\n          this.instances[name] = serviceCreators[name](this);\n        } else if (__DEV__) {\n          console.log('Cannot get service, No creator for: ' + name);\n        }\n      }\n\n      return this.instances[name];\n    } else if (Array.isArray(name)) {\n      return name.map(function (n) {\n        return _this.getService(n);\n      });\n    }\n  };\n\n  return ServiceFactory;\n}();\n\nexport { serviceCreators, ServiceFactory };"]},"metadata":{},"sourceType":"module"}