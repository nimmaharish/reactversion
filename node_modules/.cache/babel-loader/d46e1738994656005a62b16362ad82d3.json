{"ast":null,"code":"import { __assign, __read, __spread } from \"tslib\";\nimport { dsnToString, normalize } from '@sentry/utils';\nimport { getEnvelopeEndpointWithUrlEncodedAuth, getStoreEndpointWithUrlEncodedAuth } from './api';\n/** Extract sdk info from from the API metadata */\n\nfunction getSdkMetadataForEnvelopeHeader(api) {\n  if (!api.metadata || !api.metadata.sdk) {\n    return;\n  }\n\n  var _a = api.metadata.sdk,\n      name = _a.name,\n      version = _a.version;\n  return {\n    name: name,\n    version: version\n  };\n}\n/**\n * Apply SdkInfo (name, version, packages, integrations) to the corresponding event key.\n * Merge with existing data if any.\n **/\n\n\nfunction enhanceEventWithSdkInfo(event, sdkInfo) {\n  if (!sdkInfo) {\n    return event;\n  }\n\n  event.sdk = event.sdk || {};\n  event.sdk.name = event.sdk.name || sdkInfo.name;\n  event.sdk.version = event.sdk.version || sdkInfo.version;\n  event.sdk.integrations = __spread(event.sdk.integrations || [], sdkInfo.integrations || []);\n  event.sdk.packages = __spread(event.sdk.packages || [], sdkInfo.packages || []);\n  return event;\n}\n/** Creates a SentryRequest from a Session. */\n\n\nexport function sessionToSentryRequest(session, api) {\n  var sdkInfo = getSdkMetadataForEnvelopeHeader(api);\n  var envelopeHeaders = JSON.stringify(__assign(__assign({\n    sent_at: new Date().toISOString()\n  }, sdkInfo && {\n    sdk: sdkInfo\n  }), !!api.tunnel && {\n    dsn: dsnToString(api.dsn)\n  })); // I know this is hacky but we don't want to add `session` to request type since it's never rate limited\n\n  var type = 'aggregates' in session ? 'sessions' : 'session';\n  var itemHeaders = JSON.stringify({\n    type: type\n  });\n  return {\n    body: envelopeHeaders + \"\\n\" + itemHeaders + \"\\n\" + JSON.stringify(session),\n    type: type,\n    url: getEnvelopeEndpointWithUrlEncodedAuth(api.dsn, api.tunnel)\n  };\n}\n/** Creates a SentryRequest from an event. */\n\nexport function eventToSentryRequest(event, api) {\n  var sdkInfo = getSdkMetadataForEnvelopeHeader(api);\n  var eventType = event.type || 'event';\n  var useEnvelope = eventType === 'transaction' || !!api.tunnel;\n  var transactionSampling = (event.sdkProcessingMetadata || {}).transactionSampling;\n\n  var _a = transactionSampling || {},\n      samplingMethod = _a.method,\n      sampleRate = _a.rate; // TODO: Below is a temporary hack in order to debug a serialization error - see\n  // https://github.com/getsentry/sentry-javascript/issues/2809 and\n  // https://github.com/getsentry/sentry-javascript/pull/4425. TL;DR: even though we normalize all events (which should\n  // prevent this), something is causing `JSON.stringify` to throw a circular reference error.\n  //\n  // When it's time to remove it:\n  // 1. Delete everything between here and where the request object `req` is created, EXCEPT the line deleting\n  //    `sdkProcessingMetadata`\n  // 2. Restore the original version of the request body, which is commented out\n  // 3. Search for `skippedNormalization` and pull out the companion hack in the browser playwright tests\n\n\n  enhanceEventWithSdkInfo(event, api.metadata.sdk);\n  event.tags = event.tags || {};\n  event.extra = event.extra || {}; // In theory, all events should be marked as having gone through normalization and so\n  // we should never set this tag\n\n  if (!(event.sdkProcessingMetadata && event.sdkProcessingMetadata.baseClientNormalized)) {\n    event.tags.skippedNormalization = true;\n  } // prevent this data from being sent to sentry\n  // TODO: This is NOT part of the hack - DO NOT DELETE\n\n\n  delete event.sdkProcessingMetadata;\n  var body;\n\n  try {\n    // 99.9% of events should get through just fine - no change in behavior for them\n    body = JSON.stringify(event);\n  } catch (err) {\n    // Record data about the error without replacing original event data, then force renormalization\n    event.tags.JSONStringifyError = true;\n    event.extra.JSONStringifyError = err;\n\n    try {\n      body = JSON.stringify(normalize(event));\n    } catch (newErr) {\n      // At this point even renormalization hasn't worked, meaning something about the event data has gone very wrong.\n      // Time to cut our losses and record only the new error. With luck, even in the problematic cases we're trying to\n      // debug with this hack, we won't ever land here.\n      var innerErr = newErr;\n      body = JSON.stringify({\n        message: 'JSON.stringify error after renormalization',\n        // setting `extra: { innerErr }` here for some reason results in an empty object, so unpack manually\n        extra: {\n          message: innerErr.message,\n          stack: innerErr.stack\n        }\n      });\n    }\n  }\n\n  var req = {\n    // this is the relevant line of code before the hack was added, to make it easy to undo said hack once we've solved\n    // the mystery\n    // body: JSON.stringify(sdkInfo ? enhanceEventWithSdkInfo(event, api.metadata.sdk) : event),\n    body: body,\n    type: eventType,\n    url: useEnvelope ? getEnvelopeEndpointWithUrlEncodedAuth(api.dsn, api.tunnel) : getStoreEndpointWithUrlEncodedAuth(api.dsn)\n  }; // https://develop.sentry.dev/sdk/envelopes/\n  // Since we don't need to manipulate envelopes nor store them, there is no\n  // exported concept of an Envelope with operations including serialization and\n  // deserialization. Instead, we only implement a minimal subset of the spec to\n  // serialize events inline here.\n\n  if (useEnvelope) {\n    var envelopeHeaders = JSON.stringify(__assign(__assign({\n      event_id: event.event_id,\n      sent_at: new Date().toISOString()\n    }, sdkInfo && {\n      sdk: sdkInfo\n    }), !!api.tunnel && {\n      dsn: dsnToString(api.dsn)\n    }));\n    var itemHeaders = JSON.stringify({\n      type: eventType,\n      // TODO: Right now, sampleRate may or may not be defined (it won't be in the cases of inheritance and\n      // explicitly-set sampling decisions). Are we good with that?\n      sample_rates: [{\n        id: samplingMethod,\n        rate: sampleRate\n      }]\n    }); // The trailing newline is optional. We intentionally don't send it to avoid\n    // sending unnecessary bytes.\n    //\n    // const envelope = `${envelopeHeaders}\\n${itemHeaders}\\n${req.body}\\n`;\n\n    var envelope = envelopeHeaders + \"\\n\" + itemHeaders + \"\\n\" + req.body;\n    req.body = envelope;\n  }\n\n  return req;\n}","map":{"version":3,"sources":["../src/request.ts"],"names":[],"mappings":"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","sourcesContent":["import { Event, SdkInfo, SentryRequest, SentryRequestType, Session, SessionAggregates } from '@sentry/types';\nimport { dsnToString, normalize } from '@sentry/utils';\n\nimport { APIDetails, getEnvelopeEndpointWithUrlEncodedAuth, getStoreEndpointWithUrlEncodedAuth } from './api';\n\n/** Extract sdk info from from the API metadata */\nfunction getSdkMetadataForEnvelopeHeader(api: APIDetails): SdkInfo | undefined {\n  if (!api.metadata || !api.metadata.sdk) {\n    return;\n  }\n  const { name, version } = api.metadata.sdk;\n  return { name, version };\n}\n\n/**\n * Apply SdkInfo (name, version, packages, integrations) to the corresponding event key.\n * Merge with existing data if any.\n **/\nfunction enhanceEventWithSdkInfo(event: Event, sdkInfo?: SdkInfo): Event {\n  if (!sdkInfo) {\n    return event;\n  }\n  event.sdk = event.sdk || {};\n  event.sdk.name = event.sdk.name || sdkInfo.name;\n  event.sdk.version = event.sdk.version || sdkInfo.version;\n  event.sdk.integrations = [...(event.sdk.integrations || []), ...(sdkInfo.integrations || [])];\n  event.sdk.packages = [...(event.sdk.packages || []), ...(sdkInfo.packages || [])];\n  return event;\n}\n\n/** Creates a SentryRequest from a Session. */\nexport function sessionToSentryRequest(session: Session | SessionAggregates, api: APIDetails): SentryRequest {\n  const sdkInfo = getSdkMetadataForEnvelopeHeader(api);\n  const envelopeHeaders = JSON.stringify({\n    sent_at: new Date().toISOString(),\n    ...(sdkInfo && { sdk: sdkInfo }),\n    ...(!!api.tunnel && { dsn: dsnToString(api.dsn) }),\n  });\n  // I know this is hacky but we don't want to add `session` to request type since it's never rate limited\n  const type: SentryRequestType = 'aggregates' in session ? ('sessions' as SentryRequestType) : 'session';\n  const itemHeaders = JSON.stringify({\n    type,\n  });\n\n  return {\n    body: `${envelopeHeaders}\\n${itemHeaders}\\n${JSON.stringify(session)}`,\n    type,\n    url: getEnvelopeEndpointWithUrlEncodedAuth(api.dsn, api.tunnel),\n  };\n}\n\n/** Creates a SentryRequest from an event. */\nexport function eventToSentryRequest(event: Event, api: APIDetails): SentryRequest {\n  const sdkInfo = getSdkMetadataForEnvelopeHeader(api);\n  const eventType = event.type || 'event';\n  const useEnvelope = eventType === 'transaction' || !!api.tunnel;\n\n  const { transactionSampling } = event.sdkProcessingMetadata || {};\n  const { method: samplingMethod, rate: sampleRate } = transactionSampling || {};\n\n  // TODO: Below is a temporary hack in order to debug a serialization error - see\n  // https://github.com/getsentry/sentry-javascript/issues/2809 and\n  // https://github.com/getsentry/sentry-javascript/pull/4425. TL;DR: even though we normalize all events (which should\n  // prevent this), something is causing `JSON.stringify` to throw a circular reference error.\n  //\n  // When it's time to remove it:\n  // 1. Delete everything between here and where the request object `req` is created, EXCEPT the line deleting\n  //    `sdkProcessingMetadata`\n  // 2. Restore the original version of the request body, which is commented out\n  // 3. Search for `skippedNormalization` and pull out the companion hack in the browser playwright tests\n  enhanceEventWithSdkInfo(event, api.metadata.sdk);\n  event.tags = event.tags || {};\n  event.extra = event.extra || {};\n\n  // In theory, all events should be marked as having gone through normalization and so\n  // we should never set this tag\n  if (!(event.sdkProcessingMetadata && event.sdkProcessingMetadata.baseClientNormalized)) {\n    event.tags.skippedNormalization = true;\n  }\n\n  // prevent this data from being sent to sentry\n  // TODO: This is NOT part of the hack - DO NOT DELETE\n  delete event.sdkProcessingMetadata;\n\n  let body;\n  try {\n    // 99.9% of events should get through just fine - no change in behavior for them\n    body = JSON.stringify(event);\n  } catch (err) {\n    // Record data about the error without replacing original event data, then force renormalization\n    event.tags.JSONStringifyError = true;\n    event.extra.JSONStringifyError = err;\n    try {\n      body = JSON.stringify(normalize(event));\n    } catch (newErr) {\n      // At this point even renormalization hasn't worked, meaning something about the event data has gone very wrong.\n      // Time to cut our losses and record only the new error. With luck, even in the problematic cases we're trying to\n      // debug with this hack, we won't ever land here.\n      const innerErr = newErr as Error;\n      body = JSON.stringify({\n        message: 'JSON.stringify error after renormalization',\n        // setting `extra: { innerErr }` here for some reason results in an empty object, so unpack manually\n        extra: { message: innerErr.message, stack: innerErr.stack },\n      });\n    }\n  }\n\n  const req: SentryRequest = {\n    // this is the relevant line of code before the hack was added, to make it easy to undo said hack once we've solved\n    // the mystery\n    // body: JSON.stringify(sdkInfo ? enhanceEventWithSdkInfo(event, api.metadata.sdk) : event),\n    body,\n    type: eventType,\n    url: useEnvelope\n      ? getEnvelopeEndpointWithUrlEncodedAuth(api.dsn, api.tunnel)\n      : getStoreEndpointWithUrlEncodedAuth(api.dsn),\n  };\n\n  // https://develop.sentry.dev/sdk/envelopes/\n\n  // Since we don't need to manipulate envelopes nor store them, there is no\n  // exported concept of an Envelope with operations including serialization and\n  // deserialization. Instead, we only implement a minimal subset of the spec to\n  // serialize events inline here.\n  if (useEnvelope) {\n    const envelopeHeaders = JSON.stringify({\n      event_id: event.event_id,\n      sent_at: new Date().toISOString(),\n      ...(sdkInfo && { sdk: sdkInfo }),\n      ...(!!api.tunnel && { dsn: dsnToString(api.dsn) }),\n    });\n    const itemHeaders = JSON.stringify({\n      type: eventType,\n\n      // TODO: Right now, sampleRate may or may not be defined (it won't be in the cases of inheritance and\n      // explicitly-set sampling decisions). Are we good with that?\n      sample_rates: [{ id: samplingMethod, rate: sampleRate }],\n\n      // The content-type is assumed to be 'application/json' and not part of\n      // the current spec for transaction items, so we don't bloat the request\n      // body with it.\n      //\n      // content_type: 'application/json',\n      //\n      // The length is optional. It must be the number of bytes in req.Body\n      // encoded as UTF-8. Since the server can figure this out and would\n      // otherwise refuse events that report the length incorrectly, we decided\n      // not to send the length to avoid problems related to reporting the wrong\n      // size and to reduce request body size.\n      //\n      // length: new TextEncoder().encode(req.body).length,\n    });\n    // The trailing newline is optional. We intentionally don't send it to avoid\n    // sending unnecessary bytes.\n    //\n    // const envelope = `${envelopeHeaders}\\n${itemHeaders}\\n${req.body}\\n`;\n    const envelope = `${envelopeHeaders}\\n${itemHeaders}\\n${req.body}`;\n    req.body = envelope;\n  }\n\n  return req;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}