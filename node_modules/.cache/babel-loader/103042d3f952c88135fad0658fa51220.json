{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { Becca } from \"../api\";\nimport Snackbar from \"../services/snackbar\";\nimport Loader from \"../services/loader\";\nexport function useCustomersList(filters) {\n  _s();\n\n  const [customers, setCustomers] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [page, setPage] = useState(0);\n  const [hasMore, setHasMore] = useState(true);\n  const [isAddressFetching, setAddressFetching] = useState(false);\n\n  const getCustomerAddress = async id => {\n    if (isAddressFetching) {\n      return '';\n    }\n\n    setAddressFetching(true);\n    const data = await Becca.getCustomerAddress(id);\n    setAddressFetching(false);\n    return data;\n  };\n\n  const loadMore = async ({\n    stopIndex = 10\n  } = {}) => {\n    if (loading) {\n      return;\n    }\n\n    const newPage = Math.floor(stopIndex / 10);\n\n    if (newPage <= page) {\n      return;\n    }\n\n    if (!hasMore) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n\n      if (page === 0) {\n        Loader.show();\n      }\n\n      const data = await Becca.getCustomerList(page, filters);\n      setCustomers(cus => [...cus, ...data]);\n\n      if (data.length === 0) {\n        setHasMore(false);\n      }\n\n      setPage(page + 1);\n    } catch (e) {\n      console.error(e);\n      Snackbar.show('Error Occurred', 'error');\n    } finally {\n      Loader.hide();\n      setLoading(false);\n    }\n  };\n\n  const refresh = async () => {\n    try {\n      setLoading(true);\n      const data = await Becca.getCustomerList(page, filters);\n      setCustomers(data);\n      setPage(0);\n      setHasMore(true);\n      setLoading(false);\n    } catch (e) {\n      console.error(e);\n      Snackbar.show('Error Occurred', 'error');\n    }\n  };\n\n  useEffect(() => {\n    refresh();\n  }, [JSON.stringify(filters)]);\n  return [customers, loadMore, hasMore, loading, refresh, getCustomerAddress];\n}\n\n_s(useCustomersList, \"06bwT0z59SJRUnHJwgg7cb9bHM0=\");","map":{"version":3,"sources":["/home/harish/windo/phoenix/src/hooks/customers.js"],"names":["useEffect","useState","Becca","Snackbar","Loader","useCustomersList","filters","customers","setCustomers","loading","setLoading","page","setPage","hasMore","setHasMore","isAddressFetching","setAddressFetching","getCustomerAddress","id","data","loadMore","stopIndex","newPage","Math","floor","show","getCustomerList","cus","length","e","console","error","hide","refresh","JSON","stringify"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\nimport { Becca } from 'api';\nimport Snackbar from 'services/snackbar';\nimport Loader from 'services/loader';\n\nexport function useCustomersList(filters) {\n  const [customers, setCustomers] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [page, setPage] = useState(0);\n  const [hasMore, setHasMore] = useState(true);\n  const [isAddressFetching, setAddressFetching] = useState(false);\n\n  const getCustomerAddress = async (id) => {\n    if (isAddressFetching) {\n      return '';\n    }\n    setAddressFetching(true);\n    const data = await Becca.getCustomerAddress(id);\n    setAddressFetching(false);\n    return data;\n  };\n\n  const loadMore = async ({ stopIndex = 10 } = {}) => {\n    if (loading) {\n      return;\n    }\n    const newPage = Math.floor(stopIndex / 10);\n    if (newPage <= page) {\n      return;\n    }\n    if (!hasMore) {\n      return;\n    }\n    try {\n      setLoading(true);\n      if (page === 0) {\n        Loader.show();\n      }\n      const data = await Becca.getCustomerList(page, filters);\n      setCustomers(cus => [...cus, ...data]);\n      if (data.length === 0) {\n        setHasMore(false);\n      }\n      setPage(page + 1);\n    } catch (e) {\n      console.error(e);\n      Snackbar.show('Error Occurred', 'error');\n    } finally {\n      Loader.hide();\n      setLoading(false);\n    }\n  };\n\n  const refresh = async () => {\n    try {\n      setLoading(true);\n      const data = await Becca.getCustomerList(page, filters);\n      setCustomers(data);\n      setPage(0);\n      setHasMore(true);\n      setLoading(false);\n    } catch (e) {\n      console.error(e);\n      Snackbar.show('Error Occurred', 'error');\n    }\n  };\n\n  useEffect(() => {\n    refresh();\n  }, [JSON.stringify(filters)]);\n\n  return [customers, loadMore, hasMore, loading, refresh, getCustomerAddress];\n}\n"]},"metadata":{},"sourceType":"module"}