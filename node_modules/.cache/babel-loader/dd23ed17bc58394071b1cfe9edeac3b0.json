{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useCallback, useEffect, useState } from 'react';\nimport { Piggy } from \"../api\";\nimport Snackbar from \"../services/snackbar\";\nimport Loader from \"../services/loader\";\nexport function useWallet() {\n  _s();\n\n  const [wallet, setWallet] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const refresh = useCallback(async () => {\n    try {\n      if (loading) {\n        return;\n      }\n\n      setLoading(true);\n      setWallet(await Piggy.getWallet());\n    } catch (e) {\n      console.error(e);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  useEffect(() => {\n    refresh();\n  }, [refresh]);\n  return [wallet, refresh, loading];\n}\n\n_s(useWallet, \"iymsP/G+wy5EdErd1GBscbA7atE=\");\n\nexport function useWalletLogs(filters = {}, sorts = {}) {\n  _s2();\n\n  const [logs, setLogs] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [page, setPage] = useState(0);\n  const [hasMore, setHasMore] = useState(true);\n\n  const load = async () => {\n    try {\n      if (loading) {\n        return;\n      }\n\n      setLoading(true);\n\n      if (page === 0) {\n        Loader.show();\n      }\n\n      const data = await Piggy.getWalletLogs(page, filters, sorts);\n      setLogs([...logs, ...data]);\n\n      if (data.length === 0) {\n        setHasMore(false);\n      }\n\n      setPage(page + 1);\n    } catch (e) {\n      console.error(e);\n      Snackbar.show('Error Occurred', 'error');\n    } finally {\n      Loader.hide();\n      setLoading(false);\n    }\n  };\n\n  const loadMore = async ({\n    stopIndex = 10\n  } = {}) => {\n    if (loading) {\n      return;\n    }\n\n    const newPage = Math.floor(stopIndex / 10);\n\n    if (newPage <= page) {\n      return;\n    }\n\n    if (!hasMore) {\n      return;\n    }\n\n    await load();\n  };\n\n  const refresh = async () => {\n    try {\n      setLoading(true);\n      const data = await Piggy.getWalletLogs(0, filters, sorts);\n      setLogs([...data]);\n      setPage(0);\n      setHasMore(true);\n      setLoading(false);\n    } catch (e) {\n      console.error(e);\n      Snackbar.show('Error Occurred', 'error');\n    }\n  };\n\n  useEffect(() => {\n    refresh();\n  }, [JSON.stringify(filters), JSON.stringify(sorts)]);\n  return [logs, loadMore, hasMore, loading, refresh];\n}\n\n_s2(useWalletLogs, \"SoFBIimdnzA+UhuN9QSwr8cqAvM=\");","map":{"version":3,"sources":["/home/harish/windo/phoenix/src/hooks/wallet.js"],"names":["useCallback","useEffect","useState","Piggy","Snackbar","Loader","useWallet","wallet","setWallet","loading","setLoading","refresh","getWallet","e","console","error","useWalletLogs","filters","sorts","logs","setLogs","page","setPage","hasMore","setHasMore","load","show","data","getWalletLogs","length","hide","loadMore","stopIndex","newPage","Math","floor","JSON","stringify"],"mappings":"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","sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport { Piggy } from 'api';\nimport Snackbar from 'services/snackbar';\nimport Loader from 'services/loader';\n\nexport function useWallet() {\n  const [wallet, setWallet] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const refresh = useCallback(async () => {\n    try {\n      if (loading) {\n        return;\n      }\n      setLoading(true);\n      setWallet((await Piggy.getWallet()));\n    } catch (e) {\n      console.error(e);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    refresh();\n  }, [refresh]);\n\n  return [wallet, refresh, loading];\n}\n\nexport function useWalletLogs(filters = {}, sorts = {}) {\n  const [logs, setLogs] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [page, setPage] = useState(0);\n  const [hasMore, setHasMore] = useState(true);\n\n  const load = async () => {\n    try {\n      if (loading) {\n        return;\n      }\n      setLoading(true);\n      if (page === 0) {\n        Loader.show();\n      }\n      const data = await Piggy.getWalletLogs(page, filters, sorts);\n      setLogs([...logs, ...data]);\n      if (data.length === 0) {\n        setHasMore(false);\n      }\n      setPage(page + 1);\n    } catch (e) {\n      console.error(e);\n      Snackbar.show('Error Occurred', 'error');\n    } finally {\n      Loader.hide();\n      setLoading(false);\n    }\n  };\n\n  const loadMore = async ({ stopIndex = 10 } = {}) => {\n    if (loading) {\n      return;\n    }\n    const newPage = Math.floor(stopIndex / 10);\n    if (newPage <= page) {\n      return;\n    }\n    if (!hasMore) {\n      return;\n    }\n    await load();\n  };\n\n  const refresh = async () => {\n    try {\n      setLoading(true);\n      const data = await Piggy.getWalletLogs(0, filters, sorts);\n      setLogs([...data]);\n      setPage(0);\n      setHasMore(true);\n      setLoading(false);\n    } catch (e) {\n      console.error(e);\n      Snackbar.show('Error Occurred', 'error');\n    }\n  };\n\n  useEffect(() => {\n    refresh();\n  }, [JSON.stringify(filters), JSON.stringify(sorts)]);\n\n  return [logs, loadMore, hasMore, loading, refresh];\n}\n"]},"metadata":{},"sourceType":"module"}