{"ast":null,"code":"import { SentryError } from './error';\nimport { rejectedSyncPromise, resolvedSyncPromise, SyncPromise } from './syncpromise';\n/**\n * Creates an new PromiseBuffer object with the specified limit\n * @param limit max number of promises that can be stored in the buffer\n */\n\nexport function makePromiseBuffer(limit) {\n  var buffer = [];\n\n  function isReady() {\n    return limit === undefined || buffer.length < limit;\n  }\n  /**\n   * Remove a promise from the queue.\n   *\n   * @param task Can be any PromiseLike<T>\n   * @returns Removed promise.\n   */\n\n\n  function remove(task) {\n    return buffer.splice(buffer.indexOf(task), 1)[0];\n  }\n  /**\n   * Add a promise (representing an in-flight action) to the queue, and set it to remove itself on fulfillment.\n   *\n   * @param taskProducer A function producing any PromiseLike<T>; In previous versions this used to be `task:\n   *        PromiseLike<T>`, but under that model, Promises were instantly created on the call-site and their executor\n   *        functions therefore ran immediately. Thus, even if the buffer was full, the action still happened. By\n   *        requiring the promise to be wrapped in a function, we can defer promise creation until after the buffer\n   *        limit check.\n   * @returns The original promise.\n   */\n\n\n  function add(taskProducer) {\n    if (!isReady()) {\n      return rejectedSyncPromise(new SentryError('Not adding Promise due to buffer limit reached.'));\n    } // start the task and add its promise to the queue\n\n\n    var task = taskProducer();\n\n    if (buffer.indexOf(task) === -1) {\n      buffer.push(task);\n    }\n\n    void task.then(function () {\n      return remove(task);\n    }) // Use `then(null, rejectionHandler)` rather than `catch(rejectionHandler)` so that we can use `PromiseLike`\n    // rather than `Promise`. `PromiseLike` doesn't have a `.catch` method, making its polyfill smaller. (ES5 didn't\n    // have promises, so TS has to polyfill when down-compiling.)\n    .then(null, function () {\n      return remove(task).then(null, function () {// We have to add another catch here because `remove()` starts a new promise chain.\n      });\n    });\n    return task;\n  }\n  /**\n   * Wait for all promises in the queue to resolve or for timeout to expire, whichever comes first.\n   *\n   * @param timeout The time, in ms, after which to resolve to `false` if the queue is still non-empty. Passing `0` (or\n   * not passing anything) will make the promise wait as long as it takes for the queue to drain before resolving to\n   * `true`.\n   * @returns A promise which will resolve to `true` if the queue is already empty or drains before the timeout, and\n   * `false` otherwise\n   */\n\n\n  function drain(timeout) {\n    return new SyncPromise(function (resolve, reject) {\n      var counter = buffer.length;\n\n      if (!counter) {\n        return resolve(true);\n      } // wait for `timeout` ms and then resolve to `false` (if not cancelled first)\n\n\n      var capturedSetTimeout = setTimeout(function () {\n        if (timeout && timeout > 0) {\n          resolve(false);\n        }\n      }, timeout); // if all promises resolve in time, cancel the timer and resolve to `true`\n\n      buffer.forEach(function (item) {\n        void resolvedSyncPromise(item).then(function () {\n          // eslint-disable-next-line no-plusplus\n          if (! --counter) {\n            clearTimeout(capturedSetTimeout);\n            resolve(true);\n          }\n        }, reject);\n      });\n    });\n  }\n\n  return {\n    $: buffer,\n    add: add,\n    drain: drain\n  };\n}","map":{"version":3,"sources":["../src/promisebuffer.ts"],"names":[],"mappings":"AAAA,SAAS,WAAT,QAA4B,SAA5B;AACA,SAAS,mBAAT,EAA8B,mBAA9B,EAAmD,WAAnD,QAAsE,eAAtE;AAUA;;;AAGG;;AACH,OAAM,SAAU,iBAAV,CAA+B,KAA/B,EAA6C;AACjD,MAAM,MAAM,GAA0B,EAAtC;;AAEA,WAAS,OAAT,GAAgB;AACd,WAAO,KAAK,KAAK,SAAV,IAAuB,MAAM,CAAC,MAAP,GAAgB,KAA9C;AACD;AAED;;;;;AAKG;;;AACH,WAAS,MAAT,CAAgB,IAAhB,EAAoC;AAClC,WAAO,MAAM,CAAC,MAAP,CAAc,MAAM,CAAC,OAAP,CAAe,IAAf,CAAd,EAAoC,CAApC,EAAuC,CAAvC,CAAP;AACD;AAED;;;;;;;;;AASG;;;AACH,WAAS,GAAT,CAAa,YAAb,EAA+C;AAC7C,QAAI,CAAC,OAAO,EAAZ,EAAgB;AACd,aAAO,mBAAmB,CAAC,IAAI,WAAJ,CAAgB,iDAAhB,CAAD,CAA1B;AACD,KAH4C,CAK7C;;;AACA,QAAM,IAAI,GAAG,YAAY,EAAzB;;AACA,QAAI,MAAM,CAAC,OAAP,CAAe,IAAf,MAAyB,CAAC,CAA9B,EAAiC;AAC/B,MAAA,MAAM,CAAC,IAAP,CAAY,IAAZ;AACD;;AACD,SAAK,IAAI,CACN,IADE,CACG,YAAA;AAAM,aAAA,MAAM,CAAN,IAAM,CAAN;AAAY,KADrB,EAEH;AACA;AACA;AAJG,KAKF,IALE,CAKG,IALH,EAKS,YAAA;AACV,aAAA,MAAM,CAAC,IAAD,CAAN,CAAa,IAAb,CAAkB,IAAlB,EAAwB,YAAA,CACtB;AACD,OAFD,CAAA;AAEE,KARD,CAAL;AAUA,WAAO,IAAP;AACD;AAED;;;;;;;;AAQG;;;AACH,WAAS,KAAT,CAAe,OAAf,EAA+B;AAC7B,WAAO,IAAI,WAAJ,CAAyB,UAAC,OAAD,EAAU,MAAV,EAAgB;AAC9C,UAAI,OAAO,GAAG,MAAM,CAAC,MAArB;;AAEA,UAAI,CAAC,OAAL,EAAc;AACZ,eAAO,OAAO,CAAC,IAAD,CAAd;AACD,OAL6C,CAO9C;;;AACA,UAAM,kBAAkB,GAAG,UAAU,CAAC,YAAA;AACpC,YAAI,OAAO,IAAI,OAAO,GAAG,CAAzB,EAA4B;AAC1B,UAAA,OAAO,CAAC,KAAD,CAAP;AACD;AACF,OAJoC,EAIlC,OAJkC,CAArC,CAR8C,CAc9C;;AACA,MAAA,MAAM,CAAC,OAAP,CAAe,UAAA,IAAA,EAAI;AACjB,aAAK,mBAAmB,CAAC,IAAD,CAAnB,CAA0B,IAA1B,CAA+B,YAAA;AAClC;AACA,cAAI,CAAC,GAAE,OAAP,EAAgB;AACd,YAAA,YAAY,CAAC,kBAAD,CAAZ;AACA,YAAA,OAAO,CAAC,IAAD,CAAP;AACD;AACF,SANI,EAMF,MANE,CAAL;AAOD,OARD;AASD,KAxBM,CAAP;AAyBD;;AAED,SAAO;AACL,IAAA,CAAC,EAAE,MADE;AAEL,IAAA,GAAG,EAAA,GAFE;AAGL,IAAA,KAAK,EAAA;AAHA,GAAP;AAKD","sourcesContent":["import { SentryError } from './error';\nimport { rejectedSyncPromise, resolvedSyncPromise, SyncPromise } from './syncpromise';\n\nexport interface PromiseBuffer<T> {\n  // exposes the internal array so tests can assert on the state of it.\n  // XXX: this really should not be public api.\n  $: Array<PromiseLike<T>>;\n  add(taskProducer: () => PromiseLike<T>): PromiseLike<T>;\n  drain(timeout?: number): PromiseLike<boolean>;\n}\n\n/**\n * Creates an new PromiseBuffer object with the specified limit\n * @param limit max number of promises that can be stored in the buffer\n */\nexport function makePromiseBuffer<T>(limit?: number): PromiseBuffer<T> {\n  const buffer: Array<PromiseLike<T>> = [];\n\n  function isReady(): boolean {\n    return limit === undefined || buffer.length < limit;\n  }\n\n  /**\n   * Remove a promise from the queue.\n   *\n   * @param task Can be any PromiseLike<T>\n   * @returns Removed promise.\n   */\n  function remove(task: PromiseLike<T>): PromiseLike<T> {\n    return buffer.splice(buffer.indexOf(task), 1)[0];\n  }\n\n  /**\n   * Add a promise (representing an in-flight action) to the queue, and set it to remove itself on fulfillment.\n   *\n   * @param taskProducer A function producing any PromiseLike<T>; In previous versions this used to be `task:\n   *        PromiseLike<T>`, but under that model, Promises were instantly created on the call-site and their executor\n   *        functions therefore ran immediately. Thus, even if the buffer was full, the action still happened. By\n   *        requiring the promise to be wrapped in a function, we can defer promise creation until after the buffer\n   *        limit check.\n   * @returns The original promise.\n   */\n  function add(taskProducer: () => PromiseLike<T>): PromiseLike<T> {\n    if (!isReady()) {\n      return rejectedSyncPromise(new SentryError('Not adding Promise due to buffer limit reached.'));\n    }\n\n    // start the task and add its promise to the queue\n    const task = taskProducer();\n    if (buffer.indexOf(task) === -1) {\n      buffer.push(task);\n    }\n    void task\n      .then(() => remove(task))\n      // Use `then(null, rejectionHandler)` rather than `catch(rejectionHandler)` so that we can use `PromiseLike`\n      // rather than `Promise`. `PromiseLike` doesn't have a `.catch` method, making its polyfill smaller. (ES5 didn't\n      // have promises, so TS has to polyfill when down-compiling.)\n      .then(null, () =>\n        remove(task).then(null, () => {\n          // We have to add another catch here because `remove()` starts a new promise chain.\n        }),\n      );\n    return task;\n  }\n\n  /**\n   * Wait for all promises in the queue to resolve or for timeout to expire, whichever comes first.\n   *\n   * @param timeout The time, in ms, after which to resolve to `false` if the queue is still non-empty. Passing `0` (or\n   * not passing anything) will make the promise wait as long as it takes for the queue to drain before resolving to\n   * `true`.\n   * @returns A promise which will resolve to `true` if the queue is already empty or drains before the timeout, and\n   * `false` otherwise\n   */\n  function drain(timeout?: number): PromiseLike<boolean> {\n    return new SyncPromise<boolean>((resolve, reject) => {\n      let counter = buffer.length;\n\n      if (!counter) {\n        return resolve(true);\n      }\n\n      // wait for `timeout` ms and then resolve to `false` (if not cancelled first)\n      const capturedSetTimeout = setTimeout(() => {\n        if (timeout && timeout > 0) {\n          resolve(false);\n        }\n      }, timeout);\n\n      // if all promises resolve in time, cancel the timer and resolve to `true`\n      buffer.forEach(item => {\n        void resolvedSyncPromise(item).then(() => {\n          // eslint-disable-next-line no-plusplus\n          if (!--counter) {\n            clearTimeout(capturedSetTimeout);\n            resolve(true);\n          }\n        }, reject);\n      });\n    });\n  }\n\n  return {\n    $: buffer,\n    add,\n    drain,\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}