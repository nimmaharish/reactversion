{"ast":null,"code":"var _jsxFileName = \"/home/harish/windo/phoenix/src/components/address/LocationSearch.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { ReactInput } from 'phoenix-components';\nimport SnackBar from \"../../services/snackbar\";\nimport Loader from \"../../services/loader\";\nimport Gmaps from \"../../services/gmaps\";\nimport { countryMap, inverseCountryMap } from \"../../utils/countries\";\nimport { useShop, useUser } from \"../../contexts\";\nimport _ from 'lodash';\nimport searchIcon from \"../../assets/images/address/search.svg\";\nimport styles from \"./LocationSearch.module.css\";\nexport function LocationSearch({\n  onSelect\n}) {\n  _s();\n\n  const shop = useShop();\n  const profile = useUser();\n  const [places, setPlaces] = useState([]);\n  const [token, setToken] = useState(undefined);\n  useEffect(() => {\n    (async () => {\n      setToken(await Gmaps.getSessionToken());\n    })();\n  }, []);\n\n  const onSearch = _.debounce(async value => {\n    if (value.length <= 3) {\n      return;\n    }\n\n    try {\n      const data = await Gmaps.autoSuggest(value, inverseCountryMap[shop.country], token);\n      setPlaces(data);\n    } catch (e) {\n      SnackBar.showError(e);\n    }\n  }, 500);\n\n  const onPlaceSelect = async place => {\n    Loader.show();\n\n    try {\n      const address = await Gmaps.getPlaceAddress(place.place_id, token);\n\n      if (countryMap[address.country] !== shop.country) {\n        throw new Error(`select address is not in ${shop.country}.`);\n      }\n\n      onSelect(place, { ...address,\n        nick: 'home',\n        addressLine1: '',\n        name: profile.name,\n        phone: profile.phone\n      });\n    } catch (e) {\n      SnackBar.showError(e);\n    } finally {\n      Loader.hide();\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ReactInput, {\n    startIcon: searchIcon,\n    labelClass: styles.inputClass,\n    placeholder: \"Enter Location\",\n    setValue: e => {\n      onSearch(e);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }), places.length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }\n  }, \"Select Nearby Location\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.places,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }, places.map(place => /*#__PURE__*/React.createElement(\"div\", {\n    onClick: () => onPlaceSelect(place),\n    className: styles.place,\n    key: place.place_id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.placeAddress,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }\n  }, place.description))))));\n}\n\n_s(LocationSearch, \"dbbFWM0hj11iXkfDBKh7pVbGbjA=\", false, function () {\n  return [useShop, useUser];\n});\n\n_c = LocationSearch;\nLocationSearch.propTypes = {\n  onSelect: PropTypes.func.isRequired\n};\nLocationSearch.defaultProps = {};\n\nvar _c;\n\n$RefreshReg$(_c, \"LocationSearch\");","map":{"version":3,"sources":["/home/harish/windo/phoenix/src/components/address/LocationSearch.jsx"],"names":["React","useEffect","useState","PropTypes","ReactInput","SnackBar","Loader","Gmaps","countryMap","inverseCountryMap","useShop","useUser","_","styles","LocationSearch","onSelect","shop","profile","places","setPlaces","token","setToken","undefined","getSessionToken","onSearch","debounce","value","length","data","autoSuggest","country","e","showError","onPlaceSelect","place","show","address","getPlaceAddress","place_id","Error","nick","addressLine1","name","phone","hide","container","searchIcon","inputClass","title","map","placeAddress","description","propTypes","func","isRequired","defaultProps"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { ReactInput } from 'phoenix-components';\nimport SnackBar from 'services/snackbar';\nimport Loader from 'services/loader';\nimport Gmaps from 'services/gmaps';\nimport { countryMap, inverseCountryMap } from 'utils/countries';\nimport { useShop, useUser } from 'contexts';\nimport _ from 'lodash';\nimport searchIcon from 'assets/images/address/search.svg';\nimport styles from './LocationSearch.module.css';\n\nexport function LocationSearch({ onSelect }) {\n  const shop = useShop();\n  const profile = useUser();\n  const [places, setPlaces] = useState([]);\n  const [token, setToken] = useState(undefined);\n\n  useEffect(() => {\n    (async () => {\n      setToken(await Gmaps.getSessionToken());\n    })();\n  }, []);\n\n  const onSearch = _.debounce(async (value) => {\n    if (value.length <= 3) {\n      return;\n    }\n    try {\n      const data = await Gmaps.autoSuggest(value, inverseCountryMap[shop.country], token);\n      setPlaces(data);\n    } catch (e) {\n      SnackBar.showError(e);\n    }\n  }, 500);\n\n  const onPlaceSelect = async (place) => {\n    Loader.show();\n    try {\n      const address = await Gmaps.getPlaceAddress(place.place_id, token);\n      if (countryMap[address.country] !== shop.country) {\n        throw new Error(`select address is not in ${shop.country}.`);\n      }\n      onSelect(place, {\n        ...address,\n        nick: 'home',\n        addressLine1: '',\n        name: profile.name,\n        phone: profile.phone,\n      });\n    } catch (e) {\n      SnackBar.showError(e);\n    } finally {\n      Loader.hide();\n    }\n  };\n\n  return (\n    <>\n      <div className={styles.container}>\n        <ReactInput\n          startIcon={searchIcon}\n          labelClass={styles.inputClass}\n          placeholder=\"Enter Location\"\n          setValue={e => {\n            onSearch(e);\n          }}\n        />\n      </div>\n      <br />\n      {places.length > 0 && (\n        <div>\n          <div className={styles.title}>Select Nearby Location</div>\n          <div className={styles.places}>\n            {places.map(place => (\n              <div onClick={() => onPlaceSelect(place)} className={styles.place} key={place.place_id}>\n                <div className={styles.placeAddress}>\n                  {place.description}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n\nLocationSearch.propTypes = {\n  onSelect: PropTypes.func.isRequired,\n};\n\nLocationSearch.defaultProps = {};\n"]},"metadata":{},"sourceType":"module"}