{"ast":null,"code":"import * as Yup from 'yup';\nimport { PostType } from \"../../constants/posts\";\nexport const productSchema = Yup.object().shape({\n  title: Yup.string().required().min(4),\n  discountedAmount: Yup.number().required().positive().label('Price'),\n  amount: Yup.lazy(value => {\n    if (value) {\n      return Yup.number().positive().min(Yup.ref('discountedAmount'), 'Strike-off Price should be greater than Price').required().label('Strike-off Price');\n    }\n\n    return Yup.number().nullable().notRequired().positive().label('Strike-off Price');\n  }),\n  availableType: Yup.string().oneOf(['finite', 'infinite']).required(),\n  available: Yup.number().when('availableType', {\n    is: 'finite',\n    then: Yup.number().required().positive(),\n    otherwise: Yup.number().nullable()\n  }),\n  customizable: Yup.boolean().required()\n});\nexport const postSchema = Yup.object().shape({\n  type: Yup.string().oneOf(Object.values(PostType)).required(),\n  description: Yup.string().required(),\n  images: Yup.array().when('type', {\n    is: PostType.IMAGES,\n    then: Yup.array().min(1).required(),\n    otherwise: Yup.array().nullable()\n  }),\n  video: Yup.mixed().when('type', {\n    is: PostType.VIDEO,\n    then: Yup.mixed().required(),\n    otherwise: Yup.mixed().nullable()\n  }),\n  thumbnail: Yup.mixed().when('type', {\n    is: PostType.VIDEO,\n    then: Yup.mixed().required(),\n    otherwise: Yup.mixed().nullable()\n  }),\n  language: Yup.string().required(),\n  products: Yup.array().of(Yup.string()),\n  product: productSchema.nullable()\n});","map":{"version":3,"sources":["/home/harish/windo/phoenix/src/components/posts/schema.js"],"names":["Yup","PostType","productSchema","object","shape","title","string","required","min","discountedAmount","number","positive","label","amount","lazy","value","ref","nullable","notRequired","availableType","oneOf","available","when","is","then","otherwise","customizable","boolean","postSchema","type","Object","values","description","images","array","IMAGES","video","mixed","VIDEO","thumbnail","language","products","of","product"],"mappings":"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","sourcesContent":["import * as Yup from 'yup';\nimport { PostType } from 'constants/posts';\n\nexport const productSchema = Yup.object()\n  .shape({\n    title: Yup.string()\n      .required()\n      .min(4),\n    discountedAmount: Yup.number()\n      .required()\n      .positive()\n      .label('Price'),\n    amount: Yup.lazy((value) => {\n      if (value) {\n        return Yup.number()\n          .positive()\n          .min(Yup.ref('discountedAmount'), 'Strike-off Price should be greater than Price')\n          .required()\n          .label('Strike-off Price');\n      }\n      return Yup.number()\n        .nullable()\n        .notRequired()\n        .positive()\n        .label('Strike-off Price');\n    }),\n    availableType: Yup.string()\n      .oneOf(['finite', 'infinite'])\n      .required(),\n    available: Yup.number()\n      .when('availableType', {\n        is: 'finite',\n        then: Yup.number()\n          .required()\n          .positive(),\n        otherwise: Yup.number()\n          .nullable(),\n      }),\n    customizable: Yup.boolean()\n      .required(),\n  });\n\nexport const postSchema = Yup.object()\n  .shape({\n    type: Yup.string()\n      .oneOf(Object.values(PostType))\n      .required(),\n    description: Yup.string()\n      .required(),\n    images: Yup.array()\n      .when('type', {\n        is: PostType.IMAGES,\n        then: Yup.array()\n          .min(1)\n          .required(),\n        otherwise: Yup.array()\n          .nullable(),\n      }),\n    video: Yup.mixed()\n      .when('type', {\n        is: PostType.VIDEO,\n        then: Yup.mixed()\n          .required(),\n        otherwise: Yup.mixed()\n          .nullable(),\n      }),\n    thumbnail: Yup.mixed()\n      .when('type', {\n        is: PostType.VIDEO,\n        then: Yup.mixed()\n          .required(),\n        otherwise: Yup.mixed()\n          .nullable(),\n      }),\n    language: Yup.string()\n      .required(),\n    products: Yup.array()\n      .of(Yup.string()),\n    product: productSchema.nullable(),\n  });\n"]},"metadata":{},"sourceType":"module"}