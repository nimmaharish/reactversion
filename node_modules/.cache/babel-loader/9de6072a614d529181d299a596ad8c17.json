{"ast":null,"code":"import { checkSameOrigin, isDtHeaderValid, parseDtHeaderValue, getDtHeaderValue, getTSHeaderValue, stripQueryStringFromUrl, setRequestHeader } from '../common/utils';\nimport { Url } from '../common/url';\nimport { patchEventHandler } from '../common/patching';\nimport { globalState } from '../common/patching/patch-utils';\nimport { SCHEDULE, INVOKE, TRANSACTION_END, AFTER_EVENT, FETCH, HISTORY, XMLHTTPREQUEST, EVENT_TARGET, HTTP_REQUEST_TYPE, USER_INTERACTION, OUTCOME_FAILURE, OUTCOME_SUCCESS } from '../common/constants';\nimport { truncateModel, SPAN_MODEL, TRANSACTION_MODEL } from '../common/truncate';\nimport { __DEV__ } from '../state';\nvar SIMILAR_SPAN_TO_TRANSACTION_RATIO = 0.05;\nvar TRANSACTION_DURATION_THRESHOLD = 60000;\nexport function groupSmallContinuouslySimilarSpans(originalSpans, transDuration, threshold) {\n  originalSpans.sort(function (spanA, spanB) {\n    return spanA._start - spanB._start;\n  });\n  var spans = [];\n  var lastCount = 1;\n  originalSpans.forEach(function (span, index) {\n    if (spans.length === 0) {\n      spans.push(span);\n    } else {\n      var lastSpan = spans[spans.length - 1];\n      var isContinuouslySimilar = lastSpan.type === span.type && lastSpan.subtype === span.subtype && lastSpan.action === span.action && lastSpan.name === span.name && span.duration() / transDuration < threshold && (span._start - lastSpan._end) / transDuration < threshold;\n      var isLastSpan = originalSpans.length === index + 1;\n\n      if (isContinuouslySimilar) {\n        lastCount++;\n        lastSpan._end = span._end;\n      }\n\n      if (lastCount > 1 && (!isContinuouslySimilar || isLastSpan)) {\n        lastSpan.name = lastCount + 'x ' + lastSpan.name;\n        lastCount = 1;\n      }\n\n      if (!isContinuouslySimilar) {\n        spans.push(span);\n      }\n    }\n  });\n  return spans;\n}\nexport function adjustTransaction(transaction) {\n  if (transaction.sampled) {\n    var filterdSpans = transaction.spans.filter(function (span) {\n      return span.duration() > 0 && span._start >= transaction._start && span._end <= transaction._end;\n    });\n\n    if (transaction.isManaged()) {\n      var duration = transaction.duration();\n      var similarSpans = groupSmallContinuouslySimilarSpans(filterdSpans, duration, SIMILAR_SPAN_TO_TRANSACTION_RATIO);\n      transaction.spans = similarSpans;\n    } else {\n      transaction.spans = filterdSpans;\n    }\n  } else {\n    transaction.resetFields();\n  }\n\n  return transaction;\n}\n\nvar PerformanceMonitoring = function () {\n  function PerformanceMonitoring(apmServer, configService, loggingService, transactionService) {\n    this._apmServer = apmServer;\n    this._configService = configService;\n    this._logginService = loggingService;\n    this._transactionService = transactionService;\n  }\n\n  var _proto = PerformanceMonitoring.prototype;\n\n  _proto.init = function init(flags) {\n    var _this = this;\n\n    if (flags === void 0) {\n      flags = {};\n    }\n\n    this._configService.events.observe(TRANSACTION_END + AFTER_EVENT, function (tr) {\n      var payload = _this.createTransactionPayload(tr);\n\n      if (payload) {\n        _this._apmServer.addTransaction(payload);\n      }\n    });\n\n    if (flags[HISTORY]) {\n      patchEventHandler.observe(HISTORY, this.getHistorySub());\n    }\n\n    if (flags[XMLHTTPREQUEST]) {\n      patchEventHandler.observe(XMLHTTPREQUEST, this.getXHRSub());\n    }\n\n    if (flags[FETCH]) {\n      patchEventHandler.observe(FETCH, this.getFetchSub());\n    }\n\n    if (flags[EVENT_TARGET]) {\n      patchEventHandler.observe(EVENT_TARGET, this.getEventTargetSub());\n    }\n  };\n\n  _proto.getEventTargetSub = function getEventTargetSub() {\n    var transactionService = this._transactionService;\n    return function (event, task) {\n      if (event === SCHEDULE && task.source === EVENT_TARGET && task.eventType === 'click') {\n        var target = task.target;\n        var tagName = target.tagName.toLowerCase();\n        var transactionName = tagName;\n\n        if (!!target.dataset.transactionName) {\n          transactionName = target.dataset.transactionName;\n        } else {\n          var name = target.getAttribute('name');\n\n          if (!!name) {\n            transactionName = tagName + \"[\\\"\" + name + \"\\\"]\";\n          }\n        }\n\n        var tr = transactionService.startTransaction(\"Click - \" + transactionName, USER_INTERACTION, {\n          managed: true,\n          canReuse: true,\n          reuseThreshold: 300\n        });\n\n        if (tr) {\n          var classes = target.getAttribute('class');\n\n          if (classes) {\n            tr.addContext({\n              custom: {\n                classes: classes\n              }\n            });\n          }\n        }\n      }\n    };\n  };\n\n  _proto.getHistorySub = function getHistorySub() {\n    var transactionService = this._transactionService;\n    return function (event, task) {\n      if (task.source === HISTORY && event === INVOKE) {\n        transactionService.startTransaction(task.data.title, 'route-change', {\n          managed: true,\n          canReuse: true\n        });\n      }\n    };\n  };\n\n  _proto.getXHRSub = function getXHRSub() {\n    var _this2 = this;\n\n    return function (event, task) {\n      if (task.source === XMLHTTPREQUEST && !globalState.fetchInProgress) {\n        _this2.processAPICalls(event, task);\n      }\n    };\n  };\n\n  _proto.getFetchSub = function getFetchSub() {\n    var _this3 = this;\n\n    return function (event, task) {\n      if (task.source === FETCH) {\n        _this3.processAPICalls(event, task);\n      }\n    };\n  };\n\n  _proto.processAPICalls = function processAPICalls(event, task) {\n    var configService = this._configService;\n    var transactionService = this._transactionService;\n\n    if (event === SCHEDULE && task.data) {\n      var data = task.data;\n      var requestUrl = new Url(data.url);\n      var spanName = data.method + ' ' + (requestUrl.relative ? requestUrl.path : stripQueryStringFromUrl(requestUrl.href));\n\n      if (!transactionService.getCurrentTransaction()) {\n        transactionService.startTransaction(spanName, HTTP_REQUEST_TYPE, {\n          managed: true\n        });\n      }\n\n      var span = transactionService.startSpan(spanName, 'external.http', {\n        blocking: true\n      });\n\n      if (!span) {\n        return;\n      }\n\n      var isDtEnabled = configService.get('distributedTracing');\n      var dtOrigins = configService.get('distributedTracingOrigins');\n      var currentUrl = new Url(window.location.href);\n      var isSameOrigin = checkSameOrigin(requestUrl.origin, currentUrl.origin) || checkSameOrigin(requestUrl.origin, dtOrigins);\n      var target = data.target;\n\n      if (isDtEnabled && isSameOrigin && target) {\n        this.injectDtHeader(span, target);\n        var propagateTracestate = configService.get('propagateTracestate');\n\n        if (propagateTracestate) {\n          this.injectTSHeader(span, target);\n        }\n      } else if (__DEV__) {\n        this._logginService.debug(\"Could not inject distributed tracing header to the request origin ('\" + requestUrl.origin + \"') from the current origin ('\" + currentUrl.origin + \"')\");\n      }\n\n      if (data.sync) {\n        span.sync = data.sync;\n      }\n\n      data.span = span;\n    } else if (event === INVOKE) {\n      var _data = task.data;\n\n      if (_data && _data.span) {\n        var _span = _data.span,\n            response = _data.response,\n            _target = _data.target;\n        var status;\n\n        if (response) {\n          status = response.status;\n        } else {\n          status = _target.status;\n        }\n\n        var outcome;\n\n        if (_data.status != 'abort') {\n          if (status >= 400 || status == 0) {\n            outcome = OUTCOME_FAILURE;\n          } else {\n            outcome = OUTCOME_SUCCESS;\n          }\n        }\n\n        _span.outcome = outcome;\n        var tr = transactionService.getCurrentTransaction();\n\n        if (tr && tr.type === HTTP_REQUEST_TYPE) {\n          tr.outcome = outcome;\n        }\n\n        transactionService.endSpan(_span, _data);\n      }\n    }\n  };\n\n  _proto.injectDtHeader = function injectDtHeader(span, target) {\n    var headerName = this._configService.get('distributedTracingHeaderName');\n\n    var headerValue = getDtHeaderValue(span);\n    var isHeaderValid = isDtHeaderValid(headerValue);\n\n    if (isHeaderValid && headerValue && headerName) {\n      setRequestHeader(target, headerName, headerValue);\n    }\n  };\n\n  _proto.injectTSHeader = function injectTSHeader(span, target) {\n    var headerValue = getTSHeaderValue(span);\n\n    if (headerValue) {\n      setRequestHeader(target, 'tracestate', headerValue);\n    }\n  };\n\n  _proto.extractDtHeader = function extractDtHeader(target) {\n    var configService = this._configService;\n    var headerName = configService.get('distributedTracingHeaderName');\n\n    if (target) {\n      return parseDtHeaderValue(target[headerName]);\n    }\n  };\n\n  _proto.filterTransaction = function filterTransaction(tr) {\n    var duration = tr.duration();\n\n    if (!duration) {\n      if (__DEV__) {\n        var message = \"transaction(\" + tr.id + \", \" + tr.name + \") was discarded! \";\n\n        if (duration === 0) {\n          message += \"Transaction duration is 0\";\n        } else {\n          message += \"Transaction wasn't ended\";\n        }\n\n        this._logginService.debug(message);\n      }\n\n      return false;\n    }\n\n    if (tr.isManaged()) {\n      if (duration > TRANSACTION_DURATION_THRESHOLD) {\n        if (__DEV__) {\n          this._logginService.debug(\"transaction(\" + tr.id + \", \" + tr.name + \") was discarded! Transaction duration (\" + duration + \") is greater than managed transaction threshold (\" + TRANSACTION_DURATION_THRESHOLD + \")\");\n        }\n\n        return false;\n      }\n\n      if (tr.sampled && tr.spans.length === 0) {\n        if (__DEV__) {\n          this._logginService.debug(\"transaction(\" + tr.id + \", \" + tr.name + \") was discarded! Transaction does not have any spans\");\n        }\n\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  _proto.createTransactionDataModel = function createTransactionDataModel(transaction) {\n    var transactionStart = transaction._start;\n    var spans = transaction.spans.map(function (span) {\n      var spanData = {\n        id: span.id,\n        transaction_id: transaction.id,\n        parent_id: span.parentId || transaction.id,\n        trace_id: transaction.traceId,\n        name: span.name,\n        type: span.type,\n        subtype: span.subtype,\n        action: span.action,\n        sync: span.sync,\n        start: parseInt(span._start - transactionStart),\n        duration: span.duration(),\n        context: span.context,\n        outcome: span.outcome,\n        sample_rate: span.sampleRate\n      };\n      return truncateModel(SPAN_MODEL, spanData);\n    });\n    var transactionData = {\n      id: transaction.id,\n      trace_id: transaction.traceId,\n      session: transaction.session,\n      name: transaction.name,\n      type: transaction.type,\n      duration: transaction.duration(),\n      spans: spans,\n      context: transaction.context,\n      marks: transaction.marks,\n      breakdown: transaction.breakdownTimings,\n      span_count: {\n        started: spans.length\n      },\n      sampled: transaction.sampled,\n      sample_rate: transaction.sampleRate,\n      experience: transaction.experience,\n      outcome: transaction.outcome\n    };\n    return truncateModel(TRANSACTION_MODEL, transactionData);\n  };\n\n  _proto.createTransactionPayload = function createTransactionPayload(transaction) {\n    var adjustedTransaction = adjustTransaction(transaction);\n    var filtered = this.filterTransaction(adjustedTransaction);\n\n    if (filtered) {\n      return this.createTransactionDataModel(transaction);\n    }\n  };\n\n  return PerformanceMonitoring;\n}();\n\nexport { PerformanceMonitoring as default };","map":{"version":3,"sources":["/home/harish/windo/phoenix/node_modules/@elastic/apm-rum-core/dist/es/performance-monitoring/performance-monitoring.js"],"names":["checkSameOrigin","isDtHeaderValid","parseDtHeaderValue","getDtHeaderValue","getTSHeaderValue","stripQueryStringFromUrl","setRequestHeader","Url","patchEventHandler","globalState","SCHEDULE","INVOKE","TRANSACTION_END","AFTER_EVENT","FETCH","HISTORY","XMLHTTPREQUEST","EVENT_TARGET","HTTP_REQUEST_TYPE","USER_INTERACTION","OUTCOME_FAILURE","OUTCOME_SUCCESS","truncateModel","SPAN_MODEL","TRANSACTION_MODEL","__DEV__","SIMILAR_SPAN_TO_TRANSACTION_RATIO","TRANSACTION_DURATION_THRESHOLD","groupSmallContinuouslySimilarSpans","originalSpans","transDuration","threshold","sort","spanA","spanB","_start","spans","lastCount","forEach","span","index","length","push","lastSpan","isContinuouslySimilar","type","subtype","action","name","duration","_end","isLastSpan","adjustTransaction","transaction","sampled","filterdSpans","filter","isManaged","similarSpans","resetFields","PerformanceMonitoring","apmServer","configService","loggingService","transactionService","_apmServer","_configService","_logginService","_transactionService","_proto","prototype","init","flags","_this","events","observe","tr","payload","createTransactionPayload","addTransaction","getHistorySub","getXHRSub","getFetchSub","getEventTargetSub","event","task","source","eventType","target","tagName","toLowerCase","transactionName","dataset","getAttribute","startTransaction","managed","canReuse","reuseThreshold","classes","addContext","custom","data","title","_this2","fetchInProgress","processAPICalls","_this3","requestUrl","url","spanName","method","relative","path","href","getCurrentTransaction","startSpan","blocking","isDtEnabled","get","dtOrigins","currentUrl","window","location","isSameOrigin","origin","injectDtHeader","propagateTracestate","injectTSHeader","debug","sync","_data","_span","response","_target","status","outcome","endSpan","headerName","headerValue","isHeaderValid","extractDtHeader","filterTransaction","message","id","createTransactionDataModel","transactionStart","map","spanData","transaction_id","parent_id","parentId","trace_id","traceId","start","parseInt","context","sample_rate","sampleRate","transactionData","session","marks","breakdown","breakdownTimings","span_count","started","experience","adjustedTransaction","filtered","default"],"mappings":"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","sourcesContent":["import { checkSameOrigin, isDtHeaderValid, parseDtHeaderValue, getDtHeaderValue, getTSHeaderValue, stripQueryStringFromUrl, setRequestHeader } from '../common/utils';\nimport { Url } from '../common/url';\nimport { patchEventHandler } from '../common/patching';\nimport { globalState } from '../common/patching/patch-utils';\nimport { SCHEDULE, INVOKE, TRANSACTION_END, AFTER_EVENT, FETCH, HISTORY, XMLHTTPREQUEST, EVENT_TARGET, HTTP_REQUEST_TYPE, USER_INTERACTION, OUTCOME_FAILURE, OUTCOME_SUCCESS } from '../common/constants';\nimport { truncateModel, SPAN_MODEL, TRANSACTION_MODEL } from '../common/truncate';\nimport { __DEV__ } from '../state';\nvar SIMILAR_SPAN_TO_TRANSACTION_RATIO = 0.05;\nvar TRANSACTION_DURATION_THRESHOLD = 60000;\nexport function groupSmallContinuouslySimilarSpans(originalSpans, transDuration, threshold) {\n  originalSpans.sort(function (spanA, spanB) {\n    return spanA._start - spanB._start;\n  });\n  var spans = [];\n  var lastCount = 1;\n  originalSpans.forEach(function (span, index) {\n    if (spans.length === 0) {\n      spans.push(span);\n    } else {\n      var lastSpan = spans[spans.length - 1];\n      var isContinuouslySimilar = lastSpan.type === span.type && lastSpan.subtype === span.subtype && lastSpan.action === span.action && lastSpan.name === span.name && span.duration() / transDuration < threshold && (span._start - lastSpan._end) / transDuration < threshold;\n      var isLastSpan = originalSpans.length === index + 1;\n\n      if (isContinuouslySimilar) {\n        lastCount++;\n        lastSpan._end = span._end;\n      }\n\n      if (lastCount > 1 && (!isContinuouslySimilar || isLastSpan)) {\n        lastSpan.name = lastCount + 'x ' + lastSpan.name;\n        lastCount = 1;\n      }\n\n      if (!isContinuouslySimilar) {\n        spans.push(span);\n      }\n    }\n  });\n  return spans;\n}\nexport function adjustTransaction(transaction) {\n  if (transaction.sampled) {\n    var filterdSpans = transaction.spans.filter(function (span) {\n      return span.duration() > 0 && span._start >= transaction._start && span._end <= transaction._end;\n    });\n\n    if (transaction.isManaged()) {\n      var duration = transaction.duration();\n      var similarSpans = groupSmallContinuouslySimilarSpans(filterdSpans, duration, SIMILAR_SPAN_TO_TRANSACTION_RATIO);\n      transaction.spans = similarSpans;\n    } else {\n      transaction.spans = filterdSpans;\n    }\n  } else {\n    transaction.resetFields();\n  }\n\n  return transaction;\n}\n\nvar PerformanceMonitoring = function () {\n  function PerformanceMonitoring(apmServer, configService, loggingService, transactionService) {\n    this._apmServer = apmServer;\n    this._configService = configService;\n    this._logginService = loggingService;\n    this._transactionService = transactionService;\n  }\n\n  var _proto = PerformanceMonitoring.prototype;\n\n  _proto.init = function init(flags) {\n    var _this = this;\n\n    if (flags === void 0) {\n      flags = {};\n    }\n\n    this._configService.events.observe(TRANSACTION_END + AFTER_EVENT, function (tr) {\n      var payload = _this.createTransactionPayload(tr);\n\n      if (payload) {\n        _this._apmServer.addTransaction(payload);\n      }\n    });\n\n    if (flags[HISTORY]) {\n      patchEventHandler.observe(HISTORY, this.getHistorySub());\n    }\n\n    if (flags[XMLHTTPREQUEST]) {\n      patchEventHandler.observe(XMLHTTPREQUEST, this.getXHRSub());\n    }\n\n    if (flags[FETCH]) {\n      patchEventHandler.observe(FETCH, this.getFetchSub());\n    }\n\n    if (flags[EVENT_TARGET]) {\n      patchEventHandler.observe(EVENT_TARGET, this.getEventTargetSub());\n    }\n  };\n\n  _proto.getEventTargetSub = function getEventTargetSub() {\n    var transactionService = this._transactionService;\n    return function (event, task) {\n      if (event === SCHEDULE && task.source === EVENT_TARGET && task.eventType === 'click') {\n        var target = task.target;\n        var tagName = target.tagName.toLowerCase();\n        var transactionName = tagName;\n\n        if (!!target.dataset.transactionName) {\n          transactionName = target.dataset.transactionName;\n        } else {\n          var name = target.getAttribute('name');\n\n          if (!!name) {\n            transactionName = tagName + \"[\\\"\" + name + \"\\\"]\";\n          }\n        }\n\n        var tr = transactionService.startTransaction(\"Click - \" + transactionName, USER_INTERACTION, {\n          managed: true,\n          canReuse: true,\n          reuseThreshold: 300\n        });\n\n        if (tr) {\n          var classes = target.getAttribute('class');\n\n          if (classes) {\n            tr.addContext({\n              custom: {\n                classes: classes\n              }\n            });\n          }\n        }\n      }\n    };\n  };\n\n  _proto.getHistorySub = function getHistorySub() {\n    var transactionService = this._transactionService;\n    return function (event, task) {\n      if (task.source === HISTORY && event === INVOKE) {\n        transactionService.startTransaction(task.data.title, 'route-change', {\n          managed: true,\n          canReuse: true\n        });\n      }\n    };\n  };\n\n  _proto.getXHRSub = function getXHRSub() {\n    var _this2 = this;\n\n    return function (event, task) {\n      if (task.source === XMLHTTPREQUEST && !globalState.fetchInProgress) {\n        _this2.processAPICalls(event, task);\n      }\n    };\n  };\n\n  _proto.getFetchSub = function getFetchSub() {\n    var _this3 = this;\n\n    return function (event, task) {\n      if (task.source === FETCH) {\n        _this3.processAPICalls(event, task);\n      }\n    };\n  };\n\n  _proto.processAPICalls = function processAPICalls(event, task) {\n    var configService = this._configService;\n    var transactionService = this._transactionService;\n\n    if (event === SCHEDULE && task.data) {\n      var data = task.data;\n      var requestUrl = new Url(data.url);\n      var spanName = data.method + ' ' + (requestUrl.relative ? requestUrl.path : stripQueryStringFromUrl(requestUrl.href));\n\n      if (!transactionService.getCurrentTransaction()) {\n        transactionService.startTransaction(spanName, HTTP_REQUEST_TYPE, {\n          managed: true\n        });\n      }\n\n      var span = transactionService.startSpan(spanName, 'external.http', {\n        blocking: true\n      });\n\n      if (!span) {\n        return;\n      }\n\n      var isDtEnabled = configService.get('distributedTracing');\n      var dtOrigins = configService.get('distributedTracingOrigins');\n      var currentUrl = new Url(window.location.href);\n      var isSameOrigin = checkSameOrigin(requestUrl.origin, currentUrl.origin) || checkSameOrigin(requestUrl.origin, dtOrigins);\n      var target = data.target;\n\n      if (isDtEnabled && isSameOrigin && target) {\n        this.injectDtHeader(span, target);\n        var propagateTracestate = configService.get('propagateTracestate');\n\n        if (propagateTracestate) {\n          this.injectTSHeader(span, target);\n        }\n      } else if (__DEV__) {\n        this._logginService.debug(\"Could not inject distributed tracing header to the request origin ('\" + requestUrl.origin + \"') from the current origin ('\" + currentUrl.origin + \"')\");\n      }\n\n      if (data.sync) {\n        span.sync = data.sync;\n      }\n\n      data.span = span;\n    } else if (event === INVOKE) {\n      var _data = task.data;\n\n      if (_data && _data.span) {\n        var _span = _data.span,\n            response = _data.response,\n            _target = _data.target;\n        var status;\n\n        if (response) {\n          status = response.status;\n        } else {\n          status = _target.status;\n        }\n\n        var outcome;\n\n        if (_data.status != 'abort') {\n          if (status >= 400 || status == 0) {\n            outcome = OUTCOME_FAILURE;\n          } else {\n            outcome = OUTCOME_SUCCESS;\n          }\n        }\n\n        _span.outcome = outcome;\n        var tr = transactionService.getCurrentTransaction();\n\n        if (tr && tr.type === HTTP_REQUEST_TYPE) {\n          tr.outcome = outcome;\n        }\n\n        transactionService.endSpan(_span, _data);\n      }\n    }\n  };\n\n  _proto.injectDtHeader = function injectDtHeader(span, target) {\n    var headerName = this._configService.get('distributedTracingHeaderName');\n\n    var headerValue = getDtHeaderValue(span);\n    var isHeaderValid = isDtHeaderValid(headerValue);\n\n    if (isHeaderValid && headerValue && headerName) {\n      setRequestHeader(target, headerName, headerValue);\n    }\n  };\n\n  _proto.injectTSHeader = function injectTSHeader(span, target) {\n    var headerValue = getTSHeaderValue(span);\n\n    if (headerValue) {\n      setRequestHeader(target, 'tracestate', headerValue);\n    }\n  };\n\n  _proto.extractDtHeader = function extractDtHeader(target) {\n    var configService = this._configService;\n    var headerName = configService.get('distributedTracingHeaderName');\n\n    if (target) {\n      return parseDtHeaderValue(target[headerName]);\n    }\n  };\n\n  _proto.filterTransaction = function filterTransaction(tr) {\n    var duration = tr.duration();\n\n    if (!duration) {\n      if (__DEV__) {\n        var message = \"transaction(\" + tr.id + \", \" + tr.name + \") was discarded! \";\n\n        if (duration === 0) {\n          message += \"Transaction duration is 0\";\n        } else {\n          message += \"Transaction wasn't ended\";\n        }\n\n        this._logginService.debug(message);\n      }\n\n      return false;\n    }\n\n    if (tr.isManaged()) {\n      if (duration > TRANSACTION_DURATION_THRESHOLD) {\n        if (__DEV__) {\n          this._logginService.debug(\"transaction(\" + tr.id + \", \" + tr.name + \") was discarded! Transaction duration (\" + duration + \") is greater than managed transaction threshold (\" + TRANSACTION_DURATION_THRESHOLD + \")\");\n        }\n\n        return false;\n      }\n\n      if (tr.sampled && tr.spans.length === 0) {\n        if (__DEV__) {\n          this._logginService.debug(\"transaction(\" + tr.id + \", \" + tr.name + \") was discarded! Transaction does not have any spans\");\n        }\n\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  _proto.createTransactionDataModel = function createTransactionDataModel(transaction) {\n    var transactionStart = transaction._start;\n    var spans = transaction.spans.map(function (span) {\n      var spanData = {\n        id: span.id,\n        transaction_id: transaction.id,\n        parent_id: span.parentId || transaction.id,\n        trace_id: transaction.traceId,\n        name: span.name,\n        type: span.type,\n        subtype: span.subtype,\n        action: span.action,\n        sync: span.sync,\n        start: parseInt(span._start - transactionStart),\n        duration: span.duration(),\n        context: span.context,\n        outcome: span.outcome,\n        sample_rate: span.sampleRate\n      };\n      return truncateModel(SPAN_MODEL, spanData);\n    });\n    var transactionData = {\n      id: transaction.id,\n      trace_id: transaction.traceId,\n      session: transaction.session,\n      name: transaction.name,\n      type: transaction.type,\n      duration: transaction.duration(),\n      spans: spans,\n      context: transaction.context,\n      marks: transaction.marks,\n      breakdown: transaction.breakdownTimings,\n      span_count: {\n        started: spans.length\n      },\n      sampled: transaction.sampled,\n      sample_rate: transaction.sampleRate,\n      experience: transaction.experience,\n      outcome: transaction.outcome\n    };\n    return truncateModel(TRANSACTION_MODEL, transactionData);\n  };\n\n  _proto.createTransactionPayload = function createTransactionPayload(transaction) {\n    var adjustedTransaction = adjustTransaction(transaction);\n    var filtered = this.filterTransaction(adjustedTransaction);\n\n    if (filtered) {\n      return this.createTransactionDataModel(transaction);\n    }\n  };\n\n  return PerformanceMonitoring;\n}();\n\nexport { PerformanceMonitoring as default };"]},"metadata":{},"sourceType":"module"}