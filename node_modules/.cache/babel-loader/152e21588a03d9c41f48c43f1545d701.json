{"ast":null,"code":"var _jsxFileName = \"/home/harish/windo/phoenix/src/components/products/ColorVariant.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { Grid } from '@material-ui/core'; // import { Radio } from 'phoenix-components/lib/formik';\n\nimport deleteIcon from \"../../assets/v2/products/delete.svg\";\nimport { Card, Clickable, Switch, FormikInput } from 'phoenix-components';\nimport { useField } from 'formik';\nimport { useToggle } from \"../../hooks/common\";\nimport { ColorDialog } from \"../common/ColorDialog\";\nimport cx from 'classnames';\nimport { useDesktop, useImagesLength } from \"../../contexts\";\nimport { ImageDrawer } from \"./ImageDrawer\";\nimport styles from \"./Variant.module.css\";\nexport function ColorVariant({\n  index\n}) {\n  _s();\n\n  var _color$_id;\n\n  const isDesktop = useDesktop(); // const isFreePlan = useIsFreePlan();\n  // const freeRange = '0';\n  // const plusRange = '2';\n\n  const prefix = `colors[${index}]`;\n  const [{\n    value: color\n  },, {\n    setValue\n  }] = useField(prefix);\n  const [{\n    value: colors\n  },, {\n    setValue: setColors\n  }] = useField('colors');\n  const [open, toggleOpen] = useToggle();\n  const fileLength = useImagesLength(true);\n\n  const onUnlive = () => {\n    setValue({ ...color,\n      status: color.status === 'live' ? 'unlive' : 'live'\n    });\n  };\n\n  const onDelete = () => {\n    setColors(colors.filter((_c, idx) => idx !== index));\n  };\n\n  const onChange = hex => {\n    setValue({ ...color,\n      hex\n    });\n    toggleOpen();\n  };\n\n  const onChangeImages = images => {\n    setValue({ ...color,\n      images\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, !isDesktop && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }\n  }, open && /*#__PURE__*/React.createElement(ColorDialog, {\n    onChange: onChange,\n    color: color === null || color === void 0 ? void 0 : color.hex,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }, \"Color\", ' ', _.isEmpty(color.name) ? index + 1 : color.name), /*#__PURE__*/React.createElement(Card, {\n    className: styles.colorBgn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 7,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Clickable, {\n    onClick: toggleOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.selectColor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.colorBlock,\n    style: {\n      background: color.hex\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 23\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 23\n    }\n  }, \"Pick A Color\")))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }\n  }, (color === null || color === void 0 ? void 0 : (_color$_id = color._id) === null || _color$_id === void 0 ? void 0 : _color$_id.length) > 0 && /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.switch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: cx(styles.status, {\n      [styles.statusLive]: color.status === 'live',\n      [styles.statusUnlive]: color.status !== 'live'\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 25\n    }\n  }), ' ', color.status), /*#__PURE__*/React.createElement(Switch, {\n    active: color.status === 'live',\n    onChange: onUnlive,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 23\n    }\n  })))), /*#__PURE__*/React.createElement(ImageDrawer, {\n    onChange: onChangeImages,\n    isMulti: true,\n    images: [...color.images],\n    accept: \"image/*\",\n    label: \"Upload multiple photos for your product\",\n    size: fileLength,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.delete,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Clickable, {\n    onClick: onDelete,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: deleteIcon,\n    alt: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 19\n    }\n  }))))), isDesktop && /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.colorV,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 11\n    }\n  }, open && /*#__PURE__*/React.createElement(ColorDialog, {\n    onChange: onChange,\n    color: color === null || color === void 0 ? void 0 : color.hex,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }\n  }, \"Color\", ' ', _.isEmpty(color.name) ? index + 1 : color.name), /*#__PURE__*/React.createElement(Card, {\n    className: styles.sizeCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.switch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: cx(styles.status, {\n      [styles.statusLive]: color.status === 'live',\n      [styles.statusUnlive]: color.status !== 'live'\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 19\n    }\n  }), ' ', color.status), /*#__PURE__*/React.createElement(Switch, {\n    active: color.status === 'live',\n    onChange: onUnlive,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Clickable, {\n    onClick: toggleOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.selectColor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.colorBlock,\n    style: {\n      background: color.hex\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 19\n    }\n  }, \"Pick A Color\"))), (color === null || color === void 0 ? void 0 : color.availableType) === 'finite' && /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FormikInput, {\n    label: \"Availability\",\n    name: `${prefix}.available`,\n    placeholder: \"0\",\n    type: \"number\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 19\n    }\n  })), /*#__PURE__*/React.createElement(ImageDrawer, {\n    onChange: onChangeImages,\n    isMulti: true,\n    images: [...color.images],\n    accept: \"image/*\",\n    label: \"Upload multiple photos for your product\",\n    size: fileLength,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.delete,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Clickable, {\n    onClick: onDelete,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: deleteIcon,\n    alt: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 19\n    }\n  }))))));\n}\n\n_s(ColorVariant, \"bYdN5g1xsweDYmBZL4EFmvb7FpE=\", false, function () {\n  return [useDesktop, useField, useField, useToggle, useImagesLength];\n});\n\n_c2 = ColorVariant;\nColorVariant.propTypes = {\n  index: PropTypes.number.isRequired\n};\nColorVariant.defaultProps = {};\n\nvar _c2;\n\n$RefreshReg$(_c2, \"ColorVariant\");","map":{"version":3,"sources":["/home/harish/windo/phoenix/src/components/products/ColorVariant.jsx"],"names":["React","PropTypes","_","Grid","Card","Clickable","Switch","FormikInput","useField","useToggle","ColorDialog","cx","useDesktop","useImagesLength","ImageDrawer","styles","ColorVariant","index","isDesktop","prefix","value","color","setValue","colors","setColors","open","toggleOpen","fileLength","onUnlive","status","onDelete","filter","_c","idx","onChange","hex","onChangeImages","images","title","isEmpty","name","colorBgn","selectColor","colorBlock","background","_id","length","switch","statusLive","statusUnlive","delete","deleteIcon","colorV","sizeCard","availableType","propTypes","number","isRequired","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { Grid } from '@material-ui/core';\n// import { Radio } from 'phoenix-components/lib/formik';\nimport deleteIcon from 'assets/v2/products/delete.svg';\nimport {\n  Card, Clickable, Switch, FormikInput\n} from 'phoenix-components';\nimport { useField } from 'formik';\nimport { useToggle } from 'hooks/common';\nimport { ColorDialog } from 'components/common/ColorDialog';\nimport cx from 'classnames';\nimport { useDesktop, useImagesLength } from 'contexts';\nimport { ImageDrawer } from 'components/products/ImageDrawer';\nimport styles from './Variant.module.css';\n\nexport function ColorVariant({ index }) {\n  const isDesktop = useDesktop();\n  // const isFreePlan = useIsFreePlan();\n  // const freeRange = '0';\n  // const plusRange = '2';\n  const prefix = `colors[${index}]`;\n  const [{ value: color }, , { setValue }] = useField(prefix);\n  const [{ value: colors }, , { setValue: setColors }] = useField('colors');\n  const [open, toggleOpen] = useToggle();\n  const fileLength = useImagesLength(true);\n\n  const onUnlive = () => {\n    setValue({\n      ...color,\n      status: color.status === 'live' ? 'unlive' : 'live',\n    });\n  };\n\n  const onDelete = () => {\n    setColors(colors.filter((_c, idx) => idx !== index));\n  };\n\n  const onChange = hex => {\n    setValue({\n      ...color,\n      hex,\n    });\n    toggleOpen();\n  };\n\n  const onChangeImages = (images) => {\n    setValue({\n      ...color,\n      images,\n    });\n  };\n\n  return (\n    <>\n      {!isDesktop\n        && (\n          <div>\n            {open && (\n              <ColorDialog onChange={onChange} color={color?.hex} />\n            )}\n            <div className={styles.title}>\n              Color\n              {' '}\n              {_.isEmpty(color.name) ? index + 1 : color.name}\n            </div>\n            <Card className={styles.colorBgn}>\n              <Grid container spacing={2}>\n                <Grid item xs={7}>\n                  <Clickable onClick={toggleOpen}>\n                    <div className={styles.selectColor}>\n                      <div className={styles.colorBlock} style={{ background: color.hex }} />\n                      <div>Pick A Color</div>\n                    </div>\n                  </Clickable>\n                </Grid>\n                <Grid item xs={5}>\n                  {color?._id?.length > 0 && (\n                    <div className={styles.switch}>\n                      <div\n                        className={cx(styles.status, {\n                          [styles.statusLive]: color.status === 'live',\n                          [styles.statusUnlive]: color.status !== 'live',\n                        })}\n                      >\n                        <span />\n                        {' '}\n                        {color.status}\n                      </div>\n                      <Switch active={color.status === 'live'} onChange={onUnlive} />\n                    </div>\n                  )}\n                </Grid>\n              </Grid>\n              <ImageDrawer\n                onChange={onChangeImages}\n                isMulti={true}\n                images={[...color.images]}\n                accept=\"image/*\"\n                label=\"Upload multiple photos for your product\"\n                size={fileLength}\n              />\n              <div className={styles.delete}>\n                <Clickable onClick={onDelete}>\n                  <img src={deleteIcon} alt=\"\" />\n                </Clickable>\n              </div>\n            </Card>\n          </div>\n        )}\n      {isDesktop\n        && (\n          <div className={styles.colorV}>\n            {open && (\n              <ColorDialog onChange={onChange} color={color?.hex} />\n            )}\n            <div className={styles.title}>\n              Color\n              {' '}\n              {_.isEmpty(color.name) ? index + 1 : color.name}\n            </div>\n            <Card className={styles.sizeCard}>\n              <div className={styles.switch}>\n                <div\n                  className={cx(styles.status, {\n                    [styles.statusLive]: color.status === 'live',\n                    [styles.statusUnlive]: color.status !== 'live',\n                  })}\n                >\n                  <span />\n                  {' '}\n                  {color.status}\n                </div>\n                <Switch active={color.status === 'live'} onChange={onUnlive} />\n              </div>\n              <Clickable onClick={toggleOpen}>\n                <div className={styles.selectColor}>\n                  <div className={styles.colorBlock} style={{ background: color.hex }} />\n                  <div>Pick A Color</div>\n                </div>\n              </Clickable>\n              {/* <Grid item xs={12}>\n                <div className={styles.heading}>Availability</div>\n                <Grid container spacing={2}>\n                  <Grid item xs={6}>\n                    <Radio name={`${prefix}.availableType`} value=\"finite\" label=\"Limited Stock\" />\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Radio name={`${prefix}.availableType`} value=\"infinite\" label=\"Always in Stock\" />\n                  </Grid>\n                </Grid>\n              </Grid> */}\n              {color?.availableType === 'finite' && (\n                <Grid item xs={12}>\n                  <FormikInput\n                    label=\"Availability\"\n                    name={`${prefix}.available`}\n                    placeholder=\"0\"\n                    type=\"number\"\n                  />\n                </Grid>\n              )}\n              <ImageDrawer\n                onChange={onChangeImages}\n                isMulti={true}\n                images={[...color.images]}\n                accept=\"image/*\"\n                label=\"Upload multiple photos for your product\"\n                size={fileLength}\n              />\n              <div className={styles.delete}>\n                <Clickable onClick={onDelete}>\n                  <img src={deleteIcon} alt=\"\" />\n                </Clickable>\n              </div>\n            </Card>\n          </div>\n        )}\n    </>\n  );\n}\n\nColorVariant.propTypes = {\n  index: PropTypes.number.isRequired,\n};\n\nColorVariant.defaultProps = {};\n"]},"metadata":{},"sourceType":"module"}