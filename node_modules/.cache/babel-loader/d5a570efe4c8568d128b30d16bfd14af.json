{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useCallback, useEffect, useState } from 'react';\nimport { Becca } from \"../api\";\nimport Snackbar from \"../services/snackbar\";\nexport function useShopSummary(filters) {\n  _s();\n\n  const [summary, setSummary] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const refresh = useCallback(async () => {\n    try {\n      if (loading) {\n        return;\n      }\n\n      setLoading(true);\n      setSummary(await Becca.getSummary(filters));\n    } catch (e) {\n      console.error(e);\n      Snackbar.show('unable to fetch analytics', 'error');\n    } finally {\n      setLoading(false);\n    }\n  }, [JSON.stringify(filters)]);\n  useEffect(() => {\n    refresh();\n  }, [refresh]);\n  return [summary, refresh, loading];\n}\n\n_s(useShopSummary, \"q2rGXqtXfEAGWHjG2lSnVeq0tHA=\");\n\nexport function useShopCohort(filters) {\n  _s2();\n\n  const [summary, setSummary] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const refresh = useCallback(async () => {\n    try {\n      if (loading) {\n        return;\n      }\n\n      setLoading(true);\n      setSummary(await Becca.getCohort(filters));\n    } catch (e) {\n      console.error(e);\n      Snackbar.show('unable to fetch analytics', 'error');\n    } finally {\n      setLoading(false);\n    }\n  }, [JSON.stringify(filters)]);\n  useEffect(() => {\n    refresh();\n  }, [refresh]);\n  return [summary, refresh, loading];\n}\n\n_s2(useShopCohort, \"q2rGXqtXfEAGWHjG2lSnVeq0tHA=\");","map":{"version":3,"sources":["/home/harish/windo/phoenix/src/hooks/analytics.js"],"names":["useCallback","useEffect","useState","Becca","Snackbar","useShopSummary","filters","summary","setSummary","loading","setLoading","refresh","getSummary","e","console","error","show","JSON","stringify","useShopCohort","getCohort"],"mappings":";;;AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AACA,SAASC,KAAT;AACA,OAAOC,QAAP;AAEA,OAAO,SAASC,cAAT,CAAwBC,OAAxB,EAAiC;AAAA;;AACtC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,KAAD,CAAtC;AAEA,QAAMS,OAAO,GAAGX,WAAW,CAAC,YAAY;AACtC,QAAI;AACF,UAAIS,OAAJ,EAAa;AACX;AACD;;AACDC,MAAAA,UAAU,CAAC,IAAD,CAAV;AACAF,MAAAA,UAAU,CAAC,MAAML,KAAK,CAACS,UAAN,CAAiBN,OAAjB,CAAP,CAAV;AACD,KAND,CAME,OAAOO,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACAT,MAAAA,QAAQ,CAACY,IAAT,CAAc,2BAAd,EAA2C,OAA3C;AACD,KATD,SASU;AACRN,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF,GAb0B,EAaxB,CAACO,IAAI,CAACC,SAAL,CAAeZ,OAAf,CAAD,CAbwB,CAA3B;AAeAL,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,OAAO;AACR,GAFQ,EAEN,CAACA,OAAD,CAFM,CAAT;AAGA,SAAO,CAACJ,OAAD,EAAUI,OAAV,EAAmBF,OAAnB,CAAP;AACD;;GAvBeJ,c;;AAyBhB,OAAO,SAASc,aAAT,CAAuBb,OAAvB,EAAgC;AAAA;;AACrC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,KAAD,CAAtC;AAEA,QAAMS,OAAO,GAAGX,WAAW,CAAC,YAAY;AACtC,QAAI;AACF,UAAIS,OAAJ,EAAa;AACX;AACD;;AACDC,MAAAA,UAAU,CAAC,IAAD,CAAV;AACAF,MAAAA,UAAU,CAAC,MAAML,KAAK,CAACiB,SAAN,CAAgBd,OAAhB,CAAP,CAAV;AACD,KAND,CAME,OAAOO,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACAT,MAAAA,QAAQ,CAACY,IAAT,CAAc,2BAAd,EAA2C,OAA3C;AACD,KATD,SASU;AACRN,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF,GAb0B,EAaxB,CAACO,IAAI,CAACC,SAAL,CAAeZ,OAAf,CAAD,CAbwB,CAA3B;AAeAL,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,OAAO;AACR,GAFQ,EAEN,CAACA,OAAD,CAFM,CAAT;AAGA,SAAO,CAACJ,OAAD,EAAUI,OAAV,EAAmBF,OAAnB,CAAP;AACD;;IAvBeU,a","sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport { Becca } from 'api';\nimport Snackbar from 'services/snackbar';\n\nexport function useShopSummary(filters) {\n  const [summary, setSummary] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  const refresh = useCallback(async () => {\n    try {\n      if (loading) {\n        return;\n      }\n      setLoading(true);\n      setSummary(await Becca.getSummary(filters));\n    } catch (e) {\n      console.error(e);\n      Snackbar.show('unable to fetch analytics', 'error');\n    } finally {\n      setLoading(false);\n    }\n  }, [JSON.stringify(filters)]);\n\n  useEffect(() => {\n    refresh();\n  }, [refresh]);\n  return [summary, refresh, loading];\n}\n\nexport function useShopCohort(filters) {\n  const [summary, setSummary] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  const refresh = useCallback(async () => {\n    try {\n      if (loading) {\n        return;\n      }\n      setLoading(true);\n      setSummary(await Becca.getCohort(filters));\n    } catch (e) {\n      console.error(e);\n      Snackbar.show('unable to fetch analytics', 'error');\n    } finally {\n      setLoading(false);\n    }\n  }, [JSON.stringify(filters)]);\n\n  useEffect(() => {\n    refresh();\n  }, [refresh]);\n  return [summary, refresh, loading];\n}\n"]},"metadata":{},"sourceType":"module"}