{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport Loader from \"../services/loader\";\nimport { Factory, Hedwig, Becca } from \"../api\";\nimport Snackbar from \"../services/snackbar\";\nimport _ from 'lodash';\nimport moment from 'moment';\nimport { useIdle } from \"./idleTimeout\";\nexport function useInfiniteChats(filters = {}, sorts = {}) {\n  _s();\n\n  const [chats, setChats] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [page, setPage] = useState(0);\n  const [hasMore, setHasMore] = useState(true);\n  const [unread, setUnread] = useState(0);\n  const isUserIdle = useIdle();\n\n  const loadMore = async ({\n    stopIndex = 10\n  } = {}) => {\n    if (loading) {\n      return;\n    }\n\n    const newPage = Math.floor(stopIndex / 10);\n\n    if (newPage <= page) {\n      return;\n    }\n\n    if (!hasMore) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const data = await Factory.getChatRooms(page, filters, sorts);\n      setChats(_.uniqBy([...chats, ...data.rooms], '_id'));\n      setUnread(data.unread || 0);\n\n      if (data.length === 0) {\n        setHasMore(false);\n      }\n\n      setPage(page + 1);\n    } catch (e) {\n      console.error(e);\n    } finally {\n      Loader.hide();\n      setLoading(false);\n    }\n  };\n\n  const refresh = async () => {\n    if (loading) {\n      return;\n    }\n\n    try {\n      setHasMore(true);\n      setPage(0);\n      setLoading(true);\n      const data = await Factory.getChatRooms(0, filters, sorts);\n      setChats(data.rooms);\n      setUnread(data.unread || 0);\n    } catch (e) {\n      console.error(e);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    refresh();\n  }, [JSON.stringify(filters), JSON.stringify(sorts)]);\n  return [chats, loadMore, hasMore, loading, refresh, unread, isUserIdle];\n}\n\n_s(useInfiniteChats, \"dkVLTtfRUGfxK9H7heGAPqTqnf0=\", false, function () {\n  return [useIdle];\n});\n\nfunction morphChats(chats) {\n  return _.sortBy(Object.entries(_.groupBy(chats, c => moment(c.at).format('DD/MM/YYYY'))).map(([key, data]) => ({\n    key,\n    data\n  })), s => moment(s.key));\n}\n\nexport function useInfiniteRoom(roomId) {\n  _s2();\n\n  const [chats, setChats] = useState([]);\n  const [names, setNames] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [page, setPage] = useState(0);\n  const [hasMore, setHasMore] = useState(true);\n\n  const readMessages = async chats => {\n    try {\n      const ids = chats.filter(x => !x.read).map(x => x._id);\n\n      if (ids.length === 0) {\n        return;\n      }\n\n      await Hedwig.readChat(roomId, ids);\n    } catch (e) {\n      Snackbar.showError(e);\n      console.error(e);\n    }\n  };\n\n  const loadMore = async () => {\n    if (loading) {\n      return;\n    }\n\n    if (!hasMore) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n\n      if (page === 0) {\n        Loader.show();\n      }\n\n      const data = await Hedwig.getChat(roomId, page);\n      readMessages(data);\n      setChats(_.sortBy(_.uniqBy([...chats, ...data], '_id'), c => moment(c.at)));\n      setNames(_.uniq([...names, ...data.filter(s => s.by !== 'you').map(s => s.by.userName)]));\n\n      if (data.length === 0) {\n        setHasMore(false);\n      }\n\n      setPage(page + 1);\n    } catch (e) {\n      console.error(e);\n      Snackbar.show('Error Occurred', 'error');\n    } finally {\n      Loader.hide();\n      setLoading(false);\n    }\n  };\n\n  const poll = async () => {\n    try {\n      const data = await Hedwig.getChat(roomId, 0);\n      setChats(_.sortBy(_.uniqBy([...chats, ...data], '_id'), c => moment(c.at)));\n      setNames(_.uniq([...names, ...data.filter(s => s.by !== 'you').map(s => s.by.userName)]));\n      readMessages(data);\n    } catch (e) {\n      console.error(e);\n      Snackbar.show('Error Occurred', 'error');\n    }\n  };\n\n  const refresh = () => {\n    setPage(0);\n    setHasMore(true);\n    setChats([]);\n    setTimeout(loadMore, 500);\n  };\n\n  useEffect(() => {\n    const interval = setInterval(poll, 15000);\n    refresh();\n    return () => {\n      if (interval) {\n        clearInterval(interval);\n      }\n    };\n  }, [roomId]);\n  return [morphChats(chats), names, loadMore, poll, hasMore, loading, refresh];\n}\n\n_s2(useInfiniteRoom, \"LVPotsNDC72cicvXHMRpqkkHCQc=\");\n\nexport function useInfinitePeopleChats(filters = {}, sorts = {}) {\n  _s3();\n\n  const [chats, setChats] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [page, setPage] = useState(0);\n  const [hasMore, setHasMore] = useState(true);\n  const [unread, setUnread] = useState(0);\n\n  const loadMore = async ({\n    stopIndex = 10\n  } = {}) => {\n    if (loading) {\n      return;\n    }\n\n    const newPage = Math.floor(stopIndex / 10);\n\n    if (newPage <= page) {\n      return;\n    }\n\n    if (!hasMore) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const data = await Becca.getPeopleChatRooms(page, sorts);\n      setChats(_.uniqBy([...chats, ...data.rooms], '_id'));\n      setUnread(data.unread);\n\n      if (data.length === 0) {\n        setHasMore(false);\n      }\n\n      setPage(page + 1);\n    } catch (e) {\n      console.error(e);\n    } finally {\n      Loader.hide();\n      setLoading(false);\n    }\n  };\n\n  const refresh = async () => {\n    if (loading) {\n      return;\n    }\n\n    try {\n      setHasMore(true);\n      setPage(0);\n      setLoading(true);\n      const data = await Becca.getPeopleChatRooms(0, sorts);\n      setChats(data.rooms);\n      setUnread(data.unread);\n    } catch (e) {\n      console.error(e);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    refresh();\n  }, [JSON.stringify(filters), JSON.stringify(sorts)]);\n  return [chats, loadMore, hasMore, loading, refresh, unread];\n}\n\n_s3(useInfinitePeopleChats, \"X/bBzcg+eMSfED4sqQ2JNZgDNz4=\");","map":{"version":3,"sources":["/home/harish/windo/phoenix/src/hooks/chat.js"],"names":["useEffect","useState","Loader","Factory","Hedwig","Becca","Snackbar","_","moment","useIdle","useInfiniteChats","filters","sorts","chats","setChats","loading","setLoading","page","setPage","hasMore","setHasMore","unread","setUnread","isUserIdle","loadMore","stopIndex","newPage","Math","floor","data","getChatRooms","uniqBy","rooms","length","e","console","error","hide","refresh","JSON","stringify","morphChats","sortBy","Object","entries","groupBy","c","at","format","map","key","s","useInfiniteRoom","roomId","names","setNames","readMessages","ids","filter","x","read","_id","readChat","showError","show","getChat","uniq","by","userName","poll","setTimeout","interval","setInterval","clearInterval","useInfinitePeopleChats","getPeopleChatRooms"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\nimport Loader from 'services/loader';\nimport { Factory, Hedwig, Becca } from 'api';\nimport Snackbar from 'services/snackbar';\nimport _ from 'lodash';\nimport moment from 'moment';\nimport { useIdle } from './idleTimeout';\n\nexport function useInfiniteChats(filters = {}, sorts = {}) {\n  const [chats, setChats] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [page, setPage] = useState(0);\n  const [hasMore, setHasMore] = useState(true);\n  const [unread, setUnread] = useState(0);\n  const isUserIdle = useIdle();\n\n  const loadMore = async ({ stopIndex = 10 } = {}) => {\n    if (loading) {\n      return;\n    }\n    const newPage = Math.floor(stopIndex / 10);\n    if (newPage <= page) {\n      return;\n    }\n    if (!hasMore) {\n      return;\n    }\n    try {\n      setLoading(true);\n      const data = await Factory.getChatRooms(page, filters, sorts);\n      setChats(_.uniqBy([...chats, ...data.rooms], '_id'));\n      setUnread(data.unread || 0);\n      if (data.length === 0) {\n        setHasMore(false);\n      }\n      setPage(page + 1);\n    } catch (e) {\n      console.error(e);\n    } finally {\n      Loader.hide();\n      setLoading(false);\n    }\n  };\n\n  const refresh = async () => {\n    if (loading) {\n      return;\n    }\n    try {\n      setHasMore(true);\n      setPage(0);\n      setLoading(true);\n      const data = await Factory.getChatRooms(0, filters, sorts);\n      setChats(data.rooms);\n      setUnread(data.unread || 0);\n    } catch (e) {\n      console.error(e);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    refresh();\n  }, [JSON.stringify(filters), JSON.stringify(sorts)]);\n\n  return [chats, loadMore, hasMore, loading, refresh, unread, isUserIdle];\n}\n\nfunction morphChats(chats) {\n  return _.sortBy(Object.entries(\n    _.groupBy(chats, c => moment(c.at).format('DD/MM/YYYY'))\n  ).map(([key, data]) => ({\n    key,\n    data,\n  })), s => moment(s.key));\n}\n\nexport function useInfiniteRoom(roomId) {\n  const [chats, setChats] = useState([]);\n  const [names, setNames] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [page, setPage] = useState(0);\n  const [hasMore, setHasMore] = useState(true);\n\n  const readMessages = async chats => {\n    try {\n      const ids = chats.filter(x => !x.read).map(x => x._id);\n      if (ids.length === 0) {\n        return;\n      }\n      await Hedwig.readChat(roomId, ids);\n    } catch (e) {\n      Snackbar.showError(e);\n      console.error(e);\n    }\n  };\n\n  const loadMore = async () => {\n    if (loading) {\n      return;\n    }\n    if (!hasMore) {\n      return;\n    }\n    try {\n      setLoading(true);\n      if (page === 0) {\n        Loader.show();\n      }\n      const data = await Hedwig.getChat(roomId, page);\n      readMessages(data);\n      setChats(_.sortBy(_.uniqBy([...chats, ...data], '_id'), c => moment(c.at)));\n      setNames(_.uniq([...names, ...data.filter(s => s.by !== 'you').map(s => s.by.userName)]));\n      if (data.length === 0) {\n        setHasMore(false);\n      }\n      setPage(page + 1);\n    } catch (e) {\n      console.error(e);\n      Snackbar.show('Error Occurred', 'error');\n    } finally {\n      Loader.hide();\n      setLoading(false);\n    }\n  };\n\n  const poll = async () => {\n    try {\n      const data = await Hedwig.getChat(roomId, 0);\n      setChats(_.sortBy(_.uniqBy([...chats, ...data], '_id'), c => moment(c.at)));\n      setNames(_.uniq([...names, ...data.filter(s => s.by !== 'you').map(s => s.by.userName)]));\n      readMessages(data);\n    } catch (e) {\n      console.error(e);\n      Snackbar.show('Error Occurred', 'error');\n    }\n  };\n\n  const refresh = () => {\n    setPage(0);\n    setHasMore(true);\n    setChats([]);\n    setTimeout(loadMore, 500);\n  };\n  useEffect(() => {\n    const interval = setInterval(poll, 15000);\n    refresh();\n    return () => {\n      if (interval) {\n        clearInterval(interval);\n      }\n    };\n  }, [roomId]);\n\n  return [\n    morphChats(chats),\n    names,\n    loadMore,\n    poll,\n    hasMore,\n    loading,\n    refresh\n  ];\n}\n\nexport function useInfinitePeopleChats(filters = {}, sorts = {}) {\n  const [chats, setChats] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [page, setPage] = useState(0);\n  const [hasMore, setHasMore] = useState(true);\n  const [unread, setUnread] = useState(0);\n\n  const loadMore = async ({ stopIndex = 10 } = {}) => {\n    if (loading) {\n      return;\n    }\n    const newPage = Math.floor(stopIndex / 10);\n    if (newPage <= page) {\n      return;\n    }\n    if (!hasMore) {\n      return;\n    }\n    try {\n      setLoading(true);\n      const data = await Becca.getPeopleChatRooms(page, sorts);\n      setChats(_.uniqBy([...chats, ...data.rooms], '_id'));\n      setUnread(data.unread);\n      if (data.length === 0) {\n        setHasMore(false);\n      }\n      setPage(page + 1);\n    } catch (e) {\n      console.error(e);\n    } finally {\n      Loader.hide();\n      setLoading(false);\n    }\n  };\n\n  const refresh = async () => {\n    if (loading) {\n      return;\n    }\n    try {\n      setHasMore(true);\n      setPage(0);\n      setLoading(true);\n      const data = await Becca.getPeopleChatRooms(0, sorts);\n      setChats(data.rooms);\n      setUnread(data.unread);\n    } catch (e) {\n      console.error(e);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    refresh();\n  }, [JSON.stringify(filters), JSON.stringify(sorts)]);\n\n  return [chats, loadMore, hasMore, loading, refresh, unread];\n}\n"]},"metadata":{},"sourceType":"module"}