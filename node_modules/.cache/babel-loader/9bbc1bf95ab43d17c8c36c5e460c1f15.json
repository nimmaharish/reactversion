{"ast":null,"code":"import PerformanceMonitoring from './performance-monitoring';\nimport TransactionService from './transaction-service';\nimport { APM_SERVER, CONFIG_SERVICE, LOGGING_SERVICE } from '../common/constants';\nimport { serviceCreators } from '../common/service-factory';\n\nfunction registerServices() {\n  serviceCreators['TransactionService'] = function (serviceFactory) {\n    var _serviceFactory$getSe = serviceFactory.getService([LOGGING_SERVICE, CONFIG_SERVICE]),\n        loggingService = _serviceFactory$getSe[0],\n        configService = _serviceFactory$getSe[1];\n\n    return new TransactionService(loggingService, configService);\n  };\n\n  serviceCreators['PerformanceMonitoring'] = function (serviceFactory) {\n    var _serviceFactory$getSe2 = serviceFactory.getService([APM_SERVER, CONFIG_SERVICE, LOGGING_SERVICE, 'TransactionService']),\n        apmServer = _serviceFactory$getSe2[0],\n        configService = _serviceFactory$getSe2[1],\n        loggingService = _serviceFactory$getSe2[2],\n        transactionService = _serviceFactory$getSe2[3];\n\n    return new PerformanceMonitoring(apmServer, configService, loggingService, transactionService);\n  };\n}\n\nexport { registerServices };","map":{"version":3,"sources":["/home/harish/windo/phoenix/node_modules/@elastic/apm-rum-core/dist/es/performance-monitoring/index.js"],"names":["PerformanceMonitoring","TransactionService","APM_SERVER","CONFIG_SERVICE","LOGGING_SERVICE","serviceCreators","registerServices","serviceFactory","_serviceFactory$getSe","getService","loggingService","configService","_serviceFactory$getSe2","apmServer","transactionService"],"mappings":"AAAA,OAAOA,qBAAP,MAAkC,0BAAlC;AACA,OAAOC,kBAAP,MAA+B,uBAA/B;AACA,SAASC,UAAT,EAAqBC,cAArB,EAAqCC,eAArC,QAA4D,qBAA5D;AACA,SAASC,eAAT,QAAgC,2BAAhC;;AAEA,SAASC,gBAAT,GAA4B;AAC1BD,EAAAA,eAAe,CAAC,oBAAD,CAAf,GAAwC,UAAUE,cAAV,EAA0B;AAChE,QAAIC,qBAAqB,GAAGD,cAAc,CAACE,UAAf,CAA0B,CAACL,eAAD,EAAkBD,cAAlB,CAA1B,CAA5B;AAAA,QACIO,cAAc,GAAGF,qBAAqB,CAAC,CAAD,CAD1C;AAAA,QAEIG,aAAa,GAAGH,qBAAqB,CAAC,CAAD,CAFzC;;AAIA,WAAO,IAAIP,kBAAJ,CAAuBS,cAAvB,EAAuCC,aAAvC,CAAP;AACD,GAND;;AAQAN,EAAAA,eAAe,CAAC,uBAAD,CAAf,GAA2C,UAAUE,cAAV,EAA0B;AACnE,QAAIK,sBAAsB,GAAGL,cAAc,CAACE,UAAf,CAA0B,CAACP,UAAD,EAAaC,cAAb,EAA6BC,eAA7B,EAA8C,oBAA9C,CAA1B,CAA7B;AAAA,QACIS,SAAS,GAAGD,sBAAsB,CAAC,CAAD,CADtC;AAAA,QAEID,aAAa,GAAGC,sBAAsB,CAAC,CAAD,CAF1C;AAAA,QAGIF,cAAc,GAAGE,sBAAsB,CAAC,CAAD,CAH3C;AAAA,QAIIE,kBAAkB,GAAGF,sBAAsB,CAAC,CAAD,CAJ/C;;AAMA,WAAO,IAAIZ,qBAAJ,CAA0Ba,SAA1B,EAAqCF,aAArC,EAAoDD,cAApD,EAAoEI,kBAApE,CAAP;AACD,GARD;AASD;;AAED,SAASR,gBAAT","sourcesContent":["import PerformanceMonitoring from './performance-monitoring';\nimport TransactionService from './transaction-service';\nimport { APM_SERVER, CONFIG_SERVICE, LOGGING_SERVICE } from '../common/constants';\nimport { serviceCreators } from '../common/service-factory';\n\nfunction registerServices() {\n  serviceCreators['TransactionService'] = function (serviceFactory) {\n    var _serviceFactory$getSe = serviceFactory.getService([LOGGING_SERVICE, CONFIG_SERVICE]),\n        loggingService = _serviceFactory$getSe[0],\n        configService = _serviceFactory$getSe[1];\n\n    return new TransactionService(loggingService, configService);\n  };\n\n  serviceCreators['PerformanceMonitoring'] = function (serviceFactory) {\n    var _serviceFactory$getSe2 = serviceFactory.getService([APM_SERVER, CONFIG_SERVICE, LOGGING_SERVICE, 'TransactionService']),\n        apmServer = _serviceFactory$getSe2[0],\n        configService = _serviceFactory$getSe2[1],\n        loggingService = _serviceFactory$getSe2[2],\n        transactionService = _serviceFactory$getSe2[3];\n\n    return new PerformanceMonitoring(apmServer, configService, loggingService, transactionService);\n  };\n}\n\nexport { registerServices };"]},"metadata":{},"sourceType":"module"}