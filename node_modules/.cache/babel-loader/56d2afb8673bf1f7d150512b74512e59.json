{"ast":null,"code":"var _jsxFileName = \"/home/harish/windo/phoenix/src/components/profile/delivery/ShippingDelivery.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Formik, useField } from 'formik';\nimport { SideDrawer } from \"../../shared/SideDrawer\";\nimport { Button } from 'phoenix-components';\nimport cx from 'classnames';\nimport { useDesktop, useOpenPlans, useRefreshShop, useShop } from \"../../../contexts\";\nimport { Drawer } from \"../../shared/Drawer\";\nimport Loader from \"../../../services/loader\";\nimport SnackBar from \"../../../services/snackbar\";\nimport { useToggle } from \"../../../hooks/common\";\nimport { FooterButton } from \"../../common/FooterButton\";\nimport { useIsConditionalChargesEnabled } from \"../../../contexts/userContext\";\nimport { Becca } from \"../../../api\";\nimport PropTypes from 'prop-types';\nimport ShippingCard from \"./ShippingCard\";\nimport { DeliveryType } from \"./utils\";\nimport { getInitialValues, marhsalData } from \"./ShippingUtils\";\nimport styles from \"./ShippingDelivery.module.css\";\nexport function ShippingDelivery({\n  onTypeChange\n}) {\n  _s();\n\n  const refreshShop = useRefreshShop();\n  const isDesktop = useDesktop();\n  const [viewConfig, toggleConfig] = useToggle(true);\n  const [{\n    value: type\n  }] = useField('chargeType');\n  const isConditionalChargesEnabled = useIsConditionalChargesEnabled();\n  const {\n    delivery\n  } = useShop();\n  const openPlans = useOpenPlans();\n\n  const onSubmit = async values => {\n    try {\n      Loader.show();\n      await Becca.updateShop({\n        delivery: { ...delivery,\n          shippingModes: marhsalData(values)\n        }\n      });\n      await onTypeChange('shipping');\n      SnackBar.show('Successfully Updated');\n      refreshShop();\n      toggleConfig();\n    } catch (e) {\n      SnackBar.showError(e);\n    } finally {\n      Loader.hide();\n    }\n  };\n\n  if (type !== DeliveryType.SHIPPING) {\n    return null;\n  }\n\n  if (viewConfig) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: cx('flexBetween', styles.view),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      label: \"View Config\",\n      primary: false,\n      size: \"medium\",\n      onClick: isConditionalChargesEnabled ? toggleConfig : openPlans,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  const Component = isDesktop ? SideDrawer : Drawer;\n  return /*#__PURE__*/React.createElement(Component, {\n    title: \"Delivery Charge by Mode\",\n    backButton: true,\n    onClose: toggleConfig,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Formik, {\n    initialValues: getInitialValues(delivery === null || delivery === void 0 ? void 0 : delivery.shippingModes),\n    onSubmit: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }, ({\n    values,\n    submitForm\n  }) => /*#__PURE__*/React.createElement(React.Fragment, null, values === null || values === void 0 ? void 0 : values.map((mode, index) => /*#__PURE__*/React.createElement(ShippingCard, {\n    key: index,\n    index: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 15\n    }\n  })), isDesktop ? /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.btnDesk,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: submitForm,\n    bordered: true,\n    className: styles.dBtn,\n    label: \"save\",\n    size: \"large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 21\n    }\n  }))) : /*#__PURE__*/React.createElement(FooterButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    fullWidth: true,\n    bordered: false,\n    label: \"Save\",\n    size: \"large\",\n    onClick: submitForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 19\n    }\n  })))));\n}\n\n_s(ShippingDelivery, \"ySHbJMvDvd6N3/iBbTZbFeGqnZU=\", false, function () {\n  return [useRefreshShop, useDesktop, useToggle, useField, useIsConditionalChargesEnabled, useShop, useOpenPlans];\n});\n\n_c = ShippingDelivery;\nShippingDelivery.propTypes = {\n  onTypeChange: PropTypes.func.isRequired\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"ShippingDelivery\");","map":{"version":3,"sources":["/home/harish/windo/phoenix/src/components/profile/delivery/ShippingDelivery.jsx"],"names":["React","Formik","useField","SideDrawer","Button","cx","useDesktop","useOpenPlans","useRefreshShop","useShop","Drawer","Loader","SnackBar","useToggle","FooterButton","useIsConditionalChargesEnabled","Becca","PropTypes","ShippingCard","DeliveryType","getInitialValues","marhsalData","styles","ShippingDelivery","onTypeChange","refreshShop","isDesktop","viewConfig","toggleConfig","value","type","isConditionalChargesEnabled","delivery","openPlans","onSubmit","values","show","updateShop","shippingModes","e","showError","hide","SHIPPING","view","Component","submitForm","map","mode","index","btnDesk","dBtn","propTypes","func","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Formik, useField } from 'formik';\nimport { SideDrawer } from 'components/shared/SideDrawer';\nimport { Button } from 'phoenix-components';\nimport cx from 'classnames';\nimport {\n  useDesktop, useOpenPlans, useRefreshShop, useShop\n} from 'contexts';\nimport { Drawer } from 'components/shared/Drawer';\nimport Loader from 'services/loader';\nimport SnackBar from 'services/snackbar';\nimport { useToggle } from 'hooks/common';\nimport { FooterButton } from 'components/common/FooterButton';\nimport { useIsConditionalChargesEnabled } from 'contexts/userContext';\nimport { Becca } from 'api';\nimport PropTypes from 'prop-types';\nimport ShippingCard from './ShippingCard';\nimport { DeliveryType } from './utils';\nimport { getInitialValues, marhsalData } from './ShippingUtils';\nimport styles from './ShippingDelivery.module.css';\n\nexport function ShippingDelivery({ onTypeChange }) {\n  const refreshShop = useRefreshShop();\n  const isDesktop = useDesktop();\n  const [viewConfig, toggleConfig] = useToggle(true);\n  const [{ value: type }] = useField('chargeType');\n  const isConditionalChargesEnabled = useIsConditionalChargesEnabled();\n  const { delivery } = useShop();\n  const openPlans = useOpenPlans();\n\n  const onSubmit = async (values) => {\n    try {\n      Loader.show();\n      await Becca.updateShop({\n        delivery: {\n          ...delivery,\n          shippingModes: marhsalData(values),\n        }\n      });\n      await onTypeChange('shipping');\n      SnackBar.show('Successfully Updated');\n      refreshShop();\n      toggleConfig();\n    } catch (e) {\n      SnackBar.showError(e);\n    } finally {\n      Loader.hide();\n    }\n  };\n\n  if (type !== DeliveryType.SHIPPING) {\n    return null;\n  }\n\n  if (viewConfig) {\n    return (\n      <div className={cx('flexBetween', styles.view)}>\n        <Button\n          label=\"View Config\"\n          primary={false}\n          size=\"medium\"\n          onClick={isConditionalChargesEnabled ? toggleConfig : openPlans}\n        />\n      </div>\n    );\n  }\n\n  const Component = isDesktop ? SideDrawer : Drawer;\n  return (\n    <Component\n      title=\"Delivery Charge by Mode\"\n      backButton\n      onClose={toggleConfig}\n    >\n      <Formik\n        initialValues={getInitialValues(delivery?.shippingModes)}\n        onSubmit={onSubmit}\n      >\n        {({\n          values,\n          submitForm\n        }) => (\n          <>\n            {values?.map((mode, index) => (\n              <ShippingCard\n                key={index}\n                index={index}\n              />\n            ))}\n            {isDesktop\n              ? (\n                <div className={styles.btnDesk}>\n                  <div>\n                    <Button\n                      onClick={submitForm}\n                      bordered={true}\n                      className={styles.dBtn}\n                      label=\"save\"\n                      size=\"large\"\n                    />\n                  </div>\n                </div>\n              )\n              : (\n                <FooterButton>\n                  <Button\n                    fullWidth\n                    bordered={false}\n                    label=\"Save\"\n                    size=\"large\"\n                    onClick={submitForm}\n                  />\n                </FooterButton>\n              )}\n          </>\n        )}\n      </Formik>\n    </Component>\n  );\n}\n\nShippingDelivery.propTypes = {\n  onTypeChange: PropTypes.func.isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}