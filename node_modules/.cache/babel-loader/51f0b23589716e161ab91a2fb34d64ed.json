{"ast":null,"code":"import { isBrowser } from './utils';\n\nfunction isDefaultPort(port, protocol) {\n  switch (protocol) {\n    case 'http:':\n      return port === '80';\n\n    case 'https:':\n      return port === '443';\n  }\n\n  return true;\n}\n\nvar RULES = [['#', 'hash'], ['?', 'query'], ['/', 'path'], ['@', 'auth', 1], [NaN, 'host', undefined, 1]];\nvar PROTOCOL_REGEX = /^([a-z][a-z0-9.+-]*:)?(\\/\\/)?([\\S\\s]*)/i;\nexport var Url = function () {\n  function Url(url) {\n    var _this$extractProtocol = this.extractProtocol(url || ''),\n        protocol = _this$extractProtocol.protocol,\n        address = _this$extractProtocol.address,\n        slashes = _this$extractProtocol.slashes;\n\n    var relative = !protocol && !slashes;\n    var location = this.getLocation();\n    var instructions = RULES.slice();\n    address = address.replace('\\\\', '/');\n\n    if (!slashes) {\n      instructions[2] = [NaN, 'path'];\n    }\n\n    var index;\n\n    for (var i = 0; i < instructions.length; i++) {\n      var instruction = instructions[i];\n      var parse = instruction[0];\n      var key = instruction[1];\n\n      if (typeof parse === 'string') {\n        index = address.indexOf(parse);\n\n        if (~index) {\n          var instLength = instruction[2];\n\n          if (instLength) {\n            var newIndex = address.lastIndexOf(parse);\n            index = Math.max(index, newIndex);\n            this[key] = address.slice(0, index);\n            address = address.slice(index + instLength);\n          } else {\n            this[key] = address.slice(index);\n            address = address.slice(0, index);\n          }\n        }\n      } else {\n        this[key] = address;\n        address = '';\n      }\n\n      this[key] = this[key] || (relative && instruction[3] ? location[key] || '' : '');\n      if (instruction[3]) this[key] = this[key].toLowerCase();\n    }\n\n    if (relative && this.path.charAt(0) !== '/') {\n      this.path = '/' + this.path;\n    }\n\n    this.relative = relative;\n    this.protocol = protocol || location.protocol;\n    this.hostname = this.host;\n    this.port = '';\n\n    if (/:\\d+$/.test(this.host)) {\n      var value = this.host.split(':');\n      var port = value.pop();\n      var hostname = value.join(':');\n\n      if (isDefaultPort(port, this.protocol)) {\n        this.host = hostname;\n      } else {\n        this.port = port;\n      }\n\n      this.hostname = hostname;\n    }\n\n    this.origin = this.protocol && this.host && this.protocol !== 'file:' ? this.protocol + '//' + this.host : 'null';\n    this.href = this.toString();\n  }\n\n  var _proto = Url.prototype;\n\n  _proto.toString = function toString() {\n    var result = this.protocol;\n    result += '//';\n\n    if (this.auth) {\n      var REDACTED = '[REDACTED]';\n      var userpass = this.auth.split(':');\n      var username = userpass[0] ? REDACTED : '';\n      var password = userpass[1] ? ':' + REDACTED : '';\n      result += username + password + '@';\n    }\n\n    result += this.host;\n    result += this.path;\n    result += this.query;\n    result += this.hash;\n    return result;\n  };\n\n  _proto.getLocation = function getLocation() {\n    var globalVar = {};\n\n    if (isBrowser) {\n      globalVar = window;\n    }\n\n    return globalVar.location;\n  };\n\n  _proto.extractProtocol = function extractProtocol(url) {\n    var match = PROTOCOL_REGEX.exec(url);\n    return {\n      protocol: match[1] ? match[1].toLowerCase() : '',\n      slashes: !!match[2],\n      address: match[3]\n    };\n  };\n\n  return Url;\n}();\nexport function slugifyUrl(urlStr, depth) {\n  if (depth === void 0) {\n    depth = 2;\n  }\n\n  var parsedUrl = new Url(urlStr);\n  var query = parsedUrl.query,\n      path = parsedUrl.path;\n  var pathParts = path.substring(1).split('/');\n  var redactString = ':id';\n  var wildcard = '*';\n  var specialCharsRegex = /\\W|_/g;\n  var digitsRegex = /[0-9]/g;\n  var lowerCaseRegex = /[a-z]/g;\n  var upperCaseRegex = /[A-Z]/g;\n  var redactedParts = [];\n  var redactedBefore = false;\n\n  for (var index = 0; index < pathParts.length; index++) {\n    var part = pathParts[index];\n\n    if (redactedBefore || index > depth - 1) {\n      if (part) {\n        redactedParts.push(wildcard);\n      }\n\n      break;\n    }\n\n    var numberOfSpecialChars = (part.match(specialCharsRegex) || []).length;\n\n    if (numberOfSpecialChars >= 2) {\n      redactedParts.push(redactString);\n      redactedBefore = true;\n      continue;\n    }\n\n    var numberOfDigits = (part.match(digitsRegex) || []).length;\n\n    if (numberOfDigits > 3 || part.length > 3 && numberOfDigits / part.length >= 0.3) {\n      redactedParts.push(redactString);\n      redactedBefore = true;\n      continue;\n    }\n\n    var numberofUpperCase = (part.match(upperCaseRegex) || []).length;\n    var numberofLowerCase = (part.match(lowerCaseRegex) || []).length;\n    var lowerCaseRate = numberofLowerCase / part.length;\n    var upperCaseRate = numberofUpperCase / part.length;\n\n    if (part.length > 5 && (upperCaseRate > 0.3 && upperCaseRate < 0.6 || lowerCaseRate > 0.3 && lowerCaseRate < 0.6)) {\n      redactedParts.push(redactString);\n      redactedBefore = true;\n      continue;\n    }\n\n    part && redactedParts.push(part);\n  }\n\n  var redacted = '/' + (redactedParts.length >= 2 ? redactedParts.join('/') : redactedParts.join('')) + (query ? '?{query}' : '');\n  return redacted;\n}","map":{"version":3,"sources":["/home/harish/windo/phoenix/node_modules/@elastic/apm-rum-core/dist/es/common/url.js"],"names":["isBrowser","isDefaultPort","port","protocol","RULES","NaN","undefined","PROTOCOL_REGEX","Url","url","_this$extractProtocol","extractProtocol","address","slashes","relative","location","getLocation","instructions","slice","replace","index","i","length","instruction","parse","key","indexOf","instLength","newIndex","lastIndexOf","Math","max","toLowerCase","path","charAt","hostname","host","test","value","split","pop","join","origin","href","toString","_proto","prototype","result","auth","REDACTED","userpass","username","password","query","hash","globalVar","window","match","exec","slugifyUrl","urlStr","depth","parsedUrl","pathParts","substring","redactString","wildcard","specialCharsRegex","digitsRegex","lowerCaseRegex","upperCaseRegex","redactedParts","redactedBefore","part","push","numberOfSpecialChars","numberOfDigits","numberofUpperCase","numberofLowerCase","lowerCaseRate","upperCaseRate","redacted"],"mappings":"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","sourcesContent":["import { isBrowser } from './utils';\n\nfunction isDefaultPort(port, protocol) {\n  switch (protocol) {\n    case 'http:':\n      return port === '80';\n\n    case 'https:':\n      return port === '443';\n  }\n\n  return true;\n}\n\nvar RULES = [['#', 'hash'], ['?', 'query'], ['/', 'path'], ['@', 'auth', 1], [NaN, 'host', undefined, 1]];\nvar PROTOCOL_REGEX = /^([a-z][a-z0-9.+-]*:)?(\\/\\/)?([\\S\\s]*)/i;\nexport var Url = function () {\n  function Url(url) {\n    var _this$extractProtocol = this.extractProtocol(url || ''),\n        protocol = _this$extractProtocol.protocol,\n        address = _this$extractProtocol.address,\n        slashes = _this$extractProtocol.slashes;\n\n    var relative = !protocol && !slashes;\n    var location = this.getLocation();\n    var instructions = RULES.slice();\n    address = address.replace('\\\\', '/');\n\n    if (!slashes) {\n      instructions[2] = [NaN, 'path'];\n    }\n\n    var index;\n\n    for (var i = 0; i < instructions.length; i++) {\n      var instruction = instructions[i];\n      var parse = instruction[0];\n      var key = instruction[1];\n\n      if (typeof parse === 'string') {\n        index = address.indexOf(parse);\n\n        if (~index) {\n          var instLength = instruction[2];\n\n          if (instLength) {\n            var newIndex = address.lastIndexOf(parse);\n            index = Math.max(index, newIndex);\n            this[key] = address.slice(0, index);\n            address = address.slice(index + instLength);\n          } else {\n            this[key] = address.slice(index);\n            address = address.slice(0, index);\n          }\n        }\n      } else {\n        this[key] = address;\n        address = '';\n      }\n\n      this[key] = this[key] || (relative && instruction[3] ? location[key] || '' : '');\n      if (instruction[3]) this[key] = this[key].toLowerCase();\n    }\n\n    if (relative && this.path.charAt(0) !== '/') {\n      this.path = '/' + this.path;\n    }\n\n    this.relative = relative;\n    this.protocol = protocol || location.protocol;\n    this.hostname = this.host;\n    this.port = '';\n\n    if (/:\\d+$/.test(this.host)) {\n      var value = this.host.split(':');\n      var port = value.pop();\n      var hostname = value.join(':');\n\n      if (isDefaultPort(port, this.protocol)) {\n        this.host = hostname;\n      } else {\n        this.port = port;\n      }\n\n      this.hostname = hostname;\n    }\n\n    this.origin = this.protocol && this.host && this.protocol !== 'file:' ? this.protocol + '//' + this.host : 'null';\n    this.href = this.toString();\n  }\n\n  var _proto = Url.prototype;\n\n  _proto.toString = function toString() {\n    var result = this.protocol;\n    result += '//';\n\n    if (this.auth) {\n      var REDACTED = '[REDACTED]';\n      var userpass = this.auth.split(':');\n      var username = userpass[0] ? REDACTED : '';\n      var password = userpass[1] ? ':' + REDACTED : '';\n      result += username + password + '@';\n    }\n\n    result += this.host;\n    result += this.path;\n    result += this.query;\n    result += this.hash;\n    return result;\n  };\n\n  _proto.getLocation = function getLocation() {\n    var globalVar = {};\n\n    if (isBrowser) {\n      globalVar = window;\n    }\n\n    return globalVar.location;\n  };\n\n  _proto.extractProtocol = function extractProtocol(url) {\n    var match = PROTOCOL_REGEX.exec(url);\n    return {\n      protocol: match[1] ? match[1].toLowerCase() : '',\n      slashes: !!match[2],\n      address: match[3]\n    };\n  };\n\n  return Url;\n}();\nexport function slugifyUrl(urlStr, depth) {\n  if (depth === void 0) {\n    depth = 2;\n  }\n\n  var parsedUrl = new Url(urlStr);\n  var query = parsedUrl.query,\n      path = parsedUrl.path;\n  var pathParts = path.substring(1).split('/');\n  var redactString = ':id';\n  var wildcard = '*';\n  var specialCharsRegex = /\\W|_/g;\n  var digitsRegex = /[0-9]/g;\n  var lowerCaseRegex = /[a-z]/g;\n  var upperCaseRegex = /[A-Z]/g;\n  var redactedParts = [];\n  var redactedBefore = false;\n\n  for (var index = 0; index < pathParts.length; index++) {\n    var part = pathParts[index];\n\n    if (redactedBefore || index > depth - 1) {\n      if (part) {\n        redactedParts.push(wildcard);\n      }\n\n      break;\n    }\n\n    var numberOfSpecialChars = (part.match(specialCharsRegex) || []).length;\n\n    if (numberOfSpecialChars >= 2) {\n      redactedParts.push(redactString);\n      redactedBefore = true;\n      continue;\n    }\n\n    var numberOfDigits = (part.match(digitsRegex) || []).length;\n\n    if (numberOfDigits > 3 || part.length > 3 && numberOfDigits / part.length >= 0.3) {\n      redactedParts.push(redactString);\n      redactedBefore = true;\n      continue;\n    }\n\n    var numberofUpperCase = (part.match(upperCaseRegex) || []).length;\n    var numberofLowerCase = (part.match(lowerCaseRegex) || []).length;\n    var lowerCaseRate = numberofLowerCase / part.length;\n    var upperCaseRate = numberofUpperCase / part.length;\n\n    if (part.length > 5 && (upperCaseRate > 0.3 && upperCaseRate < 0.6 || lowerCaseRate > 0.3 && lowerCaseRate < 0.6)) {\n      redactedParts.push(redactString);\n      redactedBefore = true;\n      continue;\n    }\n\n    part && redactedParts.push(part);\n  }\n\n  var redacted = '/' + (redactedParts.length >= 2 ? redactedParts.join('/') : redactedParts.join('')) + (query ? '?{query}' : '');\n  return redacted;\n}"]},"metadata":{},"sourceType":"module"}