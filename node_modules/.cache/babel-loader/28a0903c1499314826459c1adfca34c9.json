{"ast":null,"code":"var _jsxFileName = \"/home/harish/windo/phoenix/src/containers/profile/paymentMode/paymentModeDesktop.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef } from 'react';\nimport { Button, Card } from 'phoenix-components';\nimport { Switch as DefaultSwitch } from 'phoenix-components';\nimport { Formik } from 'formik';\nimport { useRefreshShop, useShop } from \"../../../contexts/userContext\";\nimport { useToggle } from \"../../../hooks/common\";\nimport SnackBar from \"../../../services/snackbar\";\nimport cx from 'classnames';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { Becca } from \"../../../api\";\nimport Loader from \"../../../services/loader\";\nimport chevronLeftDesk from \"../../../assets/v2/common/chevronPrimaryLeft.svg\";\nimport { PaymentPartners } from \"../../lazy\";\nimport { isPayPalAllowed, isStripeAllowed } from \"../../../utils/countries\";\nimport Kbc from \"../../../components/knowBaseCards/KnowBaseCards.jsx\";\nimport Accordion from \"./Accordion\";\nimport CustomPayments from \"./CustomPayments\";\nimport styles from \"./paymentModeDesktop.module.css\";\nimport { getInitialValues, schema } from \"./utils\";\n\nfunction PaymentModeDesktop() {\n  _s();\n\n  const {\n    paymentModes,\n    country,\n    accounts = []\n  } = useShop();\n  const isIndia = (country === null || country === void 0 ? void 0 : country.toLowerCase()) === 'india';\n  const paymentsEnabled = accounts.filter(x => x.enabled).length > 0;\n  const refreshShop = useRefreshShop();\n  const history = useHistory();\n  const location = useLocation();\n  const stripeAllowed = isStripeAllowed(country);\n  const payPalAllowed = isPayPalAllowed(country);\n  const [openOnline, toggleOnline] = useToggle(false);\n  const [openManual, toggleManual] = useToggle(false);\n  const buttonRef = useRef();\n\n  const defaultSwitchManual = values => {\n    if (openManual) {\n      return true;\n    }\n\n    if (isIndia) {\n      return values.cod.enabled || values.custompayment.enabled;\n    }\n\n    if (stripeAllowed || payPalAllowed) {\n      return values.cod.enabled || values.custompayment.enabled;\n    }\n\n    return values.cod.enabled;\n  };\n\n  const toggleSave = () => {\n    if (buttonRef.current) {\n      buttonRef.current.firstElementChild.click();\n    }\n  };\n\n  const defaultSwitchManualChange = (setValue, val, isEmptyConfigured) => {\n    if (isIndia || stripeAllowed || payPalAllowed) {\n      setValue('cod.enabled', val);\n      setValue('custompayment.enabled', val);\n\n      if (isEmptyConfigured) {\n        setValue('custompayment.enabled', false);\n      }\n\n      toggleSave();\n      return;\n    }\n\n    setValue('cod.enabled', val);\n    toggleSave();\n  };\n\n  const defaultSwitchOnline = values => {\n    if (openOnline) {\n      return true;\n    }\n\n    if (isIndia || stripeAllowed || payPalAllowed) {\n      return values.online.enabled;\n    }\n\n    return values.custompayment.enabled;\n  };\n\n  const defaultSwitchOnlineChange = (setValue, val) => {\n    if (isIndia) {\n      setValue('online.enabled', val);\n      toggleSave();\n      return;\n    }\n\n    if (stripeAllowed || payPalAllowed) {\n      if (!paymentsEnabled && val) {\n        SnackBar.show('Please active atleast one partner', 'error');\n        return;\n      }\n\n      setValue('online.enabled', val);\n      toggleSave();\n      return;\n    }\n\n    setValue('custompayment.enabled', val);\n    toggleSave();\n  };\n\n  const onSubmit = async values => {\n    try {\n      var _location$state;\n\n      Loader.show();\n      await Becca.updateShop({\n        paymentModes: values\n      });\n      SnackBar.show('Payment settings updated successfully', 'success');\n      refreshShop();\n\n      if (location !== null && location !== void 0 && (_location$state = location.state) !== null && _location$state !== void 0 && _location$state.redirectTo) {\n        history.push(location.state.redirectTo);\n        return;\n      }\n    } catch (e) {\n      SnackBar.showError(e);\n    } finally {\n      Loader.hide();\n    }\n  };\n\n  const onCodSelect = setField => value => {\n    setField('cod.enabled', value);\n    toggleSave();\n  };\n\n  return /*#__PURE__*/React.createElement(Formik, {\n    validationSchema: schema,\n    initialValues: getInitialValues(paymentModes),\n    onSubmit: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 5\n    }\n  }, ({\n    values,\n    setFieldValue,\n    submitForm\n  }) => /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    onClick: () => history.goBack(),\n    className: styles.maintitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: styles.backIconForDesktop,\n    src: chevronLeftDesk,\n    alt: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }\n  }, \"\\xA0\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }\n  }, \"\\xA0\"), \"Payment Settings\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.main,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.heading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }\n  }, \"Choose Payment Modes\"), /*#__PURE__*/React.createElement(Card, {\n    className: cx(styles.mode),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: cx(styles.cod, {\n      [styles.active]: defaultSwitchOnline(values)\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.modeName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 17\n    }\n  }, \"Online\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(DefaultSwitch, {\n    active: defaultSwitchOnline(values),\n    onChange: (e, val) => {\n      defaultSwitchOnlineChange(setFieldValue, val);\n      toggleOnline();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 19\n    }\n  }))), !stripeAllowed && !payPalAllowed && !isIndia && /*#__PURE__*/React.createElement(Accordion, {\n    label: \"Direct Payments\",\n    name: \"custompayment.enabled\",\n    openDefault: values.custompayment.configured.length === 0,\n    onChange: e => {\n      if (values.custompayment.configured.length === 0 && !values.cod.enabled && e) {\n        SnackBar.show('Please add atleast one custom payment', 'error');\n        return;\n      }\n\n      setFieldValue('custompayment.enabled', e);\n      toggleSave();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(CustomPayments, {\n    toggleSave: toggleSave,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 19\n    }\n  })), defaultSwitchOnline(values) && (stripeAllowed || payPalAllowed || isIndia) && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(PaymentPartners, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 19\n    }\n  }))), /*#__PURE__*/React.createElement(Card, {\n    className: cx(styles.mode),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: cx(styles.cod, {\n      [styles.active]: defaultSwitchManual(values)\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.modeName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 17\n    }\n  }, \"Manual\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(DefaultSwitch, {\n    active: defaultSwitchManual(values),\n    onChange: (e, val) => {\n      const isEmptyConfigured = values.custompayment.configured.length === 0;\n      defaultSwitchManualChange(setFieldValue, val, isEmptyConfigured);\n      toggleManual();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 19\n    }\n  }))), defaultSwitchManual(values) && /*#__PURE__*/React.createElement(React.Fragment, null, (stripeAllowed || payPalAllowed || isIndia) && /*#__PURE__*/React.createElement(Accordion, {\n    label: \"Custom Payments\",\n    name: \"custompayment.enabled\",\n    openDefault: values.custompayment.configured.length === 0,\n    onChange: e => {\n      if (values.custompayment.configured.length === 0 && e) {\n        SnackBar.show('Please add atleast one custom payment', 'error');\n        return;\n      }\n\n      if (values.custompayment.configured.filter(x => x.status === 'live').length === 0 && e) {\n        SnackBar.show('Please add atleast one custom payment', 'error');\n        return;\n      }\n\n      setFieldValue('custompayment.enabled', e);\n      toggleSave();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(CustomPayments, {\n    toggleSave: toggleSave,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 23\n    }\n  })), /*#__PURE__*/React.createElement(Accordion, {\n    label: \"Cash\",\n    name: \"cod.enabled\",\n    onChange: onCodSelect(setFieldValue),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 19\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flexCenter fullWidth\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Kbc, {\n    type: \"enablePayments\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    ref: buttonRef,\n    className: styles.button,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    size: \"large\",\n    label: \"Save\",\n    onClick: async () => {\n      try {\n        await schema.validate(values, {\n          abortEarly: true\n        }); // submit form to show field errors\n\n        submitForm();\n      } catch (e) {\n        if (e.value.custompayment.enabled && e.value.custompayment.configured.length === 0) {\n          SnackBar.show('Please add atleast one custom payment', 'error');\n          return;\n        }\n\n        SnackBar.show('Please add all required fields', 'error');\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 13\n    }\n  }))));\n}\n\n_s(PaymentModeDesktop, \"+UUbQSopaFMX4OnUnDyTIdR7t1o=\", false, function () {\n  return [useShop, useRefreshShop, useHistory, useLocation, useToggle, useToggle];\n});\n\n_c = PaymentModeDesktop;\nPaymentModeDesktop.propTypes = {};\nPaymentModeDesktop.defaultProps = {};\nexport default PaymentModeDesktop;\n\nvar _c;\n\n$RefreshReg$(_c, \"PaymentModeDesktop\");","map":{"version":3,"sources":["/home/harish/windo/phoenix/src/containers/profile/paymentMode/paymentModeDesktop.jsx"],"names":["React","useRef","Button","Card","Switch","DefaultSwitch","Formik","useRefreshShop","useShop","useToggle","SnackBar","cx","useHistory","useLocation","Becca","Loader","PaymentPartners","isPayPalAllowed","isStripeAllowed","Kbc","Accordion","CustomPayments","styles","getInitialValues","schema","PaymentModeDesktop","paymentModes","country","accounts","isIndia","toLowerCase","paymentsEnabled","filter","x","enabled","length","refreshShop","history","location","stripeAllowed","payPalAllowed","openOnline","toggleOnline","openManual","toggleManual","buttonRef","defaultSwitchManual","values","cod","custompayment","toggleSave","current","firstElementChild","click","defaultSwitchManualChange","setValue","val","isEmptyConfigured","defaultSwitchOnline","online","defaultSwitchOnlineChange","show","onSubmit","updateShop","state","redirectTo","push","e","showError","hide","onCodSelect","setField","value","setFieldValue","submitForm","container","goBack","maintitle","backIconForDesktop","chevronLeftDesk","main","heading","mode","active","modeName","configured","status","button","validate","abortEarly","propTypes","defaultProps"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;AACA,SACEC,MADF,EACUC,IADV,QAEO,oBAFP;AAGA,SAASC,MAAM,IAAIC,aAAnB,QAAwC,oBAAxC;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SACEC,cADF,EAEEC,OAFF;AAIA,SAASC,SAAT;AACA,OAAOC,QAAP;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,SAASC,UAAT,EAAqBC,WAArB,QAAwC,kBAAxC;AACA,SAASC,KAAT;AACA,OAAOC,MAAP;;AAEA,SAASC,eAAT;AACA,SAASC,eAAT,EAA0BC,eAA1B;AACA,OAAOC,GAAP;AACA,OAAOC,SAAP;AACA,OAAOC,cAAP;AACA,OAAOC,MAAP;AACA,SAASC,gBAAT,EAA2BC,MAA3B;;AAEA,SAASC,kBAAT,GAA8B;AAAA;;AAC5B,QAAM;AACJC,IAAAA,YADI;AACUC,IAAAA,OADV;AACmBC,IAAAA,QAAQ,GAAG;AAD9B,MAEFpB,OAAO,EAFX;AAGA,QAAMqB,OAAO,GAAG,CAAAF,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEG,WAAT,QAA2B,OAA3C;AACA,QAAMC,eAAe,GAAGH,QAAQ,CAACI,MAAT,CAAgBC,CAAC,IAAIA,CAAC,CAACC,OAAvB,EAAgCC,MAAhC,GAAyC,CAAjE;AACA,QAAMC,WAAW,GAAG7B,cAAc,EAAlC;AACA,QAAM8B,OAAO,GAAGzB,UAAU,EAA1B;AACA,QAAM0B,QAAQ,GAAGzB,WAAW,EAA5B;AACA,QAAM0B,aAAa,GAAGrB,eAAe,CAACS,OAAD,CAArC;AACA,QAAMa,aAAa,GAAGvB,eAAe,CAACU,OAAD,CAArC;AACA,QAAM,CAACc,UAAD,EAAaC,YAAb,IAA6BjC,SAAS,CAAC,KAAD,CAA5C;AACA,QAAM,CAACkC,UAAD,EAAaC,YAAb,IAA6BnC,SAAS,CAAC,KAAD,CAA5C;AACA,QAAMoC,SAAS,GAAG5C,MAAM,EAAxB;;AAEA,QAAM6C,mBAAmB,GAAIC,MAAD,IAAY;AACtC,QAAIJ,UAAJ,EAAgB;AACd,aAAO,IAAP;AACD;;AACD,QAAId,OAAJ,EAAa;AACX,aAAOkB,MAAM,CAACC,GAAP,CAAWd,OAAX,IAAsBa,MAAM,CAACE,aAAP,CAAqBf,OAAlD;AACD;;AACD,QAAIK,aAAa,IAAIC,aAArB,EAAoC;AAClC,aAAOO,MAAM,CAACC,GAAP,CAAWd,OAAX,IAAsBa,MAAM,CAACE,aAAP,CAAqBf,OAAlD;AACD;;AACD,WAAOa,MAAM,CAACC,GAAP,CAAWd,OAAlB;AACD,GAXD;;AAaA,QAAMgB,UAAU,GAAG,MAAM;AACvB,QAAIL,SAAS,CAACM,OAAd,EAAuB;AACrBN,MAAAA,SAAS,CAACM,OAAV,CAAkBC,iBAAlB,CAAoCC,KAApC;AACD;AACF,GAJD;;AAMA,QAAMC,yBAAyB,GAAG,CAACC,QAAD,EAAWC,GAAX,EAAgBC,iBAAhB,KAAsC;AACtE,QAAI5B,OAAO,IAAIU,aAAX,IAA4BC,aAAhC,EAA+C;AAC7Ce,MAAAA,QAAQ,CAAC,aAAD,EAAgBC,GAAhB,CAAR;AACAD,MAAAA,QAAQ,CAAC,uBAAD,EAA0BC,GAA1B,CAAR;;AACA,UAAIC,iBAAJ,EAAuB;AACrBF,QAAAA,QAAQ,CAAC,uBAAD,EAA0B,KAA1B,CAAR;AACD;;AACDL,MAAAA,UAAU;AACV;AACD;;AAEDK,IAAAA,QAAQ,CAAC,aAAD,EAAgBC,GAAhB,CAAR;AACAN,IAAAA,UAAU;AACX,GAbD;;AAeA,QAAMQ,mBAAmB,GAAIX,MAAD,IAAY;AACtC,QAAIN,UAAJ,EAAgB;AACd,aAAO,IAAP;AACD;;AACD,QAAIZ,OAAO,IAAIU,aAAX,IAA4BC,aAAhC,EAA+C;AAC7C,aAAOO,MAAM,CAACY,MAAP,CAAczB,OAArB;AACD;;AACD,WAAOa,MAAM,CAACE,aAAP,CAAqBf,OAA5B;AACD,GARD;;AAUA,QAAM0B,yBAAyB,GAAG,CAACL,QAAD,EAAWC,GAAX,KAAmB;AACnD,QAAI3B,OAAJ,EAAa;AACX0B,MAAAA,QAAQ,CAAC,gBAAD,EAAmBC,GAAnB,CAAR;AACAN,MAAAA,UAAU;AACV;AACD;;AACD,QAAIX,aAAa,IAAIC,aAArB,EAAoC;AAClC,UAAI,CAACT,eAAD,IAAoByB,GAAxB,EAA6B;AAC3B9C,QAAAA,QAAQ,CAACmD,IAAT,CAAc,mCAAd,EAAmD,OAAnD;AACA;AACD;;AACDN,MAAAA,QAAQ,CAAC,gBAAD,EAAmBC,GAAnB,CAAR;AACAN,MAAAA,UAAU;AACV;AACD;;AACDK,IAAAA,QAAQ,CAAC,uBAAD,EAA0BC,GAA1B,CAAR;AACAN,IAAAA,UAAU;AACX,GAjBD;;AAmBA,QAAMY,QAAQ,GAAG,MAAOf,MAAP,IAAkB;AACjC,QAAI;AAAA;;AACFhC,MAAAA,MAAM,CAAC8C,IAAP;AACA,YAAM/C,KAAK,CAACiD,UAAN,CAAiB;AACrBrC,QAAAA,YAAY,EAAEqB;AADO,OAAjB,CAAN;AAGArC,MAAAA,QAAQ,CAACmD,IAAT,CAAc,uCAAd,EAAuD,SAAvD;AACAzB,MAAAA,WAAW;;AACX,UAAIE,QAAJ,aAAIA,QAAJ,kCAAIA,QAAQ,CAAE0B,KAAd,4CAAI,gBAAiBC,UAArB,EAAiC;AAC/B5B,QAAAA,OAAO,CAAC6B,IAAR,CAAa5B,QAAQ,CAAC0B,KAAT,CAAeC,UAA5B;AACA;AACD;AACF,KAXD,CAWE,OAAOE,CAAP,EAAU;AACVzD,MAAAA,QAAQ,CAAC0D,SAAT,CAAmBD,CAAnB;AACD,KAbD,SAaU;AACRpD,MAAAA,MAAM,CAACsD,IAAP;AACD;AACF,GAjBD;;AAmBA,QAAMC,WAAW,GAAIC,QAAD,IAAeC,KAAD,IAAW;AAC3CD,IAAAA,QAAQ,CAAC,aAAD,EAAgBC,KAAhB,CAAR;AACAtB,IAAAA,UAAU;AACX,GAHD;;AAKA,sBACE,oBAAC,MAAD;AACE,IAAA,gBAAgB,EAAE1B,MADpB;AAEE,IAAA,aAAa,EAAED,gBAAgB,CAACG,YAAD,CAFjC;AAGE,IAAA,QAAQ,EAAEoC,QAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKG,CAAC;AACAf,IAAAA,MADA;AAEA0B,IAAAA,aAFA;AAGAC,IAAAA;AAHA,GAAD,kBAKC;AAAK,IAAA,SAAS,EAAEpD,MAAM,CAACqD,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,OAAO,EAAE,MAAMtC,OAAO,CAACuC,MAAR,EAApB;AAAsC,IAAA,SAAS,EAAEtD,MAAM,CAACuD,SAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAEvD,MAAM,CAACwD,kBAAvB;AAA2C,IAAA,GAAG,EAAEC,eAAhD;AAAiE,IAAA,GAAG,EAAC,EAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF,qBADF,eAOE;AAAK,IAAA,SAAS,EAAEzD,MAAM,CAAC0D,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAE1D,MAAM,CAAC2D,OAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADF,eAEE,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAEtE,EAAE,CAACW,MAAM,CAAC4D,IAAR,CAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAEvE,EAAE,CAACW,MAAM,CAAC0B,GAAR,EAAa;AAAE,OAAC1B,MAAM,CAAC6D,MAAR,GAAiBzB,mBAAmB,CAACX,MAAD;AAAtC,KAAb,CAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAEzB,MAAM,CAAC8D,QAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,aAAD;AACE,IAAA,MAAM,EAAE1B,mBAAmB,CAACX,MAAD,CAD7B;AAEE,IAAA,QAAQ,EAAE,CAACoB,CAAD,EAAIX,GAAJ,KAAY;AACpBI,MAAAA,yBAAyB,CAACa,aAAD,EAAgBjB,GAAhB,CAAzB;AACAd,MAAAA,YAAY;AACb,KALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFF,CADF,EAaG,CAACH,aAAD,IAAkB,CAACC,aAAnB,IAAoC,CAACX,OAArC,iBACC,oBAAC,SAAD;AACE,IAAA,KAAK,EAAC,iBADR;AAEE,IAAA,IAAI,EAAC,uBAFP;AAGE,IAAA,WAAW,EAAEkB,MAAM,CAACE,aAAP,CAAqBoC,UAArB,CAAgClD,MAAhC,KAA2C,CAH1D;AAIE,IAAA,QAAQ,EAAGgC,CAAD,IAAO;AACf,UAAIpB,MAAM,CAACE,aAAP,CAAqBoC,UAArB,CAAgClD,MAAhC,KAA2C,CAA3C,IAAgD,CAACY,MAAM,CAACC,GAAP,CAAWd,OAA5D,IAAuEiC,CAA3E,EAA8E;AAC5EzD,QAAAA,QAAQ,CAACmD,IAAT,CAAc,uCAAd,EAAuD,OAAvD;AACA;AACD;;AACDY,MAAAA,aAAa,CAAC,uBAAD,EAA0BN,CAA1B,CAAb;AACAjB,MAAAA,UAAU;AACX,KAXH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAaE,oBAAC,cAAD;AAAgB,IAAA,UAAU,EAAEA,UAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbF,CAdJ,EA8BIQ,mBAAmB,CAACX,MAAD,CAApB,KAAkCR,aAAa,IAAIC,aAAjB,IAAkCX,OAApE,kBACC,uDACE,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CA/BJ,CAFF,eAsCE,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAElB,EAAE,CAACW,MAAM,CAAC4D,IAAR,CAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAEvE,EAAE,CAACW,MAAM,CAAC0B,GAAR,EAAa;AAAE,OAAC1B,MAAM,CAAC6D,MAAR,GAAiBrC,mBAAmB,CAACC,MAAD;AAAtC,KAAb,CAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAEzB,MAAM,CAAC8D,QAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,aAAD;AACE,IAAA,MAAM,EAAEtC,mBAAmB,CAACC,MAAD,CAD7B;AAEE,IAAA,QAAQ,EAAE,CAACoB,CAAD,EAAIX,GAAJ,KAAY;AACpB,YAAMC,iBAAiB,GAAGV,MAAM,CAACE,aAAP,CAAqBoC,UAArB,CAAgClD,MAAhC,KAA2C,CAArE;AACAmB,MAAAA,yBAAyB,CAACmB,aAAD,EAAgBjB,GAAhB,EAAqBC,iBAArB,CAAzB;AACAb,MAAAA,YAAY;AACb,KANH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFF,CADF,EAcGE,mBAAmB,CAACC,MAAD,CAAnB,iBACC,0CACG,CAACR,aAAa,IAAIC,aAAjB,IAAkCX,OAAnC,kBACC,oBAAC,SAAD;AACE,IAAA,KAAK,EAAC,iBADR;AAEE,IAAA,IAAI,EAAC,uBAFP;AAGE,IAAA,WAAW,EAAEkB,MAAM,CAACE,aAAP,CAAqBoC,UAArB,CAAgClD,MAAhC,KAA2C,CAH1D;AAIE,IAAA,QAAQ,EAAGgC,CAAD,IAAO;AACf,UAAIpB,MAAM,CAACE,aAAP,CAAqBoC,UAArB,CAAgClD,MAAhC,KAA2C,CAA3C,IAAgDgC,CAApD,EAAuD;AACrDzD,QAAAA,QAAQ,CAACmD,IAAT,CAAc,uCAAd,EAAuD,OAAvD;AACA;AACD;;AACD,UAAId,MAAM,CAACE,aAAP,CAAqBoC,UAArB,CAAgCrD,MAAhC,CAAuCC,CAAC,IAAIA,CAAC,CAACqD,MAAF,KAAa,MAAzD,EAAiEnD,MAAjE,KAA4E,CAA5E,IAAiFgC,CAArF,EAAwF;AACtFzD,QAAAA,QAAQ,CAACmD,IAAT,CAAc,uCAAd,EAAuD,OAAvD;AACA;AACD;;AACDY,MAAAA,aAAa,CAAC,uBAAD,EAA0BN,CAA1B,CAAb;AACAjB,MAAAA,UAAU;AACX,KAfH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAiBE,oBAAC,cAAD;AAAgB,IAAA,UAAU,EAAEA,UAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAjBF,CAFJ,eAuBE,oBAAC,SAAD;AACE,IAAA,KAAK,EAAC,MADR;AAEE,IAAA,IAAI,EAAC,aAFP;AAGE,IAAA,QAAQ,EAAEoB,WAAW,CAACG,aAAD,CAHvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAvBF,CAfJ,CAtCF,CAPF,eA6FE;AAAK,IAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,GAAD;AACE,IAAA,IAAI,EAAC,gBADP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CA7FF,eAkGE;AAAK,IAAA,GAAG,EAAE5B,SAAV;AAAqB,IAAA,SAAS,EAAEvB,MAAM,CAACiE,MAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,KAAK,EAAC,MAFR;AAGE,IAAA,OAAO,EAAE,YAAY;AACnB,UAAI;AACF,cAAM/D,MAAM,CAACgE,QAAP,CAAgBzC,MAAhB,EAAwB;AAC5B0C,UAAAA,UAAU,EAAE;AADgB,SAAxB,CAAN,CADE,CAIF;;AACAf,QAAAA,UAAU;AACX,OAND,CAME,OAAOP,CAAP,EAAU;AACV,YAAIA,CAAC,CAACK,KAAF,CAAQvB,aAAR,CAAsBf,OAAtB,IAAiCiC,CAAC,CAACK,KAAF,CAAQvB,aAAR,CAAsBoC,UAAtB,CAAiClD,MAAjC,KAA4C,CAAjF,EAAoF;AAClFzB,UAAAA,QAAQ,CAACmD,IAAT,CAAc,uCAAd,EAAuD,OAAvD;AACA;AACD;;AACDnD,QAAAA,QAAQ,CAACmD,IAAT,CAAc,gCAAd,EAAgD,OAAhD;AACD;AACF,KAjBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAlGF,CAVJ,CADF;AAsID;;GA5OQpC,kB;UAGHjB,O,EAGgBD,c,EACJK,U,EACCC,W,EAGkBJ,S,EACAA,S;;;KAZ5BgB,kB;AA8OTA,kBAAkB,CAACiE,SAAnB,GAA+B,EAA/B;AAEAjE,kBAAkB,CAACkE,YAAnB,GAAkC,EAAlC;AAEA,eAAelE,kBAAf","sourcesContent":["import React, { useRef } from 'react';\nimport {\n  Button, Card\n} from 'phoenix-components';\nimport { Switch as DefaultSwitch } from 'phoenix-components';\nimport { Formik } from 'formik';\nimport {\n  useRefreshShop,\n  useShop\n} from 'contexts/userContext';\nimport { useToggle } from 'hooks/common';\nimport SnackBar from 'services/snackbar';\nimport cx from 'classnames';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { Becca } from 'api';\nimport Loader from 'services/loader';\nimport chevronLeftDesk from 'assets/v2/common/chevronPrimaryLeft.svg';\nimport { PaymentPartners } from 'containers/lazy';\nimport { isPayPalAllowed, isStripeAllowed } from 'utils/countries';\nimport Kbc from 'components/knowBaseCards/KnowBaseCards.jsx';\nimport Accordion from './Accordion';\nimport CustomPayments from './CustomPayments';\nimport styles from './paymentModeDesktop.module.css';\nimport { getInitialValues, schema } from './utils';\n\nfunction PaymentModeDesktop() {\n  const {\n    paymentModes, country, accounts = []\n  } = useShop();\n  const isIndia = country?.toLowerCase() === 'india';\n  const paymentsEnabled = accounts.filter(x => x.enabled).length > 0;\n  const refreshShop = useRefreshShop();\n  const history = useHistory();\n  const location = useLocation();\n  const stripeAllowed = isStripeAllowed(country);\n  const payPalAllowed = isPayPalAllowed(country);\n  const [openOnline, toggleOnline] = useToggle(false);\n  const [openManual, toggleManual] = useToggle(false);\n  const buttonRef = useRef();\n\n  const defaultSwitchManual = (values) => {\n    if (openManual) {\n      return true;\n    }\n    if (isIndia) {\n      return values.cod.enabled || values.custompayment.enabled;\n    }\n    if (stripeAllowed || payPalAllowed) {\n      return values.cod.enabled || values.custompayment.enabled;\n    }\n    return values.cod.enabled;\n  };\n\n  const toggleSave = () => {\n    if (buttonRef.current) {\n      buttonRef.current.firstElementChild.click();\n    }\n  };\n\n  const defaultSwitchManualChange = (setValue, val, isEmptyConfigured) => {\n    if (isIndia || stripeAllowed || payPalAllowed) {\n      setValue('cod.enabled', val);\n      setValue('custompayment.enabled', val);\n      if (isEmptyConfigured) {\n        setValue('custompayment.enabled', false);\n      }\n      toggleSave();\n      return;\n    }\n\n    setValue('cod.enabled', val);\n    toggleSave();\n  };\n\n  const defaultSwitchOnline = (values) => {\n    if (openOnline) {\n      return true;\n    }\n    if (isIndia || stripeAllowed || payPalAllowed) {\n      return values.online.enabled;\n    }\n    return values.custompayment.enabled;\n  };\n\n  const defaultSwitchOnlineChange = (setValue, val) => {\n    if (isIndia) {\n      setValue('online.enabled', val);\n      toggleSave();\n      return;\n    }\n    if (stripeAllowed || payPalAllowed) {\n      if (!paymentsEnabled && val) {\n        SnackBar.show('Please active atleast one partner', 'error');\n        return;\n      }\n      setValue('online.enabled', val);\n      toggleSave();\n      return;\n    }\n    setValue('custompayment.enabled', val);\n    toggleSave();\n  };\n\n  const onSubmit = async (values) => {\n    try {\n      Loader.show();\n      await Becca.updateShop({\n        paymentModes: values,\n      });\n      SnackBar.show('Payment settings updated successfully', 'success');\n      refreshShop();\n      if (location?.state?.redirectTo) {\n        history.push(location.state.redirectTo);\n        return;\n      }\n    } catch (e) {\n      SnackBar.showError(e);\n    } finally {\n      Loader.hide();\n    }\n  };\n\n  const onCodSelect = (setField) => (value) => {\n    setField('cod.enabled', value);\n    toggleSave();\n  };\n\n  return (\n    <Formik\n      validationSchema={schema}\n      initialValues={getInitialValues(paymentModes)}\n      onSubmit={onSubmit}\n    >\n      {({\n        values,\n        setFieldValue,\n        submitForm\n      }) => (\n        <div className={styles.container}>\n          <div onClick={() => history.goBack()} className={styles.maintitle}>\n            <img className={styles.backIconForDesktop} src={chevronLeftDesk} alt=\"\" />\n            <div>&nbsp;</div>\n            <div>&nbsp;</div>\n            Payment Settings\n          </div>\n          <div className={styles.main}>\n            <div className={styles.heading}>Choose Payment Modes</div>\n            <Card className={cx(styles.mode)}>\n              <div className={cx(styles.cod, { [styles.active]: defaultSwitchOnline(values) })}>\n                <div className={styles.modeName}>Online</div>\n                <div>\n                  <DefaultSwitch\n                    active={defaultSwitchOnline(values)}\n                    onChange={(e, val) => {\n                      defaultSwitchOnlineChange(setFieldValue, val);\n                      toggleOnline();\n                    }}\n                  />\n                </div>\n              </div>\n              {!stripeAllowed && !payPalAllowed && !isIndia && (\n                <Accordion\n                  label=\"Direct Payments\"\n                  name=\"custompayment.enabled\"\n                  openDefault={values.custompayment.configured.length === 0}\n                  onChange={(e) => {\n                    if (values.custompayment.configured.length === 0 && !values.cod.enabled && e) {\n                      SnackBar.show('Please add atleast one custom payment', 'error');\n                      return;\n                    }\n                    setFieldValue('custompayment.enabled', e);\n                    toggleSave();\n                  }}\n                >\n                  <CustomPayments toggleSave={toggleSave} />\n                </Accordion>\n              )}\n              {(defaultSwitchOnline(values)) && (stripeAllowed || payPalAllowed || isIndia) && (\n                <>\n                  <PaymentPartners />\n                </>\n              )}\n            </Card>\n            <Card className={cx(styles.mode)}>\n              <div className={cx(styles.cod, { [styles.active]: defaultSwitchManual(values) })}>\n                <div className={styles.modeName}>Manual</div>\n                <div>\n                  <DefaultSwitch\n                    active={defaultSwitchManual(values)}\n                    onChange={(e, val) => {\n                      const isEmptyConfigured = values.custompayment.configured.length === 0;\n                      defaultSwitchManualChange(setFieldValue, val, isEmptyConfigured);\n                      toggleManual();\n                    }}\n                  />\n                </div>\n              </div>\n              {defaultSwitchManual(values) && (\n                <>\n                  {(stripeAllowed || payPalAllowed || isIndia) && (\n                    <Accordion\n                      label=\"Custom Payments\"\n                      name=\"custompayment.enabled\"\n                      openDefault={values.custompayment.configured.length === 0}\n                      onChange={(e) => {\n                        if (values.custompayment.configured.length === 0 && e) {\n                          SnackBar.show('Please add atleast one custom payment', 'error');\n                          return;\n                        }\n                        if (values.custompayment.configured.filter(x => x.status === 'live').length === 0 && e) {\n                          SnackBar.show('Please add atleast one custom payment', 'error');\n                          return;\n                        }\n                        setFieldValue('custompayment.enabled', e);\n                        toggleSave();\n                      }}\n                    >\n                      <CustomPayments toggleSave={toggleSave} />\n                    </Accordion>\n\n                  )}\n                  <Accordion\n                    label=\"Cash\"\n                    name=\"cod.enabled\"\n                    onChange={onCodSelect(setFieldValue)}\n                  >\n                  </Accordion>\n                </>\n              )}\n            </Card>\n          </div>\n          <div className=\"flexCenter fullWidth\">\n            <Kbc\n              type=\"enablePayments\"\n            />\n          </div>\n          <div ref={buttonRef} className={styles.button}>\n            <Button\n              size=\"large\"\n              label=\"Save\"\n              onClick={async () => {\n                try {\n                  await schema.validate(values, {\n                    abortEarly: true\n                  });\n                  // submit form to show field errors\n                  submitForm();\n                } catch (e) {\n                  if (e.value.custompayment.enabled && e.value.custompayment.configured.length === 0) {\n                    SnackBar.show('Please add atleast one custom payment', 'error');\n                    return;\n                  }\n                  SnackBar.show('Please add all required fields', 'error');\n                }\n              }}\n            />\n          </div>\n        </div>\n      )}\n    </Formik>\n  );\n}\n\nPaymentModeDesktop.propTypes = {};\n\nPaymentModeDesktop.defaultProps = {};\n\nexport default PaymentModeDesktop;\n"]},"metadata":{},"sourceType":"module"}