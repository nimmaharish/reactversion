{"ast":null,"code":"import { getDuration, PERF } from '../common/utils';\nimport { PAGE_LOAD, TRUNCATED_TYPE } from '../common/constants';\nvar pageLoadBreakdowns = [['domainLookupStart', 'domainLookupEnd', 'DNS'], ['connectStart', 'connectEnd', 'TCP'], ['requestStart', 'responseStart', 'Request'], ['responseStart', 'responseEnd', 'Response'], ['domLoading', 'domComplete', 'Processing'], ['loadEventStart', 'loadEventEnd', 'Load']];\n\nfunction getValue(value) {\n  return {\n    value: value\n  };\n}\n\nfunction calculateSelfTime(transaction) {\n  var spans = transaction.spans,\n      _start = transaction._start,\n      _end = transaction._end;\n\n  if (spans.length === 0) {\n    return transaction.duration();\n  }\n\n  spans.sort(function (span1, span2) {\n    return span1._start - span2._start;\n  });\n  var span = spans[0];\n  var spanEnd = span._end;\n  var spanStart = span._start;\n  var lastContinuousEnd = spanEnd;\n  var selfTime = spanStart - _start;\n\n  for (var i = 1; i < spans.length; i++) {\n    span = spans[i];\n    spanStart = span._start;\n    spanEnd = span._end;\n\n    if (spanStart > lastContinuousEnd) {\n      selfTime += spanStart - lastContinuousEnd;\n      lastContinuousEnd = spanEnd;\n    } else if (spanEnd > lastContinuousEnd) {\n      lastContinuousEnd = spanEnd;\n    }\n  }\n\n  if (lastContinuousEnd < _end) {\n    selfTime += _end - lastContinuousEnd;\n  }\n\n  return selfTime;\n}\n\nfunction groupSpans(transaction) {\n  var spanMap = {};\n  var transactionSelfTime = calculateSelfTime(transaction);\n  spanMap['app'] = {\n    count: 1,\n    duration: transactionSelfTime\n  };\n  var spans = transaction.spans;\n\n  for (var i = 0; i < spans.length; i++) {\n    var span = spans[i];\n    var duration = span.duration();\n\n    if (duration === 0 || duration == null) {\n      continue;\n    }\n\n    var type = span.type,\n        subtype = span.subtype;\n    var key = type.replace(TRUNCATED_TYPE, '');\n\n    if (subtype) {\n      key += '.' + subtype;\n    }\n\n    if (!spanMap[key]) {\n      spanMap[key] = {\n        duration: 0,\n        count: 0\n      };\n    }\n\n    spanMap[key].count++;\n    spanMap[key].duration += duration;\n  }\n\n  return spanMap;\n}\n\nfunction getSpanBreakdown(transactionDetails, _ref) {\n  var details = _ref.details,\n      _ref$count = _ref.count,\n      count = _ref$count === void 0 ? 1 : _ref$count,\n      duration = _ref.duration;\n  return {\n    transaction: transactionDetails,\n    span: details,\n    samples: {\n      'span.self_time.count': getValue(count),\n      'span.self_time.sum.us': getValue(duration)\n    }\n  };\n}\n\nexport function captureBreakdown(transaction, timings) {\n  if (timings === void 0) {\n    timings = PERF.timing;\n  }\n\n  var breakdowns = [];\n  var trDuration = transaction.duration();\n  var name = transaction.name,\n      type = transaction.type,\n      sampled = transaction.sampled;\n  var transactionDetails = {\n    name: name,\n    type: type\n  };\n  breakdowns.push({\n    transaction: transactionDetails,\n    samples: {\n      'transaction.duration.count': getValue(1),\n      'transaction.duration.sum.us': getValue(trDuration),\n      'transaction.breakdown.count': getValue(sampled ? 1 : 0)\n    }\n  });\n\n  if (!sampled) {\n    return breakdowns;\n  }\n\n  if (type === PAGE_LOAD && timings) {\n    for (var i = 0; i < pageLoadBreakdowns.length; i++) {\n      var current = pageLoadBreakdowns[i];\n      var start = timings[current[0]];\n      var end = timings[current[1]];\n      var duration = getDuration(start, end);\n\n      if (duration === 0 || duration == null) {\n        continue;\n      }\n\n      breakdowns.push(getSpanBreakdown(transactionDetails, {\n        details: {\n          type: current[2]\n        },\n        duration: duration\n      }));\n    }\n  } else {\n    var spanMap = groupSpans(transaction);\n    Object.keys(spanMap).forEach(function (key) {\n      var _key$split = key.split('.'),\n          type = _key$split[0],\n          subtype = _key$split[1];\n\n      var _spanMap$key = spanMap[key],\n          duration = _spanMap$key.duration,\n          count = _spanMap$key.count;\n      breakdowns.push(getSpanBreakdown(transactionDetails, {\n        details: {\n          type: type,\n          subtype: subtype\n        },\n        duration: duration,\n        count: count\n      }));\n    });\n  }\n\n  return breakdowns;\n}","map":{"version":3,"sources":["/home/harish/windo/phoenix/node_modules/@elastic/apm-rum-core/dist/es/performance-monitoring/breakdown.js"],"names":["getDuration","PERF","PAGE_LOAD","TRUNCATED_TYPE","pageLoadBreakdowns","getValue","value","calculateSelfTime","transaction","spans","_start","_end","length","duration","sort","span1","span2","span","spanEnd","spanStart","lastContinuousEnd","selfTime","i","groupSpans","spanMap","transactionSelfTime","count","type","subtype","key","replace","getSpanBreakdown","transactionDetails","_ref","details","_ref$count","samples","captureBreakdown","timings","timing","breakdowns","trDuration","name","sampled","push","current","start","end","Object","keys","forEach","_key$split","split","_spanMap$key"],"mappings":"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","sourcesContent":["import { getDuration, PERF } from '../common/utils';\nimport { PAGE_LOAD, TRUNCATED_TYPE } from '../common/constants';\nvar pageLoadBreakdowns = [['domainLookupStart', 'domainLookupEnd', 'DNS'], ['connectStart', 'connectEnd', 'TCP'], ['requestStart', 'responseStart', 'Request'], ['responseStart', 'responseEnd', 'Response'], ['domLoading', 'domComplete', 'Processing'], ['loadEventStart', 'loadEventEnd', 'Load']];\n\nfunction getValue(value) {\n  return {\n    value: value\n  };\n}\n\nfunction calculateSelfTime(transaction) {\n  var spans = transaction.spans,\n      _start = transaction._start,\n      _end = transaction._end;\n\n  if (spans.length === 0) {\n    return transaction.duration();\n  }\n\n  spans.sort(function (span1, span2) {\n    return span1._start - span2._start;\n  });\n  var span = spans[0];\n  var spanEnd = span._end;\n  var spanStart = span._start;\n  var lastContinuousEnd = spanEnd;\n  var selfTime = spanStart - _start;\n\n  for (var i = 1; i < spans.length; i++) {\n    span = spans[i];\n    spanStart = span._start;\n    spanEnd = span._end;\n\n    if (spanStart > lastContinuousEnd) {\n      selfTime += spanStart - lastContinuousEnd;\n      lastContinuousEnd = spanEnd;\n    } else if (spanEnd > lastContinuousEnd) {\n      lastContinuousEnd = spanEnd;\n    }\n  }\n\n  if (lastContinuousEnd < _end) {\n    selfTime += _end - lastContinuousEnd;\n  }\n\n  return selfTime;\n}\n\nfunction groupSpans(transaction) {\n  var spanMap = {};\n  var transactionSelfTime = calculateSelfTime(transaction);\n  spanMap['app'] = {\n    count: 1,\n    duration: transactionSelfTime\n  };\n  var spans = transaction.spans;\n\n  for (var i = 0; i < spans.length; i++) {\n    var span = spans[i];\n    var duration = span.duration();\n\n    if (duration === 0 || duration == null) {\n      continue;\n    }\n\n    var type = span.type,\n        subtype = span.subtype;\n    var key = type.replace(TRUNCATED_TYPE, '');\n\n    if (subtype) {\n      key += '.' + subtype;\n    }\n\n    if (!spanMap[key]) {\n      spanMap[key] = {\n        duration: 0,\n        count: 0\n      };\n    }\n\n    spanMap[key].count++;\n    spanMap[key].duration += duration;\n  }\n\n  return spanMap;\n}\n\nfunction getSpanBreakdown(transactionDetails, _ref) {\n  var details = _ref.details,\n      _ref$count = _ref.count,\n      count = _ref$count === void 0 ? 1 : _ref$count,\n      duration = _ref.duration;\n  return {\n    transaction: transactionDetails,\n    span: details,\n    samples: {\n      'span.self_time.count': getValue(count),\n      'span.self_time.sum.us': getValue(duration)\n    }\n  };\n}\n\nexport function captureBreakdown(transaction, timings) {\n  if (timings === void 0) {\n    timings = PERF.timing;\n  }\n\n  var breakdowns = [];\n  var trDuration = transaction.duration();\n  var name = transaction.name,\n      type = transaction.type,\n      sampled = transaction.sampled;\n  var transactionDetails = {\n    name: name,\n    type: type\n  };\n  breakdowns.push({\n    transaction: transactionDetails,\n    samples: {\n      'transaction.duration.count': getValue(1),\n      'transaction.duration.sum.us': getValue(trDuration),\n      'transaction.breakdown.count': getValue(sampled ? 1 : 0)\n    }\n  });\n\n  if (!sampled) {\n    return breakdowns;\n  }\n\n  if (type === PAGE_LOAD && timings) {\n    for (var i = 0; i < pageLoadBreakdowns.length; i++) {\n      var current = pageLoadBreakdowns[i];\n      var start = timings[current[0]];\n      var end = timings[current[1]];\n      var duration = getDuration(start, end);\n\n      if (duration === 0 || duration == null) {\n        continue;\n      }\n\n      breakdowns.push(getSpanBreakdown(transactionDetails, {\n        details: {\n          type: current[2]\n        },\n        duration: duration\n      }));\n    }\n  } else {\n    var spanMap = groupSpans(transaction);\n    Object.keys(spanMap).forEach(function (key) {\n      var _key$split = key.split('.'),\n          type = _key$split[0],\n          subtype = _key$split[1];\n\n      var _spanMap$key = spanMap[key],\n          duration = _spanMap$key.duration,\n          count = _spanMap$key.count;\n      breakdowns.push(getSpanBreakdown(transactionDetails, {\n        details: {\n          type: type,\n          subtype: subtype\n        },\n        duration: duration,\n        count: count\n      }));\n    });\n  }\n\n  return breakdowns;\n}"]},"metadata":{},"sourceType":"module"}