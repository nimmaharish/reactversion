{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport SnackBar from \"../services/snackbar\";\nimport isImage from 'is-image';\nimport isVideo from 'is-video';\nconst MAX_SIZE = 50 * 1024 * 1024;\nexport async function readFile(file) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n\n    reader.onload = e => {\n      resolve(e.target.result);\n    };\n\n    reader.onerror = () => {\n      reject(new Error('unable to read file'));\n    };\n\n    reader.readAsDataURL(file);\n  });\n}\nexport function useIsImage(file) {\n  return isImage(file.name);\n}\nexport function useIsVideo(file) {\n  return isVideo(file.name);\n}\nexport function useFileType(file) {\n  if (file.size > MAX_SIZE) {\n    return 'other';\n  }\n\n  if (isImage(file.name)) {\n    return 'image';\n  }\n\n  if (isVideo(file.name)) {\n    return 'video';\n  }\n\n  return 'other';\n}\nexport function useFile(file) {\n  _s();\n\n  const [data, setData] = useState(null);\n  const type = useFileType(file);\n\n  const refresh = async () => {\n    try {\n      if (['image', 'video'].includes(type)) {\n        setData(await readFile(file));\n      }\n    } catch (e) {\n      SnackBar.showError(e);\n    }\n  };\n\n  useEffect(() => {\n    refresh();\n  }, [file.name]);\n  return [data, type, refresh];\n}\n\n_s(useFile, \"n8V/nilsCuezcwiJQNZ5+MU456k=\", false, function () {\n  return [useFileType];\n});","map":{"version":3,"sources":["/home/harish/windo/phoenix/src/hooks/file.js"],"names":["useEffect","useState","SnackBar","isImage","isVideo","MAX_SIZE","readFile","file","Promise","resolve","reject","reader","FileReader","onload","e","target","result","onerror","Error","readAsDataURL","useIsImage","name","useIsVideo","useFileType","size","useFile","data","setData","type","refresh","includes","showError"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,QAAP;AACA,OAAOC,OAAP,MAAoB,UAApB;AACA,OAAOC,OAAP,MAAoB,UAApB;AAEA,MAAMC,QAAQ,GAAG,KAAK,IAAL,GAAY,IAA7B;AAEA,OAAO,eAAeC,QAAf,CAAwBC,IAAxB,EAA8B;AACnC,SAAO,IAAIC,OAAJ,CAAa,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACvC,UAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;;AACAD,IAAAA,MAAM,CAACE,MAAP,GAAiBC,CAAD,IAAO;AACrBL,MAAAA,OAAO,CAACK,CAAC,CAACC,MAAF,CAASC,MAAV,CAAP;AACD,KAFD;;AAGAL,IAAAA,MAAM,CAACM,OAAP,GAAiB,MAAM;AACrBP,MAAAA,MAAM,CAAC,IAAIQ,KAAJ,CAAU,qBAAV,CAAD,CAAN;AACD,KAFD;;AAGAP,IAAAA,MAAM,CAACQ,aAAP,CAAqBZ,IAArB;AACD,GATM,CAAP;AAUD;AAED,OAAO,SAASa,UAAT,CAAoBb,IAApB,EAA0B;AAC/B,SAAOJ,OAAO,CAACI,IAAI,CAACc,IAAN,CAAd;AACD;AAED,OAAO,SAASC,UAAT,CAAoBf,IAApB,EAA0B;AAC/B,SAAOH,OAAO,CAACG,IAAI,CAACc,IAAN,CAAd;AACD;AAED,OAAO,SAASE,WAAT,CAAqBhB,IAArB,EAA2B;AAChC,MAAIA,IAAI,CAACiB,IAAL,GAAYnB,QAAhB,EAA0B;AACxB,WAAO,OAAP;AACD;;AACD,MAAIF,OAAO,CAACI,IAAI,CAACc,IAAN,CAAX,EAAwB;AACtB,WAAO,OAAP;AACD;;AACD,MAAIjB,OAAO,CAACG,IAAI,CAACc,IAAN,CAAX,EAAwB;AACtB,WAAO,OAAP;AACD;;AACD,SAAO,OAAP;AACD;AAED,OAAO,SAASI,OAAT,CAAiBlB,IAAjB,EAAuB;AAAA;;AAC5B,QAAM,CAACmB,IAAD,EAAOC,OAAP,IAAkB1B,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM2B,IAAI,GAAGL,WAAW,CAAChB,IAAD,CAAxB;;AAEA,QAAMsB,OAAO,GAAG,YAAY;AAC1B,QAAI;AACF,UAAI,CAAC,OAAD,EAAU,OAAV,EAAmBC,QAAnB,CAA4BF,IAA5B,CAAJ,EAAuC;AACrCD,QAAAA,OAAO,CAAC,MAAMrB,QAAQ,CAACC,IAAD,CAAf,CAAP;AACD;AACF,KAJD,CAIE,OAAOO,CAAP,EAAU;AACVZ,MAAAA,QAAQ,CAAC6B,SAAT,CAAmBjB,CAAnB;AACD;AACF,GARD;;AAUAd,EAAAA,SAAS,CAAC,MAAM;AACd6B,IAAAA,OAAO;AACR,GAFQ,EAEN,CAACtB,IAAI,CAACc,IAAN,CAFM,CAAT;AAIA,SAAO,CAACK,IAAD,EAAOE,IAAP,EAAaC,OAAb,CAAP;AACD;;GAnBeJ,O;UAEDF,W","sourcesContent":["import { useEffect, useState } from 'react';\nimport SnackBar from 'services/snackbar';\nimport isImage from 'is-image';\nimport isVideo from 'is-video';\n\nconst MAX_SIZE = 50 * 1024 * 1024;\n\nexport async function readFile(file) {\n  return new Promise(((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      resolve(e.target.result);\n    };\n    reader.onerror = () => {\n      reject(new Error('unable to read file'));\n    };\n    reader.readAsDataURL(file);\n  }));\n}\n\nexport function useIsImage(file) {\n  return isImage(file.name);\n}\n\nexport function useIsVideo(file) {\n  return isVideo(file.name);\n}\n\nexport function useFileType(file) {\n  if (file.size > MAX_SIZE) {\n    return 'other';\n  }\n  if (isImage(file.name)) {\n    return 'image';\n  }\n  if (isVideo(file.name)) {\n    return 'video';\n  }\n  return 'other';\n}\n\nexport function useFile(file) {\n  const [data, setData] = useState(null);\n  const type = useFileType(file);\n\n  const refresh = async () => {\n    try {\n      if (['image', 'video'].includes(type)) {\n        setData(await readFile(file));\n      }\n    } catch (e) {\n      SnackBar.showError(e);\n    }\n  };\n\n  useEffect(() => {\n    refresh();\n  }, [file.name]);\n\n  return [data, type, refresh];\n}\n"]},"metadata":{},"sourceType":"module"}