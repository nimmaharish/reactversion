{"ast":null,"code":"import stackParser from 'error-stack-parser';\n\nfunction filePathToFileName(fileUrl) {\n  var origin = window.location.origin || window.location.protocol + '//' + window.location.hostname + (window.location.port ? ':' + window.location.port : '');\n\n  if (fileUrl.indexOf(origin) > -1) {\n    fileUrl = fileUrl.replace(origin + '/', '');\n  }\n\n  return fileUrl;\n}\n\nfunction cleanFilePath(filePath) {\n  if (filePath === void 0) {\n    filePath = '';\n  }\n\n  if (filePath === '<anonymous>') {\n    filePath = '';\n  }\n\n  return filePath;\n}\n\nfunction isFileInline(fileUrl) {\n  if (fileUrl) {\n    return window.location.href.indexOf(fileUrl) === 0;\n  }\n\n  return false;\n}\n\nfunction normalizeStackFrames(stackFrames) {\n  return stackFrames.map(function (frame) {\n    if (frame.functionName) {\n      frame.functionName = normalizeFunctionName(frame.functionName);\n    }\n\n    return frame;\n  });\n}\n\nfunction normalizeFunctionName(fnName) {\n  var parts = fnName.split('/');\n\n  if (parts.length > 1) {\n    fnName = ['Object', parts[parts.length - 1]].join('.');\n  } else {\n    fnName = parts[0];\n  }\n\n  fnName = fnName.replace(/.<$/gi, '.<anonymous>');\n  fnName = fnName.replace(/^Anonymous function$/, '<anonymous>');\n  parts = fnName.split('.');\n\n  if (parts.length > 1) {\n    fnName = parts[parts.length - 1];\n  } else {\n    fnName = parts[0];\n  }\n\n  return fnName;\n}\n\nexport function createStackTraces(errorEvent) {\n  var error = errorEvent.error,\n      filename = errorEvent.filename,\n      lineno = errorEvent.lineno,\n      colno = errorEvent.colno;\n  var stackTraces = [];\n\n  if (error) {\n    try {\n      stackTraces = stackParser.parse(error);\n    } catch (e) {}\n  }\n\n  if (stackTraces.length === 0) {\n    stackTraces = [{\n      fileName: filename,\n      lineNumber: lineno,\n      columnNumber: colno\n    }];\n  }\n\n  var normalizedStackTraces = normalizeStackFrames(stackTraces);\n  return normalizedStackTraces.map(function (stack) {\n    var fileName = stack.fileName,\n        lineNumber = stack.lineNumber,\n        columnNumber = stack.columnNumber,\n        _stack$functionName = stack.functionName,\n        functionName = _stack$functionName === void 0 ? '<anonymous>' : _stack$functionName;\n\n    if (!fileName && !lineNumber) {\n      return {};\n    }\n\n    if (!columnNumber && !lineNumber) {\n      return {};\n    }\n\n    var filePath = cleanFilePath(fileName);\n    var cleanedFileName = filePathToFileName(filePath);\n\n    if (isFileInline(filePath)) {\n      cleanedFileName = '(inline script)';\n    }\n\n    return {\n      abs_path: fileName,\n      filename: cleanedFileName,\n      function: functionName,\n      lineno: lineNumber,\n      colno: columnNumber\n    };\n  });\n}\nexport function filterInvalidFrames(frames) {\n  return frames.filter(function (_ref) {\n    var filename = _ref.filename,\n        lineno = _ref.lineno;\n    return typeof filename !== 'undefined' && typeof lineno !== 'undefined';\n  });\n}","map":{"version":3,"sources":["/home/harish/windo/phoenix/node_modules/@elastic/apm-rum-core/dist/es/error-logging/stack-trace.js"],"names":["stackParser","filePathToFileName","fileUrl","origin","window","location","protocol","hostname","port","indexOf","replace","cleanFilePath","filePath","isFileInline","href","normalizeStackFrames","stackFrames","map","frame","functionName","normalizeFunctionName","fnName","parts","split","length","join","createStackTraces","errorEvent","error","filename","lineno","colno","stackTraces","parse","e","fileName","lineNumber","columnNumber","normalizedStackTraces","stack","_stack$functionName","cleanedFileName","abs_path","function","filterInvalidFrames","frames","filter","_ref"],"mappings":"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","sourcesContent":["import stackParser from 'error-stack-parser';\n\nfunction filePathToFileName(fileUrl) {\n  var origin = window.location.origin || window.location.protocol + '//' + window.location.hostname + (window.location.port ? ':' + window.location.port : '');\n\n  if (fileUrl.indexOf(origin) > -1) {\n    fileUrl = fileUrl.replace(origin + '/', '');\n  }\n\n  return fileUrl;\n}\n\nfunction cleanFilePath(filePath) {\n  if (filePath === void 0) {\n    filePath = '';\n  }\n\n  if (filePath === '<anonymous>') {\n    filePath = '';\n  }\n\n  return filePath;\n}\n\nfunction isFileInline(fileUrl) {\n  if (fileUrl) {\n    return window.location.href.indexOf(fileUrl) === 0;\n  }\n\n  return false;\n}\n\nfunction normalizeStackFrames(stackFrames) {\n  return stackFrames.map(function (frame) {\n    if (frame.functionName) {\n      frame.functionName = normalizeFunctionName(frame.functionName);\n    }\n\n    return frame;\n  });\n}\n\nfunction normalizeFunctionName(fnName) {\n  var parts = fnName.split('/');\n\n  if (parts.length > 1) {\n    fnName = ['Object', parts[parts.length - 1]].join('.');\n  } else {\n    fnName = parts[0];\n  }\n\n  fnName = fnName.replace(/.<$/gi, '.<anonymous>');\n  fnName = fnName.replace(/^Anonymous function$/, '<anonymous>');\n  parts = fnName.split('.');\n\n  if (parts.length > 1) {\n    fnName = parts[parts.length - 1];\n  } else {\n    fnName = parts[0];\n  }\n\n  return fnName;\n}\n\nexport function createStackTraces(errorEvent) {\n  var error = errorEvent.error,\n      filename = errorEvent.filename,\n      lineno = errorEvent.lineno,\n      colno = errorEvent.colno;\n  var stackTraces = [];\n\n  if (error) {\n    try {\n      stackTraces = stackParser.parse(error);\n    } catch (e) {}\n  }\n\n  if (stackTraces.length === 0) {\n    stackTraces = [{\n      fileName: filename,\n      lineNumber: lineno,\n      columnNumber: colno\n    }];\n  }\n\n  var normalizedStackTraces = normalizeStackFrames(stackTraces);\n  return normalizedStackTraces.map(function (stack) {\n    var fileName = stack.fileName,\n        lineNumber = stack.lineNumber,\n        columnNumber = stack.columnNumber,\n        _stack$functionName = stack.functionName,\n        functionName = _stack$functionName === void 0 ? '<anonymous>' : _stack$functionName;\n\n    if (!fileName && !lineNumber) {\n      return {};\n    }\n\n    if (!columnNumber && !lineNumber) {\n      return {};\n    }\n\n    var filePath = cleanFilePath(fileName);\n    var cleanedFileName = filePathToFileName(filePath);\n\n    if (isFileInline(filePath)) {\n      cleanedFileName = '(inline script)';\n    }\n\n    return {\n      abs_path: fileName,\n      filename: cleanedFileName,\n      function: functionName,\n      lineno: lineNumber,\n      colno: columnNumber\n    };\n  });\n}\nexport function filterInvalidFrames(frames) {\n  return frames.filter(function (_ref) {\n    var filename = _ref.filename,\n        lineno = _ref.lineno;\n    return typeof filename !== 'undefined' && typeof lineno !== 'undefined';\n  });\n}"]},"metadata":{},"sourceType":"module"}