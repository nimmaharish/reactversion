{"ast":null,"code":"import { injectJS } from \"../utils/loadJs\";\nimport CONFIG from \"../config\";\nimport { getAddressFromComponents } from \"../utils/gmaps\";\nlet placesService = null;\n\nconst loadGmaps = async () => {\n  var _window, _window$google;\n\n  if ((_window = window) !== null && _window !== void 0 && (_window$google = _window.google) !== null && _window$google !== void 0 && _window$google.maps) {\n    return window.google.maps;\n  }\n\n  return new Promise(resolve => {\n    window.initGoogleMaps = async () => {\n      console.log('gmaps loaded!');\n      resolve(window.google.maps);\n      delete window.initGoogleMaps;\n    };\n\n    injectJS('gmaps-js', `https://maps.googleapis.com/maps/api/js?key=${CONFIG.GMAPS.key}&libraries=places&callback=initGoogleMaps`).catch(e => {\n      throw e;\n    });\n  });\n};\n\nconst getPlacesService = async () => {\n  if (placesService) {\n    return placesService;\n  }\n\n  const gmaps = await loadGmaps();\n  placesService = new gmaps.places.PlacesService(document.createElement('map'));\n  return placesService;\n};\n\nconst searchPlaces = async query => {\n  const gmaps = await loadGmaps();\n  const service = await getPlacesService();\n  return new Promise((resolve, reject) => {\n    service.textSearch({\n      query,\n      fields: ['place_id', 'formatted_address', 'name', 'geometry']\n    }, (arr, status) => {\n      if (status === gmaps.places.PlacesServiceStatus.OK) {\n        resolve(arr);\n        return;\n      }\n\n      reject(new Error(`unable to find places, status : ${status}`));\n    });\n  });\n};\n\nconst getPlaceAddress = async (placeId, token) => {\n  const service = await getPlacesService();\n  const gmaps = await loadGmaps();\n  return new Promise((resolve, reject) => {\n    service.getDetails({\n      placeId,\n      fields: ['address_components', 'geometry'],\n      sessionToken: token\n    }, (place, status) => {\n      if (status === gmaps.places.PlacesServiceStatus.OK) {\n        resolve(getAddressFromComponents(place.address_components, place.geometry));\n        return;\n      }\n\n      reject(new Error(`unable to find places, status : ${status}`));\n    });\n  });\n};\n\nconst autoSuggest = async (query, country, token) => {\n  const gmaps = await loadGmaps();\n  const service = new gmaps.places.AutocompleteService();\n  return new Promise((resolve, reject) => {\n    service.getPlacePredictions({\n      input: query,\n      componentRestrictions: {\n        country: [country]\n      },\n      fields: ['address_components'],\n      sessionToken: token\n    }, (arr, status) => {\n      if (status === gmaps.places.PlacesServiceStatus.ZERO_RESULTS) {\n        resolve([]);\n        return;\n      }\n\n      if (status === gmaps.places.PlacesServiceStatus.OK) {\n        resolve(arr);\n        return;\n      }\n\n      reject(new Error(`unable to find places, status : ${status}`));\n    });\n  });\n};\n\nconst getSessionToken = async () => {\n  const gmaps = await loadGmaps();\n  return new gmaps.places.AutocompleteSessionToken();\n};\n\nconst Gmaps = {\n  loadGmaps,\n  getPlacesService,\n  searchPlaces,\n  getPlaceAddress,\n  autoSuggest,\n  getSessionToken\n};\nexport default Gmaps;","map":{"version":3,"sources":["/home/harish/windo/phoenix/src/services/gmaps.js"],"names":["injectJS","CONFIG","getAddressFromComponents","placesService","loadGmaps","window","google","maps","Promise","resolve","initGoogleMaps","console","log","GMAPS","key","catch","e","getPlacesService","gmaps","places","PlacesService","document","createElement","searchPlaces","query","service","reject","textSearch","fields","arr","status","PlacesServiceStatus","OK","Error","getPlaceAddress","placeId","token","getDetails","sessionToken","place","address_components","geometry","autoSuggest","country","AutocompleteService","getPlacePredictions","input","componentRestrictions","ZERO_RESULTS","getSessionToken","AutocompleteSessionToken","Gmaps"],"mappings":"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","sourcesContent":["import { injectJS } from 'utils/loadJs';\nimport CONFIG from 'config';\nimport { getAddressFromComponents } from 'utils/gmaps';\n\nlet placesService = null;\n\nconst loadGmaps = async () => {\n  if (window?.google?.maps) {\n    return window.google.maps;\n  }\n  return new Promise((resolve) => {\n    window.initGoogleMaps = async () => {\n      console.log('gmaps loaded!');\n      resolve(window.google.maps);\n      delete window.initGoogleMaps;\n    };\n    injectJS(\n      'gmaps-js',\n      `https://maps.googleapis.com/maps/api/js?key=${CONFIG.GMAPS.key}&libraries=places&callback=initGoogleMaps`,\n    )\n      .catch(e => {\n        throw e;\n      });\n  });\n};\n\nconst getPlacesService = async () => {\n  if (placesService) {\n    return placesService;\n  }\n  const gmaps = await loadGmaps();\n  placesService = new gmaps.places.PlacesService(document.createElement('map'));\n  return placesService;\n};\n\nconst searchPlaces = async query => {\n  const gmaps = await loadGmaps();\n  const service = await getPlacesService();\n  return new Promise((resolve, reject) => {\n    service.textSearch({\n      query,\n      fields: ['place_id', 'formatted_address', 'name', 'geometry'],\n    }, (arr, status) => {\n      if (status === gmaps.places.PlacesServiceStatus.OK) {\n        resolve(arr);\n        return;\n      }\n      reject(new Error(`unable to find places, status : ${status}`));\n    });\n  });\n};\n\nconst getPlaceAddress = async (placeId, token) => {\n  const service = await getPlacesService();\n  const gmaps = await loadGmaps();\n  return new Promise((resolve, reject) => {\n    service.getDetails({\n      placeId,\n      fields: ['address_components', 'geometry'],\n      sessionToken: token,\n    }, (place, status) => {\n      if (status === gmaps.places.PlacesServiceStatus.OK) {\n        resolve(getAddressFromComponents(place.address_components, place.geometry));\n        return;\n      }\n      reject(new Error(`unable to find places, status : ${status}`));\n    });\n  });\n};\n\nconst autoSuggest = async (query, country, token) => {\n  const gmaps = await loadGmaps();\n  const service = new gmaps.places.AutocompleteService();\n  return new Promise((resolve, reject) => {\n    service.getPlacePredictions({\n      input: query,\n      componentRestrictions: { country: [country] },\n      fields: ['address_components'],\n      sessionToken: token,\n    }, (arr, status) => {\n      if (status === gmaps.places.PlacesServiceStatus.ZERO_RESULTS) {\n        resolve([]);\n        return;\n      }\n      if (status === gmaps.places.PlacesServiceStatus.OK) {\n        resolve(arr);\n        return;\n      }\n      reject(new Error(`unable to find places, status : ${status}`));\n    });\n  });\n};\n\nconst getSessionToken = async () => {\n  const gmaps = await loadGmaps();\n  return new gmaps.places.AutocompleteSessionToken();\n};\n\nconst Gmaps = {\n  loadGmaps,\n  getPlacesService,\n  searchPlaces,\n  getPlaceAddress,\n  autoSuggest,\n  getSessionToken,\n};\n\nexport default Gmaps;\n"]},"metadata":{},"sourceType":"module"}