{"ast":null,"code":"// import {\n//   isIND,\n// } from 'contexts/userContext';\n// const isInd = isIND();\nexport const DeliveryType = {\n  FREE: 'free',\n  FIXED: 'fixed',\n  CONDITIONAL: 'conditional',\n  AREA: 'area',\n  SHIPPING: 'shipping'\n};\nexport const DistanceMatrix = {\n  shortKilometers: {\n    fromDistance: 0,\n    toDistance: 250,\n    unit: 'km',\n    label: 'Around the corner (0-250 kilometers)'\n  },\n  shortMiles: {\n    fromDistance: 0,\n    toDistance: 250,\n    unit: 'mile',\n    label: 'Around the corner (0-250 miles)'\n  },\n  mediumKilometers: {\n    fromDistance: 250,\n    toDistance: 500,\n    unit: 'km',\n    label: 'On the horizon (250-500 kilometers)'\n  },\n  mediumMiles: {\n    fromDistance: 250,\n    toDistance: 500,\n    unit: 'mile',\n    label: 'On the horizon (250-500 miles)'\n  },\n  longKilometers: {\n    fromDistance: 500,\n    toDistance: 10000,\n    unit: 'km',\n    label: 'Afar (>500 kilometers)'\n  },\n  longMiles: {\n    fromDistance: 500,\n    toDistance: 10000,\n    unit: 'mile',\n    label: 'Afar (>500 miles)'\n  }\n};\nexport const DistanceOptions = Object.entries(DistanceMatrix).map(_c = ([key, value]) => ({\n  value: key,\n  label: value.label,\n  fromDistance: value.fromDistance,\n  toDistance: value.toDistance,\n  unit: value.unit\n}));\n_c2 = DistanceOptions;\nexport function formatConditionalCharge(charge, currency) {\n  return `${currency} ${charge.from} - ${currency} ${charge.to} → ${currency} ${charge.charge}`;\n}\nexport function formatDistanceCharge(charge, currency) {\n  if (charge.fromDistance === 500) {\n    return `${currency} ${charge.from} - ${currency} ${charge.to}\n  In ( > ${charge.fromDistance} ${charge.unit}s)\n   → ${currency} ${charge.charge}`;\n  }\n\n  return `${currency} ${charge.from} - ${currency} ${charge.to}\n  In (${charge.fromDistance} - ${charge.toDistance} ${charge.unit}s)\n   → ${currency} ${charge.charge}`;\n}\nexport function getInitialValues(values) {\n  var _values$fixed, _values$fixed2;\n\n  return {\n    otherCharges: (values === null || values === void 0 ? void 0 : values.otherCharges) || [],\n    config: (values === null || values === void 0 ? void 0 : values.config) || [],\n    chargeType: (values === null || values === void 0 ? void 0 : values.chargeType) || DeliveryType.FREE,\n    edd: 0,\n    charges: (values === null || values === void 0 ? void 0 : values.charges) || '',\n    fixed: {\n      charges: (values === null || values === void 0 ? void 0 : (_values$fixed = values.fixed) === null || _values$fixed === void 0 ? void 0 : _values$fixed.charges) || '',\n      freeDeliveryValue: (values === null || values === void 0 ? void 0 : (_values$fixed2 = values.fixed) === null || _values$fixed2 === void 0 ? void 0 : _values$fixed2.freeDeliveryValue) || ''\n    }\n  };\n}\nexport function getInitialConditionalValues(charges, index) {\n  var _charges$to, _charges;\n\n  if (index !== null) {\n    return charges[index];\n  }\n\n  if (charges.length === 0) {\n    return {\n      from: 0,\n      to: '',\n      charge: ''\n    };\n  }\n\n  return {\n    from: (_charges$to = (_charges = charges[charges.length - 1]) === null || _charges === void 0 ? void 0 : _charges.to) !== null && _charges$to !== void 0 ? _charges$to : '',\n    to: '',\n    charge: ''\n  };\n}\nexport function getChargeConfig(values, index) {\n  if (index !== null) {\n    var _values$find;\n\n    const value = values === null || values === void 0 ? void 0 : (_values$find = values.find(obj => obj.value === index)) === null || _values$find === void 0 ? void 0 : _values$find.config;\n\n    if (value) {\n      var _value$value, _value$min, _value$max;\n\n      return {\n        value: (_value$value = value.value) !== null && _value$value !== void 0 ? _value$value : '',\n        min: (_value$min = value.min) !== null && _value$min !== void 0 ? _value$min : '',\n        max: (_value$max = value.max) !== null && _value$max !== void 0 ? _value$max : ''\n      };\n    }\n  }\n\n  return {\n    value: '',\n    min: '',\n    max: ''\n  };\n}\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"DistanceOptions$Object.entries(DistanceMatrix).map\");\n$RefreshReg$(_c2, \"DistanceOptions\");","map":{"version":3,"sources":["/home/harish/windo/phoenix/src/components/profile/delivery/utils.js"],"names":["DeliveryType","FREE","FIXED","CONDITIONAL","AREA","SHIPPING","DistanceMatrix","shortKilometers","fromDistance","toDistance","unit","label","shortMiles","mediumKilometers","mediumMiles","longKilometers","longMiles","DistanceOptions","Object","entries","map","key","value","formatConditionalCharge","charge","currency","from","to","formatDistanceCharge","getInitialValues","values","otherCharges","config","chargeType","edd","charges","fixed","freeDeliveryValue","getInitialConditionalValues","index","length","getChargeConfig","find","obj","min","max"],"mappings":"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","sourcesContent":["// import {\n//   isIND,\n// } from 'contexts/userContext';\n\n// const isInd = isIND();\n\nexport const DeliveryType = {\n  FREE: 'free',\n  FIXED: 'fixed',\n  CONDITIONAL: 'conditional',\n  AREA: 'area',\n  SHIPPING: 'shipping'\n};\n\nexport const DistanceMatrix = {\n\n  shortKilometers: {\n    fromDistance: 0,\n    toDistance: 250,\n    unit: 'km',\n    label: 'Around the corner (0-250 kilometers)',\n  },\n\n  shortMiles: {\n    fromDistance: 0,\n    toDistance: 250,\n    unit: 'mile',\n    label: 'Around the corner (0-250 miles)',\n  },\n\n  mediumKilometers: {\n    fromDistance: 250,\n    toDistance: 500,\n    unit: 'km',\n    label: 'On the horizon (250-500 kilometers)',\n  },\n\n  mediumMiles: {\n    fromDistance: 250,\n    toDistance: 500,\n    unit: 'mile',\n    label: 'On the horizon (250-500 miles)',\n  },\n\n  longKilometers: {\n    fromDistance: 500,\n    toDistance: 10000,\n    unit: 'km',\n    label: 'Afar (>500 kilometers)',\n  },\n\n  longMiles: {\n    fromDistance: 500,\n    toDistance: 10000,\n    unit: 'mile',\n    label: 'Afar (>500 miles)',\n  }\n};\n\nexport const DistanceOptions = Object.entries(DistanceMatrix).map(([key, value]) => ({\n  value: key,\n  label: value.label,\n  fromDistance: value.fromDistance,\n  toDistance: value.toDistance,\n  unit: value.unit,\n}));\n\nexport function formatConditionalCharge(charge, currency) {\n  return `${currency} ${charge.from} - ${currency} ${charge.to} → ${currency} ${charge.charge}`;\n}\n\nexport function formatDistanceCharge(charge, currency) {\n  if (charge.fromDistance === 500) {\n    return `${currency} ${charge.from} - ${currency} ${charge.to}\n  In ( > ${charge.fromDistance} ${charge.unit}s)\n   → ${currency} ${charge.charge}`;\n  }\n  return `${currency} ${charge.from} - ${currency} ${charge.to}\n  In (${charge.fromDistance} - ${charge.toDistance} ${charge.unit}s)\n   → ${currency} ${charge.charge}`;\n}\n\nexport function getInitialValues(values) {\n  return {\n    otherCharges: values?.otherCharges || [],\n    config: values?.config || [],\n    chargeType: values?.chargeType || DeliveryType.FREE,\n    edd: 0,\n    charges: values?.charges || '',\n    fixed: {\n      charges: values?.fixed?.charges || '',\n      freeDeliveryValue: values?.fixed?.freeDeliveryValue || '',\n    }\n  };\n}\n\nexport function getInitialConditionalValues(charges, index) {\n  if (index !== null) {\n    return charges[index];\n  }\n\n  if (charges.length === 0) {\n    return {\n      from: 0,\n      to: '',\n      charge: ''\n    };\n  }\n\n  return {\n    from: charges[charges.length - 1]?.to ?? '',\n    to: '',\n    charge: '',\n  };\n}\n\nexport function getChargeConfig(values, index) {\n  if (index !== null) {\n    const value = values?.find(obj => obj.value === index)?.config;\n    if (value) {\n      return {\n        value: value.value ?? '',\n        min: value.min ?? '',\n        max: value.max ?? '',\n      };\n    }\n  }\n  return {\n    value: '',\n    min: '',\n    max: '',\n  };\n}\n"]},"metadata":{},"sourceType":"module"}