{"ast":null,"code":"var _jsxFileName = \"/home/harish/windo/phoenix/src/components/orders/v2/PaymentStatusDrawer.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { CommonStatusDrawer } from \"./CommonStatusDrawer\";\nimport { useConfirmedAmount, useNonConfirmedAmount, useOrder, useRefresh } from \"../../../contexts/orderContext\";\nimport Loader from \"../../../services/loader\";\nimport { Factory } from \"../../../api\";\nimport Snackbar from \"../../../services/snackbar\";\nimport { PaymentAmount } from \"./PaymentAmount\";\nimport { PAYMENT_STATUS_LIST } from \"./statusUtils\";\nconst STATUS_TITLES = {\n  'payment successful': {\n    title: 'Mark as Paid',\n    subTitle: 'A little birdie tells us you\\'ve received your payment.'\n  },\n  'not paid': {\n    title: 'Mark as Not Paid'\n  },\n  refunded: {\n    title: 'Mark as Refunded'\n  }\n};\nexport function PaymentStatusDrawer({\n  onClose\n}) {\n  _s();\n\n  const [note, setNote] = useState('');\n  const [status, setStatus] = useState('');\n  const [amount, setAmount] = useState(null);\n  const refreshOrder = useRefresh();\n  const order = useOrder();\n  const confirmedAmount = useConfirmedAmount();\n  const balanceAmount = useNonConfirmedAmount();\n\n  const onUpdateApi = async (status, nt, data = {}) => {\n    try {\n      Loader.show();\n      await Factory.updateStatus(order._id, 'payment', status, [], nt, data, []);\n      setAmount(null);\n      refreshOrder();\n      onClose();\n    } catch (e) {\n      Snackbar.showError(e);\n    } finally {\n      Loader.hide();\n    }\n  };\n\n  const onUpdate = (status, nt) => {\n    setNote(nt);\n    setStatus(status);\n\n    if (status === 'refunded') {\n      const x = confirmedAmount - ((order === null || order === void 0 ? void 0 : order.refunded) || 0);\n      setAmount(x > 0 ? x : 0);\n      return;\n    }\n\n    if (status === 'not paid') {\n      setAmount(confirmedAmount);\n      return;\n    }\n\n    if (status === 'payment successful') {\n      setAmount(balanceAmount);\n      return;\n    }\n\n    onUpdateApi(status, nt);\n  };\n\n  const onUpdateFromPopUp = amount => {\n    onUpdateApi(status, note, {\n      amount\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, amount !== null && /*#__PURE__*/React.createElement(PaymentAmount, {\n    amount: amount,\n    onSubmit: onUpdateFromPopUp,\n    onClose: () => setAmount(null),\n    title: STATUS_TITLES[status].title,\n    subTitle: STATUS_TITLES[status].subTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(CommonStatusDrawer, {\n    statusList: PAYMENT_STATUS_LIST,\n    onSubmit: onUpdate,\n    onClose: onClose,\n    title: \"Payment Status\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }));\n}\n\n_s(PaymentStatusDrawer, \"mW1lt/KzJ1NX2iVrHYOTLXEDGfo=\", false, function () {\n  return [useRefresh, useOrder, useConfirmedAmount, useNonConfirmedAmount];\n});\n\n_c = PaymentStatusDrawer;\nPaymentStatusDrawer.propTypes = {\n  onClose: PropTypes.func.isRequired\n};\nPaymentStatusDrawer.defaultProps = {};\n\nvar _c;\n\n$RefreshReg$(_c, \"PaymentStatusDrawer\");","map":{"version":3,"sources":["/home/harish/windo/phoenix/src/components/orders/v2/PaymentStatusDrawer.jsx"],"names":["React","useState","PropTypes","CommonStatusDrawer","useConfirmedAmount","useNonConfirmedAmount","useOrder","useRefresh","Loader","Factory","Snackbar","PaymentAmount","PAYMENT_STATUS_LIST","STATUS_TITLES","title","subTitle","refunded","PaymentStatusDrawer","onClose","note","setNote","status","setStatus","amount","setAmount","refreshOrder","order","confirmedAmount","balanceAmount","onUpdateApi","nt","data","show","updateStatus","_id","e","showError","hide","onUpdate","x","onUpdateFromPopUp","propTypes","func","isRequired","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { CommonStatusDrawer } from 'components/orders/v2/CommonStatusDrawer';\nimport {\n  useConfirmedAmount, useNonConfirmedAmount, useOrder, useRefresh\n} from 'contexts/orderContext';\nimport Loader from 'services/loader';\nimport { Factory } from 'api';\nimport Snackbar from 'services/snackbar';\nimport { PaymentAmount } from 'components/orders/v2/PaymentAmount';\nimport { PAYMENT_STATUS_LIST } from './statusUtils';\n\nconst STATUS_TITLES = {\n  'payment successful': {\n    title: 'Mark as Paid',\n    subTitle: 'A little birdie tells us you\\'ve received your payment.',\n  },\n  'not paid': {\n    title: 'Mark as Not Paid',\n  },\n  refunded: {\n    title: 'Mark as Refunded',\n  }\n};\n\nexport function PaymentStatusDrawer({ onClose }) {\n  const [note, setNote] = useState('');\n  const [status, setStatus] = useState('');\n  const [amount, setAmount] = useState(null);\n  const refreshOrder = useRefresh();\n  const order = useOrder();\n  const confirmedAmount = useConfirmedAmount();\n  const balanceAmount = useNonConfirmedAmount();\n\n  const onUpdateApi = async (status, nt, data = {}) => {\n    try {\n      Loader.show();\n      await Factory.updateStatus(order._id, 'payment', status, [], nt, data, []);\n      setAmount(null);\n      refreshOrder();\n      onClose();\n    } catch (e) {\n      Snackbar.showError(e);\n    } finally {\n      Loader.hide();\n    }\n  };\n\n  const onUpdate = (status, nt) => {\n    setNote(nt);\n    setStatus(status);\n    if (status === 'refunded') {\n      const x = confirmedAmount - (order?.refunded || 0);\n      setAmount(x > 0 ? x : 0);\n      return;\n    }\n    if (status === 'not paid') {\n      setAmount(confirmedAmount);\n      return;\n    }\n    if (status === 'payment successful') {\n      setAmount(balanceAmount);\n      return;\n    }\n    onUpdateApi(status, nt);\n  };\n\n  const onUpdateFromPopUp = (amount) => {\n    onUpdateApi(status, note, { amount });\n  };\n\n  return (\n    <>\n      {amount !== null && (\n        <PaymentAmount\n          amount={amount}\n          onSubmit={onUpdateFromPopUp}\n          onClose={() => setAmount(null)}\n          title={STATUS_TITLES[status].title}\n          subTitle={STATUS_TITLES[status].subTitle}\n        />\n      )}\n      <CommonStatusDrawer\n        statusList={PAYMENT_STATUS_LIST}\n        onSubmit={onUpdate}\n        onClose={onClose}\n        title=\"Payment Status\"\n      />\n    </>\n  );\n}\n\nPaymentStatusDrawer.propTypes = {\n  onClose: PropTypes.func.isRequired,\n};\n\nPaymentStatusDrawer.defaultProps = {};\n"]},"metadata":{},"sourceType":"module"}