{"ast":null,"code":"import _ from 'lodash';\nimport { longDateFormat } from \"../../utils\";\nexport function addressToArray(address) {\n  var _address$name, _address$phone, _address$addressLine, _address$addressLine2, _address$landmark, _address$city, _address$pincode, _address$state, _address$country, _address$email;\n\n  return [{\n    name: 'Name',\n    value: (_address$name = address === null || address === void 0 ? void 0 : address.name) !== null && _address$name !== void 0 ? _address$name : ''\n  }, {\n    name: 'Mobile Number',\n    value: (_address$phone = address === null || address === void 0 ? void 0 : address.phone) !== null && _address$phone !== void 0 ? _address$phone : ''\n  }, {\n    name: 'Address Line 1',\n    value: (_address$addressLine = address === null || address === void 0 ? void 0 : address.addressLine1) !== null && _address$addressLine !== void 0 ? _address$addressLine : ''\n  }, {\n    name: 'Address Line 2',\n    value: (_address$addressLine2 = address === null || address === void 0 ? void 0 : address.addressLine2) !== null && _address$addressLine2 !== void 0 ? _address$addressLine2 : ''\n  }, {\n    name: 'Landmark',\n    value: (_address$landmark = address === null || address === void 0 ? void 0 : address.landmark) !== null && _address$landmark !== void 0 ? _address$landmark : ''\n  }, {\n    name: 'City',\n    value: (_address$city = address === null || address === void 0 ? void 0 : address.city) !== null && _address$city !== void 0 ? _address$city : ''\n  }, {\n    name: 'Pincode / Zipcode',\n    value: (_address$pincode = address === null || address === void 0 ? void 0 : address.pincode) !== null && _address$pincode !== void 0 ? _address$pincode : ''\n  }, {\n    name: 'State',\n    value: (_address$state = address === null || address === void 0 ? void 0 : address.state) !== null && _address$state !== void 0 ? _address$state : ''\n  }, {\n    name: 'Country',\n    value: (_address$country = address === null || address === void 0 ? void 0 : address.country) !== null && _address$country !== void 0 ? _address$country : ''\n  }, {\n    name: 'Email',\n    value: (_address$email = address === null || address === void 0 ? void 0 : address.email) !== null && _address$email !== void 0 ? _address$email : ''\n  }];\n}\nexport function addressToString(address) {\n  var _address$addressLine3, _address$addressLine4, _address$landmark2, _address$city2, _address$pincode2, _address$state2, _address$country2;\n\n  return [(_address$addressLine3 = address === null || address === void 0 ? void 0 : address.addressLine1) !== null && _address$addressLine3 !== void 0 ? _address$addressLine3 : '', (_address$addressLine4 = address === null || address === void 0 ? void 0 : address.addressLine2) !== null && _address$addressLine4 !== void 0 ? _address$addressLine4 : '', (_address$landmark2 = address === null || address === void 0 ? void 0 : address.landmark) !== null && _address$landmark2 !== void 0 ? _address$landmark2 : '', (_address$city2 = address === null || address === void 0 ? void 0 : address.city) !== null && _address$city2 !== void 0 ? _address$city2 : '', (_address$pincode2 = address === null || address === void 0 ? void 0 : address.pincode) !== null && _address$pincode2 !== void 0 ? _address$pincode2 : '', (_address$state2 = address === null || address === void 0 ? void 0 : address.state) !== null && _address$state2 !== void 0 ? _address$state2 : '', (_address$country2 = address === null || address === void 0 ? void 0 : address.country) !== null && _address$country2 !== void 0 ? _address$country2 : ''].join(', ');\n}\nexport function contactDetailsToArray(address) {\n  var _address$name2, _address$email2, _address$phone2;\n\n  return [{\n    name: 'Name',\n    value: (_address$name2 = address === null || address === void 0 ? void 0 : address.name) !== null && _address$name2 !== void 0 ? _address$name2 : ''\n  }, {\n    name: 'Email',\n    value: (_address$email2 = address === null || address === void 0 ? void 0 : address.email) !== null && _address$email2 !== void 0 ? _address$email2 : ''\n  }, {\n    name: 'Mobile Number',\n    value: (_address$phone2 = address === null || address === void 0 ? void 0 : address.phone) !== null && _address$phone2 !== void 0 ? _address$phone2 : ''\n  }];\n}\nexport function mapOrderHistory(order, trackingHistory = [], edd) {\n  const outForDelivery = trackingHistory.find(x => x.status === 'out for delivery');\n  const delivered = trackingHistory.find(x => x.status === 'delivered');\n  const cancelled = trackingHistory.find(x => x.status === 'cancelled');\n  const history = (order.statusHistory || []).filter(s => ['payment successful', 'confirmed', 'ready to ship'].includes(s.status)).map(({\n    status,\n    at: date,\n    date: other\n  }) => {\n    switch (status) {\n      case 'payment successful':\n        return {\n          status,\n          date: `Paid on ${longDateFormat(date || other)}`,\n          color: 'yellow'\n        };\n\n      case 'confirmed':\n        return {\n          status: 'Order Confirmed',\n          date: `Confirmed on ${longDateFormat(date || other)}`,\n          color: 'yellow'\n        };\n\n      case 'ready to ship':\n        return {\n          status: 'Order is Ready to Ship',\n          date: longDateFormat(date || other),\n          color: 'yellow'\n        };\n\n      default:\n        return {\n          status,\n          date: longDateFormat(date || other),\n          color: 'yellow'\n        };\n    }\n  }).reverse();\n\n  if (trackingHistory.length < 2 && history.length > 0) {\n    history[0].color = 'green';\n  }\n\n  const [, ...rest] = trackingHistory;\n  const readyToShip = (order.statusHistory || []).find(x => x.status === 'ready to ship');\n\n  if (!readyToShip) {\n    history.unshift({\n      status: 'Order is ready to ship',\n      date: '',\n      color: 'grey'\n    });\n  }\n\n  const restHistory = rest.map(s => ({\n    status: s.status,\n    note: s.note,\n    date: longDateFormat(s.at),\n    color: 'yellow'\n  })).reverse();\n\n  if (restHistory.length > 0) {\n    restHistory[0].color = 'green';\n  }\n\n  history.unshift(...restHistory);\n\n  if (!cancelled) {\n    if (!outForDelivery && !delivered) {\n      history.unshift({\n        status: 'Out For Delivery',\n        date: '',\n        color: 'grey'\n      });\n    }\n\n    if (!delivered) {\n      history.unshift({\n        status: 'Delivered',\n        date: edd ? `Estimated delivery date ${longDateFormat(edd)}` : '',\n        color: 'grey'\n      });\n    }\n  }\n\n  return _.uniqBy(history, 'status');\n}\nexport const getBadgeVariant = status => {\n  switch (status) {\n    case 'cancelled':\n    case 'cart cancelled':\n      return 'error';\n\n    case 'delivered':\n      return 'secondary';\n\n    default:\n      return 'primary';\n  }\n};","map":{"version":3,"sources":["/home/harish/windo/phoenix/src/components/orders/utils.js"],"names":["_","longDateFormat","addressToArray","address","name","value","phone","addressLine1","addressLine2","landmark","city","pincode","state","country","email","addressToString","join","contactDetailsToArray","mapOrderHistory","order","trackingHistory","edd","outForDelivery","find","x","status","delivered","cancelled","history","statusHistory","filter","s","includes","map","at","date","other","color","reverse","length","rest","readyToShip","unshift","restHistory","note","uniqBy","getBadgeVariant"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport { longDateFormat } from 'utils';\n\nexport function addressToArray(address) {\n  return [\n    { name: 'Name', value: address?.name ?? '' },\n    { name: 'Mobile Number', value: address?.phone ?? '' },\n    { name: 'Address Line 1', value: address?.addressLine1 ?? '' },\n    { name: 'Address Line 2', value: address?.addressLine2 ?? '' },\n    { name: 'Landmark', value: address?.landmark ?? '' },\n    { name: 'City', value: address?.city ?? '' },\n    { name: 'Pincode / Zipcode', value: address?.pincode ?? '' },\n    { name: 'State', value: address?.state ?? '' },\n    { name: 'Country', value: address?.country ?? '' },\n    { name: 'Email', value: address?.email ?? '' },\n  ];\n}\n\nexport function addressToString(address) {\n  return [\n    address?.addressLine1 ?? '',\n    address?.addressLine2 ?? '',\n    address?.landmark ?? '',\n    address?.city ?? '',\n    address?.pincode ?? '',\n    address?.state ?? '',\n    address?.country ?? '',\n  ].join(', ');\n}\n\nexport function contactDetailsToArray(address) {\n  return [\n    { name: 'Name', value: address?.name ?? '' },\n    { name: 'Email', value: address?.email ?? '' },\n    { name: 'Mobile Number', value: address?.phone ?? '' },\n  ];\n}\n\nexport function mapOrderHistory(order, trackingHistory = [], edd) {\n  const outForDelivery = trackingHistory.find(x => x.status === 'out for delivery');\n  const delivered = trackingHistory.find(x => x.status === 'delivered');\n  const cancelled = trackingHistory.find(x => x.status === 'cancelled');\n  const history = (\n    order.statusHistory || []\n  ).filter(s => ['payment successful', 'confirmed', 'ready to ship'].includes(s.status))\n    .map(({ status, at: date, date: other }) => {\n      switch (status) {\n        case 'payment successful':\n          return {\n            status,\n            date: `Paid on ${longDateFormat(date || other)}`,\n            color: 'yellow',\n          };\n        case 'confirmed':\n          return {\n            status: 'Order Confirmed',\n            date: `Confirmed on ${longDateFormat(date || other)}`,\n            color: 'yellow',\n          };\n        case 'ready to ship':\n          return {\n            status: 'Order is Ready to Ship',\n            date: longDateFormat(date || other),\n            color: 'yellow',\n          };\n        default:\n          return {\n            status,\n            date: longDateFormat(date || other),\n            color: 'yellow',\n          };\n      }\n    }).reverse();\n\n  if (trackingHistory.length < 2 && history.length > 0) {\n    history[0].color = 'green';\n  }\n\n  const [, ...rest] = trackingHistory;\n\n  const readyToShip = (order.statusHistory || []).find(x => x.status === 'ready to ship');\n\n  if (!readyToShip) {\n    history.unshift({\n      status: 'Order is ready to ship',\n      date: '',\n      color: 'grey',\n    });\n  }\n\n  const restHistory = rest.map(s => ({\n    status: s.status,\n    note: s.note,\n    date: longDateFormat(s.at),\n    color: 'yellow',\n  })).reverse();\n\n  if (restHistory.length > 0) {\n    restHistory[0].color = 'green';\n  }\n\n  history.unshift(...restHistory);\n\n  if (!cancelled) {\n    if (!outForDelivery && !delivered) {\n      history.unshift({\n        status: 'Out For Delivery',\n        date: '',\n        color: 'grey',\n      });\n    }\n\n    if (!delivered) {\n      history.unshift({\n        status: 'Delivered',\n        date: edd ? `Estimated delivery date ${longDateFormat(edd)}` : '',\n        color: 'grey',\n      });\n    }\n  }\n\n  return _.uniqBy(history, 'status');\n}\n\nexport const getBadgeVariant = status => {\n  switch (status) {\n    case 'cancelled':\n    case 'cart cancelled':\n      return 'error';\n    case 'delivered':\n      return 'secondary';\n    default:\n      return 'primary';\n  }\n};\n"]},"metadata":{},"sourceType":"module"}