{"ast":null,"code":"import { getCurrentHub } from '@sentry/hub';\nexport var TRACEPARENT_REGEXP = new RegExp('^[ \\\\t]*' + // whitespace\n'([0-9a-f]{32})?' + // trace_id\n'-?([0-9a-f]{16})?' + // span_id\n'-?([01])?' + // sampled\n'[ \\\\t]*$');\n/**\n * Determines if tracing is currently enabled.\n *\n * Tracing is enabled when at least one of `tracesSampleRate` and `tracesSampler` is defined in the SDK config.\n */\n\nexport function hasTracingEnabled(maybeOptions) {\n  var client = getCurrentHub().getClient();\n  var options = maybeOptions || client && client.getOptions();\n  return !!options && ('tracesSampleRate' in options || 'tracesSampler' in options);\n}\n/**\n * Extract transaction context data from a `sentry-trace` header.\n *\n * @param traceparent Traceparent string\n *\n * @returns Object containing data from the header, or undefined if traceparent string is malformed\n */\n\nexport function extractTraceparentData(traceparent) {\n  var matches = traceparent.match(TRACEPARENT_REGEXP);\n\n  if (matches) {\n    var parentSampled = void 0;\n\n    if (matches[3] === '1') {\n      parentSampled = true;\n    } else if (matches[3] === '0') {\n      parentSampled = false;\n    }\n\n    return {\n      traceId: matches[1],\n      parentSampled: parentSampled,\n      parentSpanId: matches[2]\n    };\n  }\n\n  return undefined;\n}\n/** Grabs active transaction off scope, if any */\n\nexport function getActiveTransaction(maybeHub) {\n  var hub = maybeHub || getCurrentHub();\n  var scope = hub.getScope();\n  return scope && scope.getTransaction();\n}\n/**\n * Converts from milliseconds to seconds\n * @param time time in ms\n */\n\nexport function msToSec(time) {\n  return time / 1000;\n}\n/**\n * Converts from seconds to milliseconds\n * @param time time in seconds\n */\n\nexport function secToMs(time) {\n  return time * 1000;\n} // so it can be used in manual instrumentation without necessitating a hard dependency on @sentry/utils\n\nexport { stripUrlQueryAndFragment } from '@sentry/utils';","map":{"version":3,"sources":["../src/utils.ts"],"names":[],"mappings":"AAAA,SAAS,aAAT,QAAmC,aAAnC;AAGA,OAAO,IAAM,kBAAkB,GAAG,IAAI,MAAJ,CAChC,aAAa;AACX,iBADF,GACsB;AACpB,mBAFF,GAEwB;AACtB,WAHF,GAGgB;AACd,UAL8B,CAA3B;AAQP;;;;AAIG;;AACH,OAAM,SAAU,iBAAV,CAA4B,YAA5B,EAA8D;AAClE,MAAM,MAAM,GAAG,aAAa,GAAG,SAAhB,EAAf;AACA,MAAM,OAAO,GAAG,YAAY,IAAK,MAAM,IAAI,MAAM,CAAC,UAAP,EAA3C;AACA,SAAO,CAAC,CAAC,OAAF,KAAc,sBAAsB,OAAtB,IAAiC,mBAAmB,OAAlE,CAAP;AACD;AAED;;;;;;AAMG;;AACH,OAAM,SAAU,sBAAV,CAAiC,WAAjC,EAAoD;AACxD,MAAM,OAAO,GAAG,WAAW,CAAC,KAAZ,CAAkB,kBAAlB,CAAhB;;AACA,MAAI,OAAJ,EAAa;AACX,QAAI,aAAa,GAAA,KAAA,CAAjB;;AACA,QAAI,OAAO,CAAC,CAAD,CAAP,KAAe,GAAnB,EAAwB;AACtB,MAAA,aAAa,GAAG,IAAhB;AACD,KAFD,MAEO,IAAI,OAAO,CAAC,CAAD,CAAP,KAAe,GAAnB,EAAwB;AAC7B,MAAA,aAAa,GAAG,KAAhB;AACD;;AACD,WAAO;AACL,MAAA,OAAO,EAAE,OAAO,CAAC,CAAD,CADX;AAEL,MAAA,aAAa,EAAA,aAFR;AAGL,MAAA,YAAY,EAAE,OAAO,CAAC,CAAD;AAHhB,KAAP;AAKD;;AACD,SAAO,SAAP;AACD;AAED;;AACA,OAAM,SAAU,oBAAV,CAAsD,QAAtD,EAAoE;AACxE,MAAM,GAAG,GAAG,QAAQ,IAAI,aAAa,EAArC;AACA,MAAM,KAAK,GAAG,GAAG,CAAC,QAAJ,EAAd;AACA,SAAO,KAAK,IAAK,KAAK,CAAC,cAAN,EAAjB;AACD;AAED;;;AAGG;;AACH,OAAM,SAAU,OAAV,CAAkB,IAAlB,EAA8B;AAClC,SAAO,IAAI,GAAG,IAAd;AACD;AAED;;;AAGG;;AACH,OAAM,SAAU,OAAV,CAAkB,IAAlB,EAA8B;AAClC,SAAO,IAAI,GAAG,IAAd;AACD,C,CAED;;AACA,SAAS,wBAAT,QAAyC,eAAzC","sourcesContent":["import { getCurrentHub, Hub } from '@sentry/hub';\nimport { Options, TraceparentData, Transaction } from '@sentry/types';\n\nexport const TRACEPARENT_REGEXP = new RegExp(\n  '^[ \\\\t]*' + // whitespace\n    '([0-9a-f]{32})?' + // trace_id\n    '-?([0-9a-f]{16})?' + // span_id\n    '-?([01])?' + // sampled\n    '[ \\\\t]*$', // whitespace\n);\n\n/**\n * Determines if tracing is currently enabled.\n *\n * Tracing is enabled when at least one of `tracesSampleRate` and `tracesSampler` is defined in the SDK config.\n */\nexport function hasTracingEnabled(maybeOptions?: Options | undefined): boolean {\n  const client = getCurrentHub().getClient();\n  const options = maybeOptions || (client && client.getOptions());\n  return !!options && ('tracesSampleRate' in options || 'tracesSampler' in options);\n}\n\n/**\n * Extract transaction context data from a `sentry-trace` header.\n *\n * @param traceparent Traceparent string\n *\n * @returns Object containing data from the header, or undefined if traceparent string is malformed\n */\nexport function extractTraceparentData(traceparent: string): TraceparentData | undefined {\n  const matches = traceparent.match(TRACEPARENT_REGEXP);\n  if (matches) {\n    let parentSampled: boolean | undefined;\n    if (matches[3] === '1') {\n      parentSampled = true;\n    } else if (matches[3] === '0') {\n      parentSampled = false;\n    }\n    return {\n      traceId: matches[1],\n      parentSampled,\n      parentSpanId: matches[2],\n    };\n  }\n  return undefined;\n}\n\n/** Grabs active transaction off scope, if any */\nexport function getActiveTransaction<T extends Transaction>(maybeHub?: Hub): T | undefined {\n  const hub = maybeHub || getCurrentHub();\n  const scope = hub.getScope();\n  return scope && (scope.getTransaction() as T | undefined);\n}\n\n/**\n * Converts from milliseconds to seconds\n * @param time time in ms\n */\nexport function msToSec(time: number): number {\n  return time / 1000;\n}\n\n/**\n * Converts from seconds to milliseconds\n * @param time time in seconds\n */\nexport function secToMs(time: number): number {\n  return time * 1000;\n}\n\n// so it can be used in manual instrumentation without necessitating a hard dependency on @sentry/utils\nexport { stripUrlQueryAndFragment } from '@sentry/utils';\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}