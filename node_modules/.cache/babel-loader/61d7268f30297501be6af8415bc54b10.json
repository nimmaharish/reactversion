{"ast":null,"code":"var _s = $RefreshSig$();\n\n/* eslint-disable no-restricted-syntax */\n\n/* eslint-disable guard-for-in */\nimport { useEffect, useState } from 'react';\nexport function useIdle() {\n  _s();\n\n  const [timer, setTimer] = useState(60); // 1 minute by default\n\n  useEffect(() => {\n    const myInterval = setInterval(() => {\n      const el = document.getElementById('root');\n\n      if (timer > 0) {\n        setTimer(timer - 1);\n\n        if (el) {\n          el.setAttribute('isIdle', false);\n        }\n      } else if (el) {\n        el.setAttribute('isIdle', true);\n      }\n    }, 1000);\n\n    const resetTimeout = () => {\n      setTimer(15);\n    };\n\n    const events = ['load', 'mousemove', 'mousedown', 'click', 'scroll', 'keypress'];\n\n    for (const i in events) {\n      window.addEventListener(events[i], resetTimeout);\n    }\n\n    return () => {\n      clearInterval(myInterval);\n\n      for (const i in events) {\n        window.removeEventListener(events[i], resetTimeout);\n      }\n    };\n  });\n  return timer === 0;\n}\n\n_s(useIdle, \"f2fmv1w9AHDBW9No6poqFEPKg5s=\");","map":{"version":3,"sources":["/home/harish/windo/phoenix/src/hooks/idleTimeout.js"],"names":["useEffect","useState","useIdle","timer","setTimer","myInterval","setInterval","el","document","getElementById","setAttribute","resetTimeout","events","i","window","addEventListener","clearInterval","removeEventListener"],"mappings":";;AAAA;;AACA;AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,OAAO,SAASC,OAAT,GAAmB;AAAA;;AACxB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBH,QAAQ,CAAC,EAAD,CAAlC,CADwB,CACgB;;AACxCD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMK,UAAU,GAAGC,WAAW,CAAC,MAAM;AACnC,YAAMC,EAAE,GAAGC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAX;;AACA,UAAIN,KAAK,GAAG,CAAZ,EAAe;AACbC,QAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;;AACA,YAAII,EAAJ,EAAQ;AACNA,UAAAA,EAAE,CAACG,YAAH,CAAgB,QAAhB,EAA0B,KAA1B;AACD;AACF,OALD,MAKO,IAAIH,EAAJ,EAAQ;AACbA,QAAAA,EAAE,CAACG,YAAH,CAAgB,QAAhB,EAA0B,IAA1B;AACD;AACF,KAV6B,EAU3B,IAV2B,CAA9B;;AAWA,UAAMC,YAAY,GAAG,MAAM;AACzBP,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACD,KAFD;;AAGA,UAAMQ,MAAM,GAAG,CACb,MADa,EAEb,WAFa,EAGb,WAHa,EAIb,OAJa,EAKb,QALa,EAMb,UANa,CAAf;;AAQA,SAAK,MAAMC,CAAX,IAAgBD,MAAhB,EAAwB;AACtBE,MAAAA,MAAM,CAACC,gBAAP,CAAwBH,MAAM,CAACC,CAAD,CAA9B,EAAmCF,YAAnC;AACD;;AACD,WAAO,MAAM;AACXK,MAAAA,aAAa,CAACX,UAAD,CAAb;;AACA,WAAK,MAAMQ,CAAX,IAAgBD,MAAhB,EAAwB;AACtBE,QAAAA,MAAM,CAACG,mBAAP,CAA2BL,MAAM,CAACC,CAAD,CAAjC,EAAsCF,YAAtC;AACD;AACF,KALD;AAMD,GAhCQ,CAAT;AAkCA,SAAOR,KAAK,KAAK,CAAjB;AACD;;GArCeD,O","sourcesContent":["/* eslint-disable no-restricted-syntax */\n/* eslint-disable guard-for-in */\nimport { useEffect, useState } from 'react';\n\nexport function useIdle() {\n  const [timer, setTimer] = useState(60); // 1 minute by default\n  useEffect(() => {\n    const myInterval = setInterval(() => {\n      const el = document.getElementById('root');\n      if (timer > 0) {\n        setTimer(timer - 1);\n        if (el) {\n          el.setAttribute('isIdle', false);\n        }\n      } else if (el) {\n        el.setAttribute('isIdle', true);\n      }\n    }, 1000);\n    const resetTimeout = () => {\n      setTimer(15);\n    };\n    const events = [\n      'load',\n      'mousemove',\n      'mousedown',\n      'click',\n      'scroll',\n      'keypress'\n    ];\n    for (const i in events) {\n      window.addEventListener(events[i], resetTimeout);\n    }\n    return () => {\n      clearInterval(myInterval);\n      for (const i in events) {\n        window.removeEventListener(events[i], resetTimeout);\n      }\n    };\n  });\n\n  return timer === 0;\n}\n"]},"metadata":{},"sourceType":"module"}