{"ast":null,"code":"import { patchMethod, XHR_SYNC, XHR_URL, XHR_METHOD, XHR_IGNORE } from './patch-utils';\nimport { SCHEDULE, INVOKE, XMLHTTPREQUEST, ADD_EVENT_LISTENER_STR } from '../constants';\nexport function patchXMLHttpRequest(callback) {\n  var XMLHttpRequestPrototype = XMLHttpRequest.prototype;\n\n  if (!XMLHttpRequestPrototype || !XMLHttpRequestPrototype[ADD_EVENT_LISTENER_STR]) {\n    return;\n  }\n\n  var READY_STATE_CHANGE = 'readystatechange';\n  var LOAD = 'load';\n  var ERROR = 'error';\n  var TIMEOUT = 'timeout';\n  var ABORT = 'abort';\n\n  function invokeTask(task, status) {\n    if (task.state !== INVOKE) {\n      task.state = INVOKE;\n      task.data.status = status;\n      callback(INVOKE, task);\n    }\n  }\n\n  function scheduleTask(task) {\n    if (task.state === SCHEDULE) {\n      return;\n    }\n\n    task.state = SCHEDULE;\n    callback(SCHEDULE, task);\n    var target = task.data.target;\n\n    function addListener(name) {\n      target[ADD_EVENT_LISTENER_STR](name, function (_ref) {\n        var type = _ref.type;\n\n        if (type === READY_STATE_CHANGE) {\n          if (target.readyState === 4 && target.status !== 0) {\n            invokeTask(task, 'success');\n          }\n        } else {\n          var status = type === LOAD ? 'success' : type;\n          invokeTask(task, status);\n        }\n      });\n    }\n\n    addListener(READY_STATE_CHANGE);\n    addListener(LOAD);\n    addListener(TIMEOUT);\n    addListener(ERROR);\n    addListener(ABORT);\n  }\n\n  var openNative = patchMethod(XMLHttpRequestPrototype, 'open', function () {\n    return function (self, args) {\n      if (!self[XHR_IGNORE]) {\n        self[XHR_METHOD] = args[0];\n        self[XHR_URL] = args[1];\n        self[XHR_SYNC] = args[2] === false;\n      }\n\n      return openNative.apply(self, args);\n    };\n  });\n  var sendNative = patchMethod(XMLHttpRequestPrototype, 'send', function () {\n    return function (self, args) {\n      if (self[XHR_IGNORE]) {\n        return sendNative.apply(self, args);\n      }\n\n      var task = {\n        source: XMLHTTPREQUEST,\n        state: '',\n        type: 'macroTask',\n        data: {\n          target: self,\n          method: self[XHR_METHOD],\n          sync: self[XHR_SYNC],\n          url: self[XHR_URL],\n          status: ''\n        }\n      };\n\n      try {\n        scheduleTask(task);\n        return sendNative.apply(self, args);\n      } catch (e) {\n        invokeTask(task, ERROR);\n        throw e;\n      }\n    };\n  });\n}","map":{"version":3,"sources":["/home/harish/windo/phoenix/node_modules/@elastic/apm-rum-core/dist/es/common/patching/xhr-patch.js"],"names":["patchMethod","XHR_SYNC","XHR_URL","XHR_METHOD","XHR_IGNORE","SCHEDULE","INVOKE","XMLHTTPREQUEST","ADD_EVENT_LISTENER_STR","patchXMLHttpRequest","callback","XMLHttpRequestPrototype","XMLHttpRequest","prototype","READY_STATE_CHANGE","LOAD","ERROR","TIMEOUT","ABORT","invokeTask","task","status","state","data","scheduleTask","target","addListener","name","_ref","type","readyState","openNative","self","args","apply","sendNative","source","method","sync","url","e"],"mappings":"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","sourcesContent":["import { patchMethod, XHR_SYNC, XHR_URL, XHR_METHOD, XHR_IGNORE } from './patch-utils';\nimport { SCHEDULE, INVOKE, XMLHTTPREQUEST, ADD_EVENT_LISTENER_STR } from '../constants';\nexport function patchXMLHttpRequest(callback) {\n  var XMLHttpRequestPrototype = XMLHttpRequest.prototype;\n\n  if (!XMLHttpRequestPrototype || !XMLHttpRequestPrototype[ADD_EVENT_LISTENER_STR]) {\n    return;\n  }\n\n  var READY_STATE_CHANGE = 'readystatechange';\n  var LOAD = 'load';\n  var ERROR = 'error';\n  var TIMEOUT = 'timeout';\n  var ABORT = 'abort';\n\n  function invokeTask(task, status) {\n    if (task.state !== INVOKE) {\n      task.state = INVOKE;\n      task.data.status = status;\n      callback(INVOKE, task);\n    }\n  }\n\n  function scheduleTask(task) {\n    if (task.state === SCHEDULE) {\n      return;\n    }\n\n    task.state = SCHEDULE;\n    callback(SCHEDULE, task);\n    var target = task.data.target;\n\n    function addListener(name) {\n      target[ADD_EVENT_LISTENER_STR](name, function (_ref) {\n        var type = _ref.type;\n\n        if (type === READY_STATE_CHANGE) {\n          if (target.readyState === 4 && target.status !== 0) {\n            invokeTask(task, 'success');\n          }\n        } else {\n          var status = type === LOAD ? 'success' : type;\n          invokeTask(task, status);\n        }\n      });\n    }\n\n    addListener(READY_STATE_CHANGE);\n    addListener(LOAD);\n    addListener(TIMEOUT);\n    addListener(ERROR);\n    addListener(ABORT);\n  }\n\n  var openNative = patchMethod(XMLHttpRequestPrototype, 'open', function () {\n    return function (self, args) {\n      if (!self[XHR_IGNORE]) {\n        self[XHR_METHOD] = args[0];\n        self[XHR_URL] = args[1];\n        self[XHR_SYNC] = args[2] === false;\n      }\n\n      return openNative.apply(self, args);\n    };\n  });\n  var sendNative = patchMethod(XMLHttpRequestPrototype, 'send', function () {\n    return function (self, args) {\n      if (self[XHR_IGNORE]) {\n        return sendNative.apply(self, args);\n      }\n\n      var task = {\n        source: XMLHTTPREQUEST,\n        state: '',\n        type: 'macroTask',\n        data: {\n          target: self,\n          method: self[XHR_METHOD],\n          sync: self[XHR_SYNC],\n          url: self[XHR_URL],\n          status: ''\n        }\n      };\n\n      try {\n        scheduleTask(task);\n        return sendNative.apply(self, args);\n      } catch (e) {\n        invokeTask(task, ERROR);\n        throw e;\n      }\n    };\n  });\n}"]},"metadata":{},"sourceType":"module"}