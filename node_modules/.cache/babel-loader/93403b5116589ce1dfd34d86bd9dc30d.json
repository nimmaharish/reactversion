{"ast":null,"code":"var _jsxFileName = \"/home/harish/windo/phoenix/src/components/desktop/product/bulk/UploadImage.jsx\";\n\n/* eslint-disable no-unused-vars */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport SnackBar from \"../../../../services/snackbar\";\nimport Snackbar from \"../../../../services/snackbar\";\nimport { Becca } from \"../../../../api\";\nimport Loader from \"../../../../services/loader\";\nimport { compressImages } from \"../../../../utils/image\";\nimport { inParallelWithLimit } from \"../../../../utils/parallel\";\nimport closeIcon from \"../../../../assets/v2/common/closeBlack.svg\";\nimport { Clickable } from 'phoenix-components';\nimport addIcon from \"../../../../assets/images/products/create/add.svg\";\nimport styles from \"./UploadImage.module.css\";\nexport function UploadImage({\n  item,\n  onSetImage\n}) {\n  const {\n    images = []\n  } = item;\n\n  const onAdd = async e => {\n    if (images.length >= 8) {\n      SnackBar.show('Maximum of 8 images is allowed', 'warning');\n      return;\n    }\n\n    Loader.show();\n\n    try {\n      const files = await compressImages([...e.target.files]);\n\n      if (files.length) {\n        const uploaded = await inParallelWithLimit(files, 3, async file => {\n          const fileName = file === null || file === void 0 ? void 0 : file.name;\n\n          try {\n            const payload = new FormData();\n            payload.append('name', fileName);\n            payload.append('purpose', 'shop');\n            payload.append('type', 'image');\n            payload.append('file', file);\n            const {\n              url\n            } = await Becca.uploadAsset(payload);\n            return url;\n          } catch (e) {\n            Snackbar.show(`${fileName} failed to upload `, 'error');\n          }\n        });\n        onSetImage([...uploaded, ...images].filter(x => x).slice(0, 8));\n      }\n    } catch (e) {\n      SnackBar.showError(e);\n    } finally {\n      Loader.hide();\n    }\n  };\n\n  const onDeleteImage = idx => () => {\n    onSetImage(images.filter((_, i) => i !== idx));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.label,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: addIcon,\n    alt: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    className: styles.file,\n    accept: \"image/*\",\n    multiple: true,\n    onChange: onAdd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.images,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, images.map((x, idx) => /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.imageContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: styles.image,\n    src: x,\n    alt: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Clickable, {\n    onClick: onDeleteImage(idx),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: styles.close,\n    src: closeIcon,\n    alt: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 15\n    }\n  }))))));\n}\n_c = UploadImage;\nUploadImage.propTypes = {\n  item: PropTypes.object.isRequired,\n  onSetImage: PropTypes.func.isRequired\n};\nUploadImage.defaultProps = {};\n\nvar _c;\n\n$RefreshReg$(_c, \"UploadImage\");","map":{"version":3,"sources":["/home/harish/windo/phoenix/src/components/desktop/product/bulk/UploadImage.jsx"],"names":["React","PropTypes","SnackBar","Snackbar","Becca","Loader","compressImages","inParallelWithLimit","Clickable","styles","UploadImage","item","onSetImage","images","onAdd","e","length","show","files","target","uploaded","file","fileName","name","payload","FormData","append","url","uploadAsset","filter","x","slice","showError","hide","onDeleteImage","idx","_","i","container","label","addIcon","map","imageContainer","image","close","closeIcon","propTypes","object","isRequired","func","defaultProps"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-vars */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport SnackBar from 'services/snackbar';\nimport Snackbar from 'services/snackbar';\nimport { Becca } from 'api';\nimport Loader from 'services/loader';\nimport { compressImages } from 'utils/image';\nimport { inParallelWithLimit } from 'utils/parallel';\nimport closeIcon from 'assets/v2/common/closeBlack.svg';\nimport { Clickable } from 'phoenix-components';\nimport addIcon from 'assets/images/products/create/add.svg';\nimport styles from './UploadImage.module.css';\n\nexport function UploadImage({\n  item,\n  onSetImage\n}) {\n  const { images = [] } = item;\n\n  const onAdd = async (e) => {\n    if (images.length >= 8) {\n      SnackBar.show('Maximum of 8 images is allowed', 'warning');\n      return;\n    }\n    Loader.show();\n    try {\n      const files = await compressImages([...e.target.files]);\n      if (files.length) {\n        const uploaded = await inParallelWithLimit(files, 3, async file => {\n          const fileName = file?.name;\n          try {\n            const payload = new FormData();\n            payload.append('name', fileName);\n            payload.append('purpose', 'shop');\n            payload.append('type', 'image');\n            payload.append('file', file);\n            const { url } = await Becca.uploadAsset(payload);\n            return url;\n          } catch (e) {\n            Snackbar.show(`${fileName} failed to upload `, 'error');\n          }\n        });\n        onSetImage([...uploaded, ...images].filter(x => x)\n          .slice(0, 8));\n      }\n    } catch (e) {\n      SnackBar.showError(e);\n    } finally {\n      Loader.hide();\n    }\n  };\n\n  const onDeleteImage = (idx) => () => {\n    onSetImage(images.filter((_, i) => i !== idx));\n  };\n\n  return (\n    <div className={styles.container}>\n      <label>\n        <div className={styles.label}>\n          <img src={addIcon} alt=\"\" />\n        </div>\n        <input\n          type=\"file\"\n          className={styles.file}\n          accept=\"image/*\"\n          multiple={true}\n          onChange={onAdd}\n        />\n      </label>\n      <div className={styles.images}>\n        {images.map((x, idx) => (\n          <div className={styles.imageContainer}>\n            <img className={styles.image} src={x} alt=\"\" />\n            <Clickable\n              onClick={onDeleteImage(idx)}\n            >\n              <img className={styles.close} src={closeIcon} alt=\"\" />\n            </Clickable>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nUploadImage.propTypes = {\n  item: PropTypes.object.isRequired,\n  onSetImage: PropTypes.func.isRequired,\n};\n\nUploadImage.defaultProps = {};\n"]},"metadata":{},"sourceType":"module"}