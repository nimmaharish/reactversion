{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n// eslint-disable-next-line @typescript-eslint/unbound-method\nvar objectToString = Object.prototype.toString;\n/**\n * Checks whether given value's type is one of a few Error or Error-like\n * {@link isError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\n\nexport function isError(wat) {\n  switch (objectToString.call(wat)) {\n    case '[object Error]':\n    case '[object Exception]':\n    case '[object DOMException]':\n      return true;\n\n    default:\n      return isInstanceOf(wat, Error);\n  }\n}\n\nfunction isBuiltin(wat, ty) {\n  return objectToString.call(wat) === \"[object \" + ty + \"]\";\n}\n/**\n * Checks whether given value's type is ErrorEvent\n * {@link isErrorEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\n\n\nexport function isErrorEvent(wat) {\n  return isBuiltin(wat, 'ErrorEvent');\n}\n/**\n * Checks whether given value's type is DOMError\n * {@link isDOMError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\n\nexport function isDOMError(wat) {\n  return isBuiltin(wat, 'DOMError');\n}\n/**\n * Checks whether given value's type is DOMException\n * {@link isDOMException}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\n\nexport function isDOMException(wat) {\n  return isBuiltin(wat, 'DOMException');\n}\n/**\n * Checks whether given value's type is a string\n * {@link isString}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\n\nexport function isString(wat) {\n  return isBuiltin(wat, 'String');\n}\n/**\n * Checks whether given value is a primitive (undefined, null, number, boolean, string, bigint, symbol)\n * {@link isPrimitive}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\n\nexport function isPrimitive(wat) {\n  return wat === null || typeof wat !== 'object' && typeof wat !== 'function';\n}\n/**\n * Checks whether given value's type is an object literal\n * {@link isPlainObject}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\n\nexport function isPlainObject(wat) {\n  return isBuiltin(wat, 'Object');\n}\n/**\n * Checks whether given value's type is an Event instance\n * {@link isEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\n\nexport function isEvent(wat) {\n  return typeof Event !== 'undefined' && isInstanceOf(wat, Event);\n}\n/**\n * Checks whether given value's type is an Element instance\n * {@link isElement}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\n\nexport function isElement(wat) {\n  return typeof Element !== 'undefined' && isInstanceOf(wat, Element);\n}\n/**\n * Checks whether given value's type is an regexp\n * {@link isRegExp}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\n\nexport function isRegExp(wat) {\n  return isBuiltin(wat, 'RegExp');\n}\n/**\n * Checks whether given value has a then function.\n * @param wat A value to be checked.\n */\n\nexport function isThenable(wat) {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return Boolean(wat && wat.then && typeof wat.then === 'function');\n}\n/**\n * Checks whether given value's type is a SyntheticEvent\n * {@link isSyntheticEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\n\nexport function isSyntheticEvent(wat) {\n  return isPlainObject(wat) && 'nativeEvent' in wat && 'preventDefault' in wat && 'stopPropagation' in wat;\n}\n/**\n * Checks whether given value's type is an instance of provided constructor.\n * {@link isInstanceOf}.\n *\n * @param wat A value to be checked.\n * @param base A constructor to be used in a check.\n * @returns A boolean representing the result.\n */\n\nexport function isInstanceOf(wat, base) {\n  try {\n    return wat instanceof base;\n  } catch (_e) {\n    return false;\n  }\n}","map":{"version":3,"sources":["../src/is.ts"],"names":[],"mappings":"AAAA;;AACA;AAIA;AACA,IAAM,cAAc,GAAG,MAAM,CAAC,SAAP,CAAiB,QAAxC;AAEA;;;;;;AAMG;;AACH,OAAM,SAAU,OAAV,CAAkB,GAAlB,EAA8B;AAClC,UAAQ,cAAc,CAAC,IAAf,CAAoB,GAApB,CAAR;AACE,SAAK,gBAAL;AACA,SAAK,oBAAL;AACA,SAAK,uBAAL;AACE,aAAO,IAAP;;AACF;AACE,aAAO,YAAY,CAAC,GAAD,EAAM,KAAN,CAAnB;AANJ;AAQD;;AAED,SAAS,SAAT,CAAmB,GAAnB,EAAiC,EAAjC,EAA2C;AACzC,SAAO,cAAc,CAAC,IAAf,CAAoB,GAApB,MAA6B,aAAW,EAAX,GAAa,GAAjD;AACD;AAED;;;;;;AAMG;;;AACH,OAAM,SAAU,YAAV,CAAuB,GAAvB,EAAmC;AACvC,SAAO,SAAS,CAAC,GAAD,EAAM,YAAN,CAAhB;AACD;AAED;;;;;;AAMG;;AACH,OAAM,SAAU,UAAV,CAAqB,GAArB,EAAiC;AACrC,SAAO,SAAS,CAAC,GAAD,EAAM,UAAN,CAAhB;AACD;AAED;;;;;;AAMG;;AACH,OAAM,SAAU,cAAV,CAAyB,GAAzB,EAAqC;AACzC,SAAO,SAAS,CAAC,GAAD,EAAM,cAAN,CAAhB;AACD;AAED;;;;;;AAMG;;AACH,OAAM,SAAU,QAAV,CAAmB,GAAnB,EAA+B;AACnC,SAAO,SAAS,CAAC,GAAD,EAAM,QAAN,CAAhB;AACD;AAED;;;;;;AAMG;;AACH,OAAM,SAAU,WAAV,CAAsB,GAAtB,EAAkC;AACtC,SAAO,GAAG,KAAK,IAAR,IAAiB,OAAO,GAAP,KAAe,QAAf,IAA2B,OAAO,GAAP,KAAe,UAAlE;AACD;AAED;;;;;;AAMG;;AACH,OAAM,SAAU,aAAV,CAAwB,GAAxB,EAAoC;AACxC,SAAO,SAAS,CAAC,GAAD,EAAM,QAAN,CAAhB;AACD;AAED;;;;;;AAMG;;AACH,OAAM,SAAU,OAAV,CAAkB,GAAlB,EAA8B;AAClC,SAAO,OAAO,KAAP,KAAiB,WAAjB,IAAgC,YAAY,CAAC,GAAD,EAAM,KAAN,CAAnD;AACD;AAED;;;;;;AAMG;;AACH,OAAM,SAAU,SAAV,CAAoB,GAApB,EAAgC;AACpC,SAAO,OAAO,OAAP,KAAmB,WAAnB,IAAkC,YAAY,CAAC,GAAD,EAAM,OAAN,CAArD;AACD;AAED;;;;;;AAMG;;AACH,OAAM,SAAU,QAAV,CAAmB,GAAnB,EAA+B;AACnC,SAAO,SAAS,CAAC,GAAD,EAAM,QAAN,CAAhB;AACD;AAED;;;AAGG;;AACH,OAAM,SAAU,UAAV,CAAqB,GAArB,EAA6B;AACjC;AACA,SAAO,OAAO,CAAC,GAAG,IAAI,GAAG,CAAC,IAAX,IAAmB,OAAO,GAAG,CAAC,IAAX,KAAoB,UAAxC,CAAd;AACD;AAED;;;;;;AAMG;;AACH,OAAM,SAAU,gBAAV,CAA2B,GAA3B,EAAuC;AAC3C,SAAO,aAAa,CAAC,GAAD,CAAb,IAAsB,iBAAiB,GAAvC,IAA8C,oBAAoB,GAAlE,IAAyE,qBAAqB,GAArG;AACD;AACD;;;;;;;AAOG;;AACH,OAAM,SAAU,YAAV,CAAuB,GAAvB,EAAiC,IAAjC,EAA0C;AAC9C,MAAI;AACF,WAAO,GAAG,YAAY,IAAtB;AACD,GAFD,CAEE,OAAO,EAAP,EAAW;AACX,WAAO,KAAP;AACD;AACF","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n\nimport { Primitive } from '@sentry/types';\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nconst objectToString = Object.prototype.toString;\n\n/**\n * Checks whether given value's type is one of a few Error or Error-like\n * {@link isError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isError(wat: unknown): boolean {\n  switch (objectToString.call(wat)) {\n    case '[object Error]':\n    case '[object Exception]':\n    case '[object DOMException]':\n      return true;\n    default:\n      return isInstanceOf(wat, Error);\n  }\n}\n\nfunction isBuiltin(wat: unknown, ty: string): boolean {\n  return objectToString.call(wat) === `[object ${ty}]`;\n}\n\n/**\n * Checks whether given value's type is ErrorEvent\n * {@link isErrorEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isErrorEvent(wat: unknown): boolean {\n  return isBuiltin(wat, 'ErrorEvent');\n}\n\n/**\n * Checks whether given value's type is DOMError\n * {@link isDOMError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isDOMError(wat: unknown): boolean {\n  return isBuiltin(wat, 'DOMError');\n}\n\n/**\n * Checks whether given value's type is DOMException\n * {@link isDOMException}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isDOMException(wat: unknown): boolean {\n  return isBuiltin(wat, 'DOMException');\n}\n\n/**\n * Checks whether given value's type is a string\n * {@link isString}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isString(wat: unknown): boolean {\n  return isBuiltin(wat, 'String');\n}\n\n/**\n * Checks whether given value is a primitive (undefined, null, number, boolean, string, bigint, symbol)\n * {@link isPrimitive}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isPrimitive(wat: unknown): wat is Primitive {\n  return wat === null || (typeof wat !== 'object' && typeof wat !== 'function');\n}\n\n/**\n * Checks whether given value's type is an object literal\n * {@link isPlainObject}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isPlainObject(wat: unknown): wat is Record<string, unknown> {\n  return isBuiltin(wat, 'Object');\n}\n\n/**\n * Checks whether given value's type is an Event instance\n * {@link isEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isEvent(wat: unknown): boolean {\n  return typeof Event !== 'undefined' && isInstanceOf(wat, Event);\n}\n\n/**\n * Checks whether given value's type is an Element instance\n * {@link isElement}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isElement(wat: unknown): boolean {\n  return typeof Element !== 'undefined' && isInstanceOf(wat, Element);\n}\n\n/**\n * Checks whether given value's type is an regexp\n * {@link isRegExp}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isRegExp(wat: unknown): wat is RegExp {\n  return isBuiltin(wat, 'RegExp');\n}\n\n/**\n * Checks whether given value has a then function.\n * @param wat A value to be checked.\n */\nexport function isThenable(wat: any): wat is PromiseLike<any> {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return Boolean(wat && wat.then && typeof wat.then === 'function');\n}\n\n/**\n * Checks whether given value's type is a SyntheticEvent\n * {@link isSyntheticEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isSyntheticEvent(wat: unknown): boolean {\n  return isPlainObject(wat) && 'nativeEvent' in wat && 'preventDefault' in wat && 'stopPropagation' in wat;\n}\n/**\n * Checks whether given value's type is an instance of provided constructor.\n * {@link isInstanceOf}.\n *\n * @param wat A value to be checked.\n * @param base A constructor to be used in a check.\n * @returns A boolean representing the result.\n */\nexport function isInstanceOf(wat: any, base: any): boolean {\n  try {\n    return wat instanceof base;\n  } catch (_e) {\n    return false;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}