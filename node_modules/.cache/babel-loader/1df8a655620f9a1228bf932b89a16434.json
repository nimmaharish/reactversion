{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport WebView from \"../services/webview\";\nimport { User, App } from \"../api\";\nimport { AppUpdateService } from \"../services/appUpdate\";\nimport CONFIG from \"../config\";\nexport function useSyncFcmToken() {\n  _s();\n\n  const sync = async () => {\n    try {\n      if (WebView.isWebView()) {\n        const {\n          token\n        } = await WebView.fcmToken();\n        await User.syncFcmToken(token);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  useEffect(() => {\n    sync();\n  }, []);\n  return [sync];\n}\n\n_s(useSyncFcmToken, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\nexport function useCheckForUpdate() {\n  _s2();\n\n  useEffect(() => {\n    const timeout = setTimeout(async () => {\n      if (!WebView.isWebView()) {\n        return;\n      }\n\n      const result = await WebView.checkUpdate();\n\n      if (result) {\n        AppUpdateService.open('app');\n      }\n    }, 2000);\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, []);\n}\n\n_s2(useCheckForUpdate, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\nexport function useCheckForWebUpdate() {\n  _s3();\n\n  const fetch = async () => {\n    try {\n      const {\n        version\n      } = await App.fetchVersion();\n\n      if (version !== CONFIG.BUILD.version) {\n        AppUpdateService.open('web');\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  useEffect(() => {\n    fetch();\n  }, []);\n}\n\n_s3(useCheckForWebUpdate, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");","map":{"version":3,"sources":["/home/harish/windo/phoenix/src/hooks/sync.js"],"names":["useEffect","WebView","User","App","AppUpdateService","CONFIG","useSyncFcmToken","sync","isWebView","token","fcmToken","syncFcmToken","e","console","error","useCheckForUpdate","timeout","setTimeout","result","checkUpdate","open","clearTimeout","useCheckForWebUpdate","fetch","version","fetchVersion","BUILD"],"mappings":";;;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,OAAP;AACA,SAASC,IAAT,EAAeC,GAAf;AACA,SAASC,gBAAT;AACA,OAAOC,MAAP;AAEA,OAAO,SAASC,eAAT,GAA2B;AAAA;;AAChC,QAAMC,IAAI,GAAG,YAAY;AACvB,QAAI;AACF,UAAIN,OAAO,CAACO,SAAR,EAAJ,EAAyB;AACvB,cAAM;AAAEC,UAAAA;AAAF,YAAY,MAAMR,OAAO,CAACS,QAAR,EAAxB;AACA,cAAMR,IAAI,CAACS,YAAL,CAAkBF,KAAlB,CAAN;AACD;AACF,KALD,CAKE,OAAOG,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACD;AACF,GATD;;AAWAZ,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,IAAI;AACL,GAFQ,EAEN,EAFM,CAAT;AAIA,SAAO,CAACA,IAAD,CAAP;AACD;;GAjBeD,e;;AAmBhB,OAAO,SAASS,iBAAT,GAA6B;AAAA;;AAClCf,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMgB,OAAO,GAAGC,UAAU,CAAC,YAAY;AACrC,UAAI,CAAChB,OAAO,CAACO,SAAR,EAAL,EAA0B;AACxB;AACD;;AACD,YAAMU,MAAM,GAAG,MAAMjB,OAAO,CAACkB,WAAR,EAArB;;AACA,UAAID,MAAJ,EAAY;AACVd,QAAAA,gBAAgB,CAACgB,IAAjB,CAAsB,KAAtB;AACD;AACF,KARyB,EAQvB,IARuB,CAA1B;AASA,WAAO,MAAM;AACXC,MAAAA,YAAY,CAACL,OAAD,CAAZ;AACD,KAFD;AAGD,GAbQ,EAaN,EAbM,CAAT;AAcD;;IAfeD,iB;;AAiBhB,OAAO,SAASO,oBAAT,GAAgC;AAAA;;AACrC,QAAMC,KAAK,GAAG,YAAY;AACxB,QAAI;AACF,YAAM;AAAEC,QAAAA;AAAF,UAAc,MAAMrB,GAAG,CAACsB,YAAJ,EAA1B;;AACA,UAAID,OAAO,KAAKnB,MAAM,CAACqB,KAAP,CAAaF,OAA7B,EAAsC;AACpCpB,QAAAA,gBAAgB,CAACgB,IAAjB,CAAsB,KAAtB;AACD;AACF,KALD,CAKE,OAAOR,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACD;AACF,GATD;;AAWAZ,EAAAA,SAAS,CAAC,MAAM;AACduB,IAAAA,KAAK;AACN,GAFQ,EAEN,EAFM,CAAT;AAGD;;IAfeD,oB","sourcesContent":["import { useEffect } from 'react';\nimport WebView from 'services/webview';\nimport { User, App } from 'api';\nimport { AppUpdateService } from 'services/appUpdate';\nimport CONFIG from 'config';\n\nexport function useSyncFcmToken() {\n  const sync = async () => {\n    try {\n      if (WebView.isWebView()) {\n        const { token } = await WebView.fcmToken();\n        await User.syncFcmToken(token);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  useEffect(() => {\n    sync();\n  }, []);\n\n  return [sync];\n}\n\nexport function useCheckForUpdate() {\n  useEffect(() => {\n    const timeout = setTimeout(async () => {\n      if (!WebView.isWebView()) {\n        return;\n      }\n      const result = await WebView.checkUpdate();\n      if (result) {\n        AppUpdateService.open('app');\n      }\n    }, 2000);\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, []);\n}\n\nexport function useCheckForWebUpdate() {\n  const fetch = async () => {\n    try {\n      const { version } = await App.fetchVersion();\n      if (version !== CONFIG.BUILD.version) {\n        AppUpdateService.open('web');\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  useEffect(() => {\n    fetch();\n  }, []);\n}\n"]},"metadata":{},"sourceType":"module"}