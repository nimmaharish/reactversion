{"ast":null,"code":"var _jsxFileName = \"/home/harish/windo/phoenix/src/containers/profile/pickupEligibility/PickupEligibility.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Drawer } from \"../../../components/shared/Drawer\";\nimport { Dialog, DialogContent } from '@material-ui/core';\nimport { Formik } from 'formik';\nimport { FormikInput, Button } from 'phoenix-components';\nimport { Becca } from \"../../../api\";\nimport Loader from \"../../../services/loader\";\nimport SnackBar from \"../../../services/snackbar\";\nimport * as Yup from 'yup';\nimport checkIcon from \"../../../assets/images/profile/check.svg\";\nimport errorIcon from \"../../../assets/images/profile/error.svg\";\nimport cx from 'classnames';\nimport { useDesktop } from \"../../../contexts\";\nimport { SideDrawer } from \"../../../components/shared/SideDrawer\";\nimport { useHistory } from 'react-router-dom';\nimport styles from \"./PickupEligibility.module.css\";\nconst schema = Yup.object().shape({\n  pincode: Yup.string().min(6, 'invalid pincode').max(6, 'invalid pincode').required().label('pincode')\n});\n\nfunction PickupEligibility() {\n  _s();\n\n  const [eligible, setEligible] = useState(null);\n  const isDesktop = useDesktop();\n  const history = useHistory();\n\n  const onSubmit = async ({\n    pincode\n  }) => {\n    Loader.show();\n\n    try {\n      const {\n        result\n      } = await Becca.checkPickupEligibility(pincode);\n      setEligible(result);\n    } catch (e) {\n      SnackBar.showError(e);\n    } finally {\n      Loader.hide();\n    }\n  };\n\n  if (isDesktop) {\n    return /*#__PURE__*/React.createElement(SideDrawer, {\n      backButton: true,\n      title: \"Check Pickup Availability\",\n      onClose: () => history.goBack(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Formik, {\n      initialValues: {\n        pincode: ''\n      },\n      validationSchema: schema,\n      onSubmit: onSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }\n    }, ({\n      submitForm,\n      values,\n      isValid\n    }) => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FormikInput, {\n      label: \"Enter Pincode\",\n      placeholder: \"Enter Code\",\n      name: \"pincode\",\n      type: \"number\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"flexCenter\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      label: \"Check Availabilty\",\n      className: styles.button,\n      onClick: submitForm,\n      size: \"large\",\n      disabled: !isValid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }\n    }))), eligible !== null && /*#__PURE__*/React.createElement(Dialog, {\n      open: true,\n      maxWidth: \"md\",\n      onClose: () => setEligible(null),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(DialogContent, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: cx(styles.popup, 'textCenter'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: eligible === true ? checkIcon : errorIcon,\n      alt: \"\",\n      className: styles.icon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: eligible === true ? styles.success : styles.error,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 25\n      }\n    }, \"Pincode -\", ' ', values.pincode), /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.message,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 25\n      }\n    }, eligible === true ? 'Pincode you entered is eligible for pickup' : 'Pincode you entered is not eligible for pickup'), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"flexCenter\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      label: \"ok\",\n      className: styles.okButton,\n      onClick: () => setEligible(null),\n      size: \"medium\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 27\n      }\n    })))))))));\n  }\n\n  return /*#__PURE__*/React.createElement(Drawer, {\n    title: \"Checkup Pickup Availability\",\n    containerClass: styles.drawer,\n    topBarClass: styles.drawer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Formik, {\n    initialValues: {\n      pincode: ''\n    },\n    validationSchema: schema,\n    onSubmit: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }\n  }, ({\n    submitForm,\n    values,\n    isValid\n  }) => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(FormikInput, {\n    label: \"Enter Pincode\",\n    placeholder: \"Enter Code\",\n    name: \"pincode\",\n    type: \"number\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flexCenter\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    label: \"Check Availabilty\",\n    className: styles.button,\n    onClick: submitForm,\n    size: \"large\",\n    disabled: !isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 19\n    }\n  }))), eligible !== null && /*#__PURE__*/React.createElement(Dialog, {\n    open: true,\n    maxWidth: \"md\",\n    fullWidth: true,\n    onClose: () => setEligible(null),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(DialogContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: cx(styles.popup, 'textCenter'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: eligible === true ? checkIcon : errorIcon,\n    alt: \"\",\n    className: styles.icon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 23\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: eligible === true ? styles.success : styles.error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 23\n    }\n  }, \"Pincode -\", ' ', values.pincode), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.message,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 23\n    }\n  }, eligible === true ? 'Pincode you entered is eligible for pickup' : 'Pincode you entered is not eligible for pickup'), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flexCenter\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    label: \"ok\",\n    className: styles.okButton,\n    onClick: () => setEligible(null),\n    size: \"medium\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 25\n    }\n  })))))))));\n}\n\n_s(PickupEligibility, \"UfHAh/bnmvGGkPY4xF+D8ot0/wo=\", false, function () {\n  return [useDesktop, useHistory];\n});\n\n_c = PickupEligibility;\nPickupEligibility.propTypes = {};\nPickupEligibility.defaultProps = {};\nexport default PickupEligibility;\n\nvar _c;\n\n$RefreshReg$(_c, \"PickupEligibility\");","map":{"version":3,"sources":["/home/harish/windo/phoenix/src/containers/profile/pickupEligibility/PickupEligibility.jsx"],"names":["React","useState","Drawer","Dialog","DialogContent","Formik","FormikInput","Button","Becca","Loader","SnackBar","Yup","cx","useDesktop","SideDrawer","useHistory","styles","schema","object","shape","pincode","string","min","max","required","label","PickupEligibility","eligible","setEligible","isDesktop","history","onSubmit","show","result","checkPickupEligibility","e","showError","hide","goBack","container","submitForm","values","isValid","button","popup","checkIcon","errorIcon","icon","success","error","message","okButton","drawer","propTypes","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Drawer } from 'components/shared/Drawer';\nimport { Dialog, DialogContent } from '@material-ui/core';\nimport { Formik } from 'formik';\nimport { FormikInput, Button } from 'phoenix-components';\nimport { Becca } from 'api';\nimport Loader from 'services/loader';\nimport SnackBar from 'services/snackbar';\nimport * as Yup from 'yup';\nimport checkIcon from 'assets/images/profile/check.svg';\nimport errorIcon from 'assets/images/profile/error.svg';\nimport cx from 'classnames';\nimport { useDesktop } from 'contexts';\nimport { SideDrawer } from 'components/shared/SideDrawer';\nimport { useHistory } from 'react-router-dom';\nimport styles from './PickupEligibility.module.css';\n\nconst schema = Yup.object()\n  .shape({\n    pincode: Yup.string().min(6, 'invalid pincode').max(6, 'invalid pincode')\n      .required()\n      .label('pincode'),\n  });\n\nfunction PickupEligibility() {\n  const [eligible, setEligible] = useState(null);\n  const isDesktop = useDesktop();\n  const history = useHistory();\n\n  const onSubmit = async ({ pincode }) => {\n    Loader.show();\n    try {\n      const { result } = await Becca.checkPickupEligibility(pincode);\n      setEligible(result);\n    } catch (e) {\n      SnackBar.showError(e);\n    } finally {\n      Loader.hide();\n    }\n  };\n\n  if (isDesktop) {\n    return (\n      <SideDrawer\n        backButton={true}\n        title=\"Check Pickup Availability\"\n        onClose={() => history.goBack()}\n      >\n        <div className={styles.container}>\n          <Formik\n            initialValues={{ pincode: '' }}\n            validationSchema={schema}\n            onSubmit={onSubmit}\n          >\n            {({ submitForm, values, isValid }) => (\n              <>\n                <div>\n                  <FormikInput\n                    label=\"Enter Pincode\"\n                    placeholder=\"Enter Code\"\n                    name=\"pincode\"\n                    type=\"number\"\n                  />\n                  <div className=\"flexCenter\">\n                    <Button\n                      label=\"Check Availabilty\"\n                      className={styles.button}\n                      onClick={submitForm}\n                      size=\"large\"\n                      disabled={!isValid}\n                    />\n                  </div>\n                </div>\n                {eligible !== null && (\n                  <Dialog open={true} maxWidth=\"md\" onClose={() => setEligible(null)}>\n                    <DialogContent>\n                      <div className={cx(styles.popup, 'textCenter')}>\n                        <img src={eligible === true ? checkIcon : errorIcon} alt=\"\" className={styles.icon} />\n                        <div className={eligible === true ? styles.success : styles.error}>\n                          Pincode -\n                          {' '}\n                          {values.pincode}\n                        </div>\n                        <div className={styles.message}>\n                          {eligible === true\n                            ? 'Pincode you entered is eligible for pickup'\n                            : 'Pincode you entered is not eligible for pickup'}\n                        </div>\n                        <div className=\"flexCenter\">\n                          <Button\n                            label=\"ok\"\n                            className={styles.okButton}\n                            onClick={() => setEligible(null)}\n                            size=\"medium\"\n                          />\n                        </div>\n                      </div>\n                    </DialogContent>\n                  </Dialog>\n                )}\n              </>\n            )}\n          </Formik>\n        </div>\n      </SideDrawer>\n    );\n  }\n\n  return (\n    <Drawer title=\"Checkup Pickup Availability\" containerClass={styles.drawer} topBarClass={styles.drawer}>\n      <div className={styles.container}>\n        <Formik\n          initialValues={{ pincode: '' }}\n          validationSchema={schema}\n          onSubmit={onSubmit}\n        >\n          {({ submitForm, values, isValid }) => (\n            <>\n              <div>\n                <FormikInput\n                  label=\"Enter Pincode\"\n                  placeholder=\"Enter Code\"\n                  name=\"pincode\"\n                  type=\"number\"\n                />\n                <div className=\"flexCenter\">\n                  <Button\n                    label=\"Check Availabilty\"\n                    className={styles.button}\n                    onClick={submitForm}\n                    size=\"large\"\n                    disabled={!isValid}\n                  />\n                </div>\n              </div>\n              {eligible !== null && (\n                <Dialog open={true} maxWidth=\"md\" fullWidth onClose={() => setEligible(null)}>\n                  <DialogContent>\n                    <div className={cx(styles.popup, 'textCenter')}>\n                      <img src={eligible === true ? checkIcon : errorIcon} alt=\"\" className={styles.icon} />\n                      <div className={eligible === true ? styles.success : styles.error}>\n                        Pincode -\n                        {' '}\n                        {values.pincode}\n                      </div>\n                      <div className={styles.message}>\n                        {eligible === true\n                          ? 'Pincode you entered is eligible for pickup'\n                          : 'Pincode you entered is not eligible for pickup'}\n                      </div>\n                      <div className=\"flexCenter\">\n                        <Button\n                          label=\"ok\"\n                          className={styles.okButton}\n                          onClick={() => setEligible(null)}\n                          size=\"medium\"\n                        />\n                      </div>\n                    </div>\n                  </DialogContent>\n                </Dialog>\n              )}\n            </>\n          )}\n        </Formik>\n      </div>\n    </Drawer>\n  );\n}\n\nPickupEligibility.propTypes = {};\n\nPickupEligibility.defaultProps = {};\n\nexport default PickupEligibility;\n"]},"metadata":{},"sourceType":"module"}