{"ast":null,"code":"var _jsxFileName = \"/home/harish/windo/phoenix/src/components/chat/ChatDrawer.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { Drawer, makeStyles, Tab, Tabs } from '@material-ui/core';\nimport { useInfiniteChats, useInfinitePeopleChats, useQueryParams } from \"../../hooks\";\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { InfiniteLoader, List } from 'react-virtualized';\nimport { ChatTile } from \"./ChatTile\";\nimport { Loading } from \"../shared/Loading\";\nimport { ChatRoomDrawer } from \"./ChatRoomDrawer\";\nimport emptyChat from \"../../assets/v2/chat/emptyChat.svg\";\nimport chevronLeft from \"../../assets/images/chat/arrowBack.svg\";\nimport { ChatIcon } from \"./ChatIcon\";\nimport PropTypes from 'prop-types';\nimport styles from \"./ChatDrawer.module.css\";\nconst useStyles = makeStyles(() => ({\n  indicator: {\n    backgroundColor: 'var(--primary)',\n    height: '4px',\n    top: '36px'\n  },\n  tabsWrapper: {\n    height: '60px'\n  },\n  root: {\n    textTransform: 'capitalize'\n  }\n}));\nexport function ChatDrawer({\n  isFixed\n}) {\n  _s();\n\n  const queryParams = useQueryParams();\n  const location = useLocation();\n  const hide = location.pathname === '/products';\n  const history = useHistory();\n  const open = queryParams.has('chat');\n  const roomId = queryParams.get('chat');\n  const type = queryParams.get('type') || 'people';\n  const classes = useStyles();\n  const value = type === 'orders' ? 1 : 0;\n  const [chats, loadMore, hasMore, loading, refreshOrderChats, orderUnread] = useInfiniteChats();\n  const [peopleChats, peopleLoadMore, peopleHasMore, peopleLoading, refreshPeopleChats, peopleUnread] = useInfinitePeopleChats({}, {\n    updatedAt: -1\n  });\n  useEffect(() => {\n    if (type === 'people') {\n      refreshPeopleChats();\n    } else if (type === 'orders') {\n      refreshOrderChats();\n    }\n  }, [type]);\n\n  const refresh = () => {\n    const el = document.getElementById('root');\n\n    if ((el === null || el === void 0 ? void 0 : el.getAttribute('isIdle')) === 'true') {\n      return;\n    }\n\n    refreshPeopleChats();\n    refreshOrderChats();\n  };\n\n  useEffect(() => {\n    if (!open) {\n      const interval = setInterval(refresh, 30000);\n      return () => {\n        clearInterval(interval);\n      };\n    }\n  }, [open]);\n  useEffect(() => {\n    refreshPeopleChats();\n    refreshOrderChats();\n  }, [open]);\n\n  const handleChange = (event, newValue) => {\n    queryParams.set('type', newValue === 1 ? 'orders' : 'people');\n    history.push({\n      search: queryParams.toString()\n    });\n  };\n\n  const rowCount = hasMore ? 10000 : chats.length;\n  const peopleRowCount = peopleHasMore ? 10000 : peopleChats.length;\n\n  const isLoaded = i => !!chats[i];\n\n  const isPeopleLoaded = i => !!peopleChats[i];\n\n  const height = window.screen.height - 120; // eslint-disable-next-line react/no-multi-comp\n\n  const renderItem = chat => {\n    const room = chats[chat.index];\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: chat.key,\n      style: chat.style,\n      className: styles.chatContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ChatTile, {\n      type: \"order\",\n      room: room,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }\n    }));\n  }; // eslint-disable-next-line react/no-multi-comp\n\n\n  const renderPeopleItem = chat => {\n    const room = peopleChats[chat.index];\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: chat.key,\n      style: chat.style,\n      className: styles.chatContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ChatTile, {\n      type: \"people\",\n      room: room,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  if (value === 1 && chats.length === 0 && loading && open) {\n    return /*#__PURE__*/React.createElement(Loading, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 12\n      }\n    });\n  }\n\n  if (value === 0 && peopleChats.length === 0 && peopleLoading && open) {\n    return /*#__PURE__*/React.createElement(Loading, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 12\n      }\n    });\n  }\n\n  if (!open && !hide) {\n    return /*#__PURE__*/React.createElement(ChatIcon, {\n      isFixed: isFixed,\n      unread: peopleUnread + orderUnread,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 12\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(Drawer, {\n    anchor: \"bottom\",\n    open: open,\n    onClose: () => history.goBack(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.container,\n    id: \"chatSection\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.topBar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    onClick: () => {\n      queryParams.delete('chat');\n      queryParams.delete('type');\n      history.push({\n        search: queryParams.toString()\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: styles.back,\n    src: chevronLeft,\n    alt: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.heading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 11\n    }\n  }, \"Chats\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 11\n    }\n  }, \"\\xA0\")), /*#__PURE__*/React.createElement(Tabs, {\n    centered: true,\n    value: value,\n    onChange: handleChange,\n    className: classes.tabsWrapper,\n    TabIndicatorProps: {\n      className: classes.indicator\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Tab, {\n    classes: {\n      root: classes.root\n    },\n    label: peopleUnread > 0 ? `People (${peopleUnread}+)` : 'People',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Tab, {\n    label: orderUnread > 0 ? `Orders (${orderUnread}+)` : 'Orders',\n    classes: {\n      root: classes.root\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 11\n    }\n  })), chats.length > 0 && value === 1 && /*#__PURE__*/React.createElement(InfiniteLoader, {\n    loadMoreRows: loadMore,\n    isRowLoaded: isLoaded,\n    rowCount: rowCount,\n    minimumBatchSize: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 11\n    }\n  }, ({\n    onRowsRendered,\n    registerChild\n  }) => /*#__PURE__*/React.createElement(List, {\n    height: height,\n    onRowsRendered: onRowsRendered,\n    ref: registerChild,\n    rowCount: chats.length,\n    rowHeight: 80,\n    rowRenderer: renderItem,\n    width: window.screen.width,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 15\n    }\n  })), peopleChats.length > 0 && value === 0 && /*#__PURE__*/React.createElement(InfiniteLoader, {\n    loadMoreRows: peopleLoadMore,\n    isRowLoaded: isPeopleLoaded,\n    rowCount: peopleRowCount,\n    minimumBatchSize: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 11\n    }\n  }, ({\n    onRowsRendered,\n    registerChild\n  }) => /*#__PURE__*/React.createElement(List, {\n    height: height,\n    onRowsRendered: onRowsRendered,\n    ref: registerChild,\n    rowCount: peopleChats.length,\n    rowHeight: 80,\n    rowRenderer: renderPeopleItem,\n    width: window.screen.width,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 15\n    }\n  })), (chats.length === 0 || peopleChats.length === 0) && /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.emptyChat,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: emptyChat,\n    alt: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.emptyProductText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 13\n    }\n  }, \"Looks like you've not started any conversations yet!\"))), (roomId === null || roomId === void 0 ? void 0 : roomId.length) > 0 && /*#__PURE__*/React.createElement(ChatRoomDrawer, {\n    roomId: roomId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 9\n    }\n  }));\n}\n\n_s(ChatDrawer, \"9gIK0bIAzaAWwfpWI8g2XP/XVzw=\", false, function () {\n  return [useQueryParams, useLocation, useHistory, useStyles, useInfiniteChats, useInfinitePeopleChats];\n});\n\n_c = ChatDrawer;\nChatDrawer.propTypes = {\n  isFixed: PropTypes.bool\n};\nChatDrawer.defaultProps = {\n  isFixed: true\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatDrawer\");","map":{"version":3,"sources":["/home/harish/windo/phoenix/src/components/chat/ChatDrawer.jsx"],"names":["React","useEffect","Drawer","makeStyles","Tab","Tabs","useInfiniteChats","useInfinitePeopleChats","useQueryParams","useHistory","useLocation","InfiniteLoader","List","ChatTile","Loading","ChatRoomDrawer","ChatIcon","PropTypes","styles","useStyles","indicator","backgroundColor","height","top","tabsWrapper","root","textTransform","ChatDrawer","isFixed","queryParams","location","hide","pathname","history","open","has","roomId","get","type","classes","value","chats","loadMore","hasMore","loading","refreshOrderChats","orderUnread","peopleChats","peopleLoadMore","peopleHasMore","peopleLoading","refreshPeopleChats","peopleUnread","updatedAt","refresh","el","document","getElementById","getAttribute","interval","setInterval","clearInterval","handleChange","event","newValue","set","push","search","toString","rowCount","length","peopleRowCount","isLoaded","i","isPeopleLoaded","window","screen","renderItem","chat","room","index","key","style","chatContainer","renderPeopleItem","goBack","container","topBar","delete","back","chevronLeft","heading","className","onRowsRendered","registerChild","width","emptyChat","emptyProductText","propTypes","bool","defaultProps"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport {\n  Drawer, makeStyles, Tab, Tabs\n} from '@material-ui/core';\nimport { useInfiniteChats, useInfinitePeopleChats, useQueryParams } from 'hooks';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { InfiniteLoader, List } from 'react-virtualized';\nimport { ChatTile } from 'components/chat/ChatTile';\nimport { Loading } from 'components/shared/Loading';\nimport { ChatRoomDrawer } from 'components/chat/ChatRoomDrawer';\nimport emptyChat from 'assets/v2/chat/emptyChat.svg';\nimport chevronLeft from 'assets/images/chat/arrowBack.svg';\nimport { ChatIcon } from 'components/chat/ChatIcon';\nimport PropTypes from 'prop-types';\nimport styles from './ChatDrawer.module.css';\n\nconst useStyles = makeStyles(() => ({\n  indicator: {\n    backgroundColor: 'var(--primary)',\n    height: '4px',\n    top: '36px'\n  },\n  tabsWrapper: {\n    height: '60px',\n  },\n  root: {\n    textTransform: 'capitalize'\n  }\n}));\n\nexport function ChatDrawer({ isFixed }) {\n  const queryParams = useQueryParams();\n  const location = useLocation();\n  const hide = location.pathname === '/products';\n  const history = useHistory();\n  const open = queryParams.has('chat');\n  const roomId = queryParams.get('chat');\n  const type = queryParams.get('type') || 'people';\n  const classes = useStyles();\n  const value = type === 'orders' ? 1 : 0;\n  const [chats, loadMore, hasMore, loading, refreshOrderChats, orderUnread] = useInfiniteChats();\n  const [\n    peopleChats, peopleLoadMore,\n    peopleHasMore, peopleLoading, refreshPeopleChats, peopleUnread\n  ] = useInfinitePeopleChats({}, {\n    updatedAt: -1,\n  });\n\n  useEffect(() => {\n    if (type === 'people') {\n      refreshPeopleChats();\n    } else if (type === 'orders') {\n      refreshOrderChats();\n    }\n  }, [type]);\n\n  const refresh = () => {\n    const el = document.getElementById('root');\n    if ((el?.getAttribute('isIdle') === 'true')) {\n      return;\n    }\n    refreshPeopleChats();\n    refreshOrderChats();\n  };\n\n  useEffect(() => {\n    if (!open) {\n      const interval = setInterval(refresh, 30000);\n      return () => {\n        clearInterval(interval);\n      };\n    }\n  }, [open]);\n\n  useEffect(() => {\n    refreshPeopleChats();\n    refreshOrderChats();\n  }, [open]);\n\n  const handleChange = (event, newValue) => {\n    queryParams.set('type', newValue === 1 ? 'orders' : 'people');\n    history.push({ search: queryParams.toString() });\n  };\n\n  const rowCount = hasMore ? 10000 : chats.length;\n  const peopleRowCount = peopleHasMore ? 10000 : peopleChats.length;\n\n  const isLoaded = i => !!chats[i];\n  const isPeopleLoaded = i => !!peopleChats[i];\n\n  const height = window.screen.height - 120;\n\n  // eslint-disable-next-line react/no-multi-comp\n  const renderItem = (chat) => {\n    const room = chats[chat.index];\n    return (\n      <div key={chat.key} style={chat.style} className={styles.chatContainer}>\n        <ChatTile type=\"order\" room={room} />\n      </div>\n    );\n  };\n\n  // eslint-disable-next-line react/no-multi-comp\n  const renderPeopleItem = (chat) => {\n    const room = peopleChats[chat.index];\n    return (\n      <div key={chat.key} style={chat.style} className={styles.chatContainer}>\n        <ChatTile type=\"people\" room={room} />\n      </div>\n    );\n  };\n\n  if (value === 1 && chats.length === 0 && loading && open) {\n    return <Loading />;\n  }\n\n  if (value === 0 && peopleChats.length === 0 && peopleLoading && open) {\n    return <Loading />;\n  }\n\n  if (!open && !hide) {\n    return <ChatIcon isFixed={isFixed} unread={peopleUnread + orderUnread} />;\n  }\n\n  return (\n    <Drawer\n      anchor=\"bottom\"\n      open={open}\n      onClose={() => history.goBack()}\n    >\n      <div className={styles.container} id=\"chatSection\">\n        <div className={styles.topBar}>\n          <div\n            onClick={() => {\n              queryParams.delete('chat');\n              queryParams.delete('type');\n              history.push({ search: queryParams.toString() });\n            }}>\n            <img className={styles.back} src={chevronLeft} alt=\"\" />\n          </div>\n          <div className={styles.heading}>\n            Chats\n          </div>\n          <div>&nbsp;</div>\n        </div>\n        <Tabs\n          centered\n          value={value}\n          onChange={handleChange}\n          className={classes.tabsWrapper}\n          TabIndicatorProps={{ className: classes.indicator }}\n        >\n          <Tab\n            classes={{ root: classes.root }}\n            label={peopleUnread > 0 ? `People (${peopleUnread}+)` : 'People'}\n          />\n          <Tab\n            label={orderUnread > 0 ? `Orders (${orderUnread}+)` : 'Orders'}\n            classes={{ root: classes.root }}\n          />\n        </Tabs>\n        {chats.length > 0 && value === 1 && (\n          <InfiniteLoader\n            loadMoreRows={loadMore}\n            isRowLoaded={isLoaded}\n            rowCount={rowCount}\n            minimumBatchSize={10}\n          >\n            {({\n              onRowsRendered,\n              registerChild\n            }) => (\n              <List\n                height={height}\n                onRowsRendered={onRowsRendered}\n                ref={registerChild}\n                rowCount={chats.length}\n                rowHeight={80}\n                rowRenderer={renderItem}\n                width={window.screen.width}\n              />\n            )}\n          </InfiniteLoader>\n        )}\n        {peopleChats.length > 0 && value === 0 && (\n          <InfiniteLoader\n            loadMoreRows={peopleLoadMore}\n            isRowLoaded={isPeopleLoaded}\n            rowCount={peopleRowCount}\n            minimumBatchSize={10}\n          >\n            {({\n              onRowsRendered,\n              registerChild\n            }) => (\n              <List\n                height={height}\n                onRowsRendered={onRowsRendered}\n                ref={registerChild}\n                rowCount={peopleChats.length}\n                rowHeight={80}\n                rowRenderer={renderPeopleItem}\n                width={window.screen.width}\n              />\n            )}\n          </InfiniteLoader>\n        )}\n        {(chats.length === 0 || peopleChats.length === 0) && (\n          <div className={styles.emptyChat}>\n            <img src={emptyChat} alt=\"\" />\n            <div className={styles.emptyProductText}>\n              Looks like you've not started any conversations yet!\n            </div>\n          </div>\n        )}\n      </div>\n      {roomId?.length > 0 && (\n        <ChatRoomDrawer roomId={roomId} />\n      )}\n    </Drawer>\n  );\n}\n\nChatDrawer.propTypes = {\n  isFixed: PropTypes.bool\n};\n\nChatDrawer.defaultProps = {\n  isFixed: true\n};\n"]},"metadata":{},"sourceType":"module"}