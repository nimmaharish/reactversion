{"ast":null,"code":"var _jsxFileName = \"/home/harish/windo/phoenix/src/containers/profile/paymentMode/CustomPayments.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useToggle } from \"../../../hooks/common\";\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { Button } from 'phoenix-components';\nimport { SideDrawer } from \"../../../components/shared/SideDrawer\";\nimport { Drawer } from \"../../../components/shared/Drawer\";\nimport { useField } from 'formik';\nimport { useDesktop } from \"../../../contexts\";\nimport Form from \"./Form\";\nimport Card from \"./Card\";\nimport styles from \"./CustomPayments.module.css\";\n\nfunction CustomPayments({\n  toggleSave\n}) {\n  _s();\n\n  const isDesktop = useDesktop();\n  const [index, setIndex] = useState(0);\n  const [{\n    value: customPayments = []\n  },, {\n    setValue\n  }] = useField('custompayment.configured');\n  const [,, {\n    setValue: setCpEnabled\n  }] = useField('custompayment.enabled');\n  const isEmpty = customPayments.length === 0;\n  const [form, toggleForm, setForm] = useToggle(false);\n\n  const addPayment = () => {\n    const newItems = customPayments.concat({\n      mode: '',\n      details: '',\n      receiptsRequired: true,\n      status: 'live',\n      isNew: true\n    });\n    setValue(newItems);\n    setCpEnabled(true);\n    toggleForm();\n  };\n\n  const closeDrawer = () => {\n    const {\n      mode,\n      details\n    } = customPayments[index];\n\n    if (!mode && !details) {\n      const all = customPayments.filter((x, i) => i !== index);\n      setValue(all);\n      toggleSave();\n    }\n\n    toggleForm();\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, !isDesktop && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, form && /*#__PURE__*/React.createElement(Drawer, {\n    onClose: closeDrawer,\n    closeButton: true,\n    title: \"Details of Custom Payment\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    index: index,\n    onSave: () => {\n      toggleForm();\n      toggleSave();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 15\n    }\n  })), isEmpty && /*#__PURE__*/React.createElement(\"div\", {\n    className: cx(styles.btnSection, 'flexCenter'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    primary: false,\n    label: \"Add\",\n    size: \"small\",\n    onClick: addPayment,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 15\n    }\n  })), !isEmpty && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: cx(styles.addedPayments, 'flexCenter'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.label,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }\n  }, \" Added Payments \")), customPayments.map((x, i) => /*#__PURE__*/React.createElement(Card, {\n    key: i,\n    toggleSave: toggleSave,\n    index: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 45\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: cx(styles.btnSection, 'flexCenter'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    label: \"Add More\",\n    size: \"small\",\n    onClick: () => {\n      setIndex(customPayments === null || customPayments === void 0 ? void 0 : customPayments.length);\n      addPayment();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 17\n    }\n  })))), isDesktop && /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.main,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, form && /*#__PURE__*/React.createElement(SideDrawer, {\n    backButton: true,\n    onClick: toggleForm,\n    onClose: () => setForm(false),\n    title: \"Use custom payments\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    index: index,\n    onSave: () => {\n      toggleForm();\n      toggleSave();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 15\n    }\n  })), isEmpty && /*#__PURE__*/React.createElement(\"div\", {\n    className: cx(styles.btnSection, 'flexCenter'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    primary: false,\n    label: \"Add\",\n    size: \"small\",\n    onClick: addPayment,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 15\n    }\n  })), !isEmpty && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: cx(styles.addedPayments, 'flexCenter'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.label,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 17\n    }\n  }, \" Added Payments \")), customPayments.map((x, i) => /*#__PURE__*/React.createElement(Card, {\n    index: i,\n    toggleSave: toggleSave,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 45\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: cx(styles.btnSection, 'flexCenter'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    primary: false,\n    label: \"Add More\",\n    size: \"small\",\n    onClick: () => {\n      setIndex(customPayments === null || customPayments === void 0 ? void 0 : customPayments.length);\n      addPayment();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 17\n    }\n  })))));\n}\n\n_s(CustomPayments, \"fuLD40W5l5BrQO6H7DWsqL9obKY=\", false, function () {\n  return [useDesktop, useField, useField, useToggle];\n});\n\n_c = CustomPayments;\nCustomPayments.propTypes = {\n  toggleSave: PropTypes.func\n};\nCustomPayments.defaultProps = {\n  toggleSave: () => {}\n};\nexport default CustomPayments;\n\nvar _c;\n\n$RefreshReg$(_c, \"CustomPayments\");","map":{"version":3,"sources":["/home/harish/windo/phoenix/src/containers/profile/paymentMode/CustomPayments.jsx"],"names":["React","useState","useToggle","PropTypes","cx","Button","SideDrawer","Drawer","useField","useDesktop","Form","Card","styles","CustomPayments","toggleSave","isDesktop","index","setIndex","value","customPayments","setValue","setCpEnabled","isEmpty","length","form","toggleForm","setForm","addPayment","newItems","concat","mode","details","receiptsRequired","status","isNew","closeDrawer","all","filter","x","i","btnSection","addedPayments","label","map","main","propTypes","func","defaultProps"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,SAAT;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,SAASC,MAAT,QAAuB,oBAAvB;AACA,SAASC,UAAT;AACA,SAASC,MAAT;AACA,SAASC,QAAT,QAAyB,QAAzB;AACA,SAASC,UAAT;AACA,OAAOC,IAAP;AACA,OAAOC,IAAP;AACA,OAAOC,MAAP;;AAEA,SAASC,cAAT,CAAwB;AAAEC,EAAAA;AAAF,CAAxB,EAAwC;AAAA;;AACtC,QAAMC,SAAS,GAAGN,UAAU,EAA5B;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBhB,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM,CAAC;AAAEiB,IAAAA,KAAK,EAAEC,cAAc,GAAG;AAA1B,GAAD,GAAmC;AAAEC,IAAAA;AAAF,GAAnC,IAAmDZ,QAAQ,CAAC,0BAAD,CAAjE;AACA,QAAM,IAAK;AAAEY,IAAAA,QAAQ,EAAEC;AAAZ,GAAL,IAAmCb,QAAQ,CAAC,uBAAD,CAAjD;AACA,QAAMc,OAAO,GAAGH,cAAc,CAACI,MAAf,KAA0B,CAA1C;AACA,QAAM,CAACC,IAAD,EAAOC,UAAP,EAAmBC,OAAnB,IAA8BxB,SAAS,CAAC,KAAD,CAA7C;;AAEA,QAAMyB,UAAU,GAAG,MAAM;AACvB,UAAMC,QAAQ,GAAGT,cAAc,CAACU,MAAf,CAAsB;AACrCC,MAAAA,IAAI,EAAE,EAD+B;AAErCC,MAAAA,OAAO,EAAE,EAF4B;AAGrCC,MAAAA,gBAAgB,EAAE,IAHmB;AAIrCC,MAAAA,MAAM,EAAE,MAJ6B;AAKrCC,MAAAA,KAAK,EAAE;AAL8B,KAAtB,CAAjB;AAOAd,IAAAA,QAAQ,CAACQ,QAAD,CAAR;AACAP,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAI,IAAAA,UAAU;AACX,GAXD;;AAaA,QAAMU,WAAW,GAAG,MAAM;AACxB,UAAM;AAAEL,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAoBZ,cAAc,CAACH,KAAD,CAAxC;;AACA,QAAI,CAACc,IAAD,IAAS,CAACC,OAAd,EAAuB;AACrB,YAAMK,GAAG,GAAGjB,cAAc,CAACkB,MAAf,CAAsB,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,KAAKvB,KAAtC,CAAZ;AACAI,MAAAA,QAAQ,CAACgB,GAAD,CAAR;AACAtB,MAAAA,UAAU;AACX;;AACDW,IAAAA,UAAU;AACX,GARD;;AAUA,sBACE,0CACG,CAACV,SAAD,iBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGS,IAAI,iBACH,oBAAC,MAAD;AACE,IAAA,OAAO,EAAEW,WADX;AAEE,IAAA,WAAW,MAFb;AAGE,IAAA,KAAK,EAAC,2BAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKE,oBAAC,IAAD;AACE,IAAA,KAAK,EAAEnB,KADT;AAEE,IAAA,MAAM,EAAE,MAAM;AACZS,MAAAA,UAAU;AACVX,MAAAA,UAAU;AACX,KALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,CAFJ,EAgBGQ,OAAO,iBACN;AAAK,IAAA,SAAS,EAAElB,EAAE,CAACQ,MAAM,CAAC4B,UAAR,EAAoB,YAApB,CAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AACE,IAAA,OAAO,EAAE,KADX;AAEE,IAAA,KAAK,EAAC,KAFR;AAGE,IAAA,IAAI,EAAC,OAHP;AAIE,IAAA,OAAO,EAAEb,UAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAjBJ,EA0BG,CAACL,OAAD,iBACC,uDACE;AAAK,IAAA,SAAS,EAAElB,EAAE,CAACQ,MAAM,CAAC6B,aAAR,EAAuB,YAAvB,CAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAE7B,MAAM,CAAC8B,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,CADF,EAIGvB,cAAc,CAACwB,GAAf,CAAmB,CAACL,CAAD,EAAIC,CAAJ,kBAAU,oBAAC,IAAD;AAAM,IAAA,GAAG,EAAEA,CAAX;AAAc,IAAA,UAAU,EAAEzB,UAA1B;AAAsC,IAAA,KAAK,EAAEyB,CAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA7B,CAJH,eAKE;AAAK,IAAA,SAAS,EAAEnC,EAAE,CAACQ,MAAM,CAAC4B,UAAR,EAAoB,YAApB,CAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AACE,IAAA,KAAK,EAAC,UADR;AAEE,IAAA,IAAI,EAAC,OAFP;AAGE,IAAA,OAAO,EAAE,MAAM;AACbvB,MAAAA,QAAQ,CAACE,cAAD,aAACA,cAAD,uBAACA,cAAc,CAAEI,MAAjB,CAAR;AACAI,MAAAA,UAAU;AACX,KANH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CALF,CA3BJ,CAFJ,EAgDGZ,SAAS,iBACR;AAAK,IAAA,SAAS,EAAEH,MAAM,CAACgC,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGpB,IAAI,iBACH,oBAAC,UAAD;AACE,IAAA,UAAU,EAAE,IADd;AAEE,IAAA,OAAO,EAAEC,UAFX;AAGE,IAAA,OAAO,EAAE,MAAMC,OAAO,CAAC,KAAD,CAHxB;AAIE,IAAA,KAAK,EAAC,qBAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAME,oBAAC,IAAD;AACE,IAAA,KAAK,EAAEV,KADT;AAEE,IAAA,MAAM,EAAE,MAAM;AACZS,MAAAA,UAAU;AACVX,MAAAA,UAAU;AACX,KALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CAFJ,EAiBGQ,OAAO,iBACN;AAAK,IAAA,SAAS,EAAElB,EAAE,CAACQ,MAAM,CAAC4B,UAAR,EAAoB,YAApB,CAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AACE,IAAA,OAAO,EAAE,KADX;AAEE,IAAA,KAAK,EAAC,KAFR;AAGE,IAAA,IAAI,EAAC,OAHP;AAIE,IAAA,OAAO,EAAEb,UAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAlBJ,EA2BG,CAACL,OAAD,iBACC,uDACE;AAAK,IAAA,SAAS,EAAElB,EAAE,CAACQ,MAAM,CAAC6B,aAAR,EAAuB,YAAvB,CAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAE7B,MAAM,CAAC8B,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,CADF,EAIGvB,cAAc,CAACwB,GAAf,CAAmB,CAACL,CAAD,EAAIC,CAAJ,kBAAU,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEA,CAAb;AAAgB,IAAA,UAAU,EAAEzB,UAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA7B,CAJH,eAKE;AAAK,IAAA,SAAS,EAAEV,EAAE,CAACQ,MAAM,CAAC4B,UAAR,EAAoB,YAApB,CAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AACE,IAAA,OAAO,EAAE,KADX;AAEE,IAAA,KAAK,EAAC,UAFR;AAGE,IAAA,IAAI,EAAC,OAHP;AAIE,IAAA,OAAO,EAAE,MAAM;AACbvB,MAAAA,QAAQ,CAACE,cAAD,aAACA,cAAD,uBAACA,cAAc,CAAEI,MAAjB,CAAR;AACAI,MAAAA,UAAU;AACX,KAPH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CALF,CA5BJ,CAjDJ,CADF;AAqGD;;GApIQd,c;UACWJ,U,EAEuCD,Q,EAChBA,Q,EAELN,S;;;KAN7BW,c;AAsITA,cAAc,CAACgC,SAAf,GAA2B;AACzB/B,EAAAA,UAAU,EAAEX,SAAS,CAAC2C;AADG,CAA3B;AAIAjC,cAAc,CAACkC,YAAf,GAA8B;AAC5BjC,EAAAA,UAAU,EAAE,MAAM,CAAG;AADO,CAA9B;AAIA,eAAeD,cAAf","sourcesContent":["import React, { useState } from 'react';\nimport { useToggle } from 'hooks/common';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { Button } from 'phoenix-components';\nimport { SideDrawer } from 'components/shared/SideDrawer';\nimport { Drawer } from 'components/shared/Drawer';\nimport { useField } from 'formik';\nimport { useDesktop } from 'contexts';\nimport Form from './Form';\nimport Card from './Card';\nimport styles from './CustomPayments.module.css';\n\nfunction CustomPayments({ toggleSave }) {\n  const isDesktop = useDesktop();\n  const [index, setIndex] = useState(0);\n  const [{ value: customPayments = [] }, , { setValue }] = useField('custompayment.configured');\n  const [, , { setValue: setCpEnabled }] = useField('custompayment.enabled');\n  const isEmpty = customPayments.length === 0;\n  const [form, toggleForm, setForm] = useToggle(false);\n\n  const addPayment = () => {\n    const newItems = customPayments.concat({\n      mode: '',\n      details: '',\n      receiptsRequired: true,\n      status: 'live',\n      isNew: true,\n    });\n    setValue(newItems);\n    setCpEnabled(true);\n    toggleForm();\n  };\n\n  const closeDrawer = () => {\n    const { mode, details } = customPayments[index];\n    if (!mode && !details) {\n      const all = customPayments.filter((x, i) => i !== index);\n      setValue(all);\n      toggleSave();\n    }\n    toggleForm();\n  };\n\n  return (\n    <>\n      {!isDesktop && (\n        <div>\n          {form && (\n            <Drawer\n              onClose={closeDrawer}\n              closeButton\n              title=\"Details of Custom Payment\"\n            >\n              <Form\n                index={index}\n                onSave={() => {\n                  toggleForm();\n                  toggleSave();\n                }}\n              />\n            </Drawer>\n          )}\n          {isEmpty && (\n            <div className={cx(styles.btnSection, 'flexCenter')}>\n              <Button\n                primary={false}\n                label=\"Add\"\n                size=\"small\"\n                onClick={addPayment}\n              />\n            </div>\n          )}\n          {!isEmpty && (\n            <>\n              <div className={cx(styles.addedPayments, 'flexCenter')}>\n                <div className={styles.label}> Added Payments </div>\n              </div>\n              {customPayments.map((x, i) => <Card key={i} toggleSave={toggleSave} index={i} />)}\n              <div className={cx(styles.btnSection, 'flexCenter')}>\n                <Button\n                  label=\"Add More\"\n                  size=\"small\"\n                  onClick={() => {\n                    setIndex(customPayments?.length);\n                    addPayment();\n                  }}\n                />\n              </div>\n            </>\n          )}\n        </div>\n      )}\n      {isDesktop && (\n        <div className={styles.main}>\n          {form && (\n            <SideDrawer\n              backButton={true}\n              onClick={toggleForm}\n              onClose={() => setForm(false)}\n              title=\"Use custom payments\"\n            >\n              <Form\n                index={index}\n                onSave={() => {\n                  toggleForm();\n                  toggleSave();\n                }}\n              />\n            </SideDrawer>\n          )}\n          {isEmpty && (\n            <div className={cx(styles.btnSection, 'flexCenter')}>\n              <Button\n                primary={false}\n                label=\"Add\"\n                size=\"small\"\n                onClick={addPayment}\n              />\n            </div>\n          )}\n          {!isEmpty && (\n            <>\n              <div className={cx(styles.addedPayments, 'flexCenter')}>\n                <div className={styles.label}> Added Payments </div>\n              </div>\n              {customPayments.map((x, i) => <Card index={i} toggleSave={toggleSave} />)}\n              <div className={cx(styles.btnSection, 'flexCenter')}>\n                <Button\n                  primary={false}\n                  label=\"Add More\"\n                  size=\"small\"\n                  onClick={() => {\n                    setIndex(customPayments?.length);\n                    addPayment();\n                  }}\n                />\n              </div>\n            </>\n          )}\n        </div>\n      )}\n    </>\n\n  );\n}\n\nCustomPayments.propTypes = {\n  toggleSave: PropTypes.func,\n};\n\nCustomPayments.defaultProps = {\n  toggleSave: () => { }\n};\n\nexport default CustomPayments;\n"]},"metadata":{},"sourceType":"module"}