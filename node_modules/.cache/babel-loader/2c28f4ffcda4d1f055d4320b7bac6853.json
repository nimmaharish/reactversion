{"ast":null,"code":"var _jsxFileName = \"/home/harish/windo/phoenix/src/containers/payments/StripeConnect.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { Loading } from \"../../components/shared/Loading\";\nimport { useQueryParams } from \"../../hooks\";\nimport { SnackBar } from \"../../services\";\nimport { useHistory } from 'react-router-dom';\nimport Loader from \"../../services/loader\";\nimport { Becca } from \"../../api\";\nimport { useRefreshShop } from \"../../contexts\";\n\nfunction StripeConnect() {\n  _s();\n\n  const params = useQueryParams();\n  const history = useHistory();\n  const refresh = useRefreshShop();\n\n  const checkStatus = async (pgTid, id, interval) => {\n    try {\n      const {\n        enabled\n      } = await Becca.pollAccountStatus('stripe');\n\n      if (enabled) {\n        clearInterval(interval);\n        refresh();\n        history.replace('/payments/?open=2');\n        SnackBar.show('Connected to stripe account', 'success');\n      }\n    } catch (e) {\n      console.error(e);\n    }\n\n    return false;\n  };\n\n  useEffect(() => {\n    if (params.has('success')) {\n      Loader.show();\n      const interval = setInterval(async () => {\n        checkStatus(interval);\n      }, 5000);\n      return () => {\n        clearInterval(interval);\n      };\n    }\n\n    if (params.has('cancel')) {\n      SnackBar.show('Failed to connect with stripe try again', 'error', 10000);\n      history.replace('/payments/?open=2');\n    }\n  }, []);\n  return /*#__PURE__*/React.createElement(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  });\n}\n\n_s(StripeConnect, \"aiSLVfedDn5Nz/vFo9KITO8Acrg=\", false, function () {\n  return [useQueryParams, useHistory, useRefreshShop];\n});\n\n_c = StripeConnect;\nStripeConnect.propTypes = {};\nStripeConnect.defaultProps = {};\nexport default StripeConnect;\n\nvar _c;\n\n$RefreshReg$(_c, \"StripeConnect\");","map":{"version":3,"sources":["/home/harish/windo/phoenix/src/containers/payments/StripeConnect.jsx"],"names":["React","useEffect","Loading","useQueryParams","SnackBar","useHistory","Loader","Becca","useRefreshShop","StripeConnect","params","history","refresh","checkStatus","pgTid","id","interval","enabled","pollAccountStatus","clearInterval","replace","show","e","console","error","has","setInterval","propTypes","defaultProps"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT;AACA,SAASC,cAAT;AACA,SAASC,QAAT;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,MAAP;AACA,SAASC,KAAT;AACA,SAASC,cAAT;;AAEA,SAASC,aAAT,GAAyB;AAAA;;AACvB,QAAMC,MAAM,GAAGP,cAAc,EAA7B;AACA,QAAMQ,OAAO,GAAGN,UAAU,EAA1B;AACA,QAAMO,OAAO,GAAGJ,cAAc,EAA9B;;AAEA,QAAMK,WAAW,GAAG,OAAOC,KAAP,EAAcC,EAAd,EAAkBC,QAAlB,KAA+B;AACjD,QAAI;AACF,YAAM;AAAEC,QAAAA;AAAF,UAAc,MAAMV,KAAK,CAACW,iBAAN,CAAwB,QAAxB,CAA1B;;AACA,UAAID,OAAJ,EAAa;AACXE,QAAAA,aAAa,CAACH,QAAD,CAAb;AACAJ,QAAAA,OAAO;AACPD,QAAAA,OAAO,CAACS,OAAR,CAAgB,mBAAhB;AACAhB,QAAAA,QAAQ,CAACiB,IAAT,CAAc,6BAAd,EAA6C,SAA7C;AACD;AACF,KARD,CAQE,OAAOC,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACD;;AACD,WAAO,KAAP;AACD,GAbD;;AAeArB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIS,MAAM,CAACe,GAAP,CAAW,SAAX,CAAJ,EAA2B;AACzBnB,MAAAA,MAAM,CAACe,IAAP;AACA,YAAML,QAAQ,GAAGU,WAAW,CAAC,YAAY;AACvCb,QAAAA,WAAW,CAACG,QAAD,CAAX;AACD,OAF2B,EAEzB,IAFyB,CAA5B;AAGA,aAAO,MAAM;AACXG,QAAAA,aAAa,CAACH,QAAD,CAAb;AACD,OAFD;AAGD;;AAED,QAAIN,MAAM,CAACe,GAAP,CAAW,QAAX,CAAJ,EAA0B;AACxBrB,MAAAA,QAAQ,CAACiB,IAAT,CAAc,yCAAd,EAAyD,OAAzD,EAAkE,KAAlE;AACAV,MAAAA,OAAO,CAACS,OAAR,CAAgB,mBAAhB;AACD;AACF,GAfQ,EAeN,EAfM,CAAT;AAgBA,sBACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAGD;;GAvCQX,a;UACQN,c,EACCE,U,EACAG,c;;;KAHTC,a;AAyCTA,aAAa,CAACkB,SAAd,GAA0B,EAA1B;AAEAlB,aAAa,CAACmB,YAAd,GAA6B,EAA7B;AAEA,eAAenB,aAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport { Loading } from 'components/shared/Loading';\nimport { useQueryParams } from 'hooks';\nimport { SnackBar } from 'services';\nimport { useHistory } from 'react-router-dom';\nimport Loader from 'services/loader';\nimport { Becca } from 'api';\nimport { useRefreshShop } from 'contexts';\n\nfunction StripeConnect() {\n  const params = useQueryParams();\n  const history = useHistory();\n  const refresh = useRefreshShop();\n\n  const checkStatus = async (pgTid, id, interval) => {\n    try {\n      const { enabled } = await Becca.pollAccountStatus('stripe');\n      if (enabled) {\n        clearInterval(interval);\n        refresh();\n        history.replace('/payments/?open=2');\n        SnackBar.show('Connected to stripe account', 'success');\n      }\n    } catch (e) {\n      console.error(e);\n    }\n    return false;\n  };\n\n  useEffect(() => {\n    if (params.has('success')) {\n      Loader.show();\n      const interval = setInterval(async () => {\n        checkStatus(interval);\n      }, 5000);\n      return () => {\n        clearInterval(interval);\n      };\n    }\n\n    if (params.has('cancel')) {\n      SnackBar.show('Failed to connect with stripe try again', 'error', 10000);\n      history.replace('/payments/?open=2');\n    }\n  }, []);\n  return (\n    <Loading />\n  );\n}\n\nStripeConnect.propTypes = {};\n\nStripeConnect.defaultProps = {};\n\nexport default StripeConnect;\n"]},"metadata":{},"sourceType":"module"}