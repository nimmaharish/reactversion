{"ast":null,"code":"var _jsxFileName = \"/home/harish/windo/phoenix/src/components/common/CountryDrawer.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Drawer } from \"../shared/Drawer\";\nimport { SideDrawer } from \"../shared/SideDrawer\";\nimport { useDesktop } from \"../../contexts\";\nimport { Search } from 'phoenix-components';\nimport { getCountries } from \"../../utils/countries\";\nimport checkedIcon from \"../../assets/images/areasServed/checked.svg\";\nimport { Button } from 'phoenix-components';\nimport { FooterButton } from \"./FooterButton\";\nimport styles from \"./CountryDrawer.module.css\";\nexport function CountryDrawer({\n  onSelect,\n  onBack,\n  multiSelect,\n  countriesList,\n  onSave,\n  type\n}) {\n  _s();\n\n  const isDesktop = useDesktop();\n  const [query, setQuery] = useState('');\n\n  const getFiltered = () => {\n    if (query.length > 0) {\n      return getCountries().filter(x => x.label.toLowerCase().indexOf(query.toLowerCase()) > -1);\n    }\n\n    return getCountries();\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, !isDesktop && /*#__PURE__*/React.createElement(Drawer, {\n    title: \"Select Country\",\n    onClose: onBack,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.drawer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.search,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Search, {\n    value: query,\n    placeholder: \"Search for Country\",\n    onChange: e => setQuery(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.label,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 15\n    }\n  }, \"Choose Your Country\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.section,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 15\n    }\n  }, getFiltered().map(x => /*#__PURE__*/React.createElement(\"div\", {\n    onClick: () => onSelect({\n      currrency: x.currency,\n      value: multiSelect ? x.countryName : x.countryName\n    }),\n    className: styles.country,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 19\n    }\n  }, !multiSelect ? `${x.label} (${x.dial}) - ${x.currency}` : `${x.label}`, multiSelect && (type === 'included' ? countriesList.find(a => !!(a.name === x.countryName)) : countriesList.find(a => !!(a === x.countryName))) && /*#__PURE__*/React.createElement(\"img\", {\n    src: checkedIcon,\n    alt: \"checked\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 23\n    }\n  })))), multiSelect && /*#__PURE__*/React.createElement(FooterButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    className: styles.button,\n    label: \"Save\",\n    color: \"primary\",\n    onClick: onSave,\n    fullWidth: true,\n    bordered: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 19\n    }\n  })))), isDesktop && /*#__PURE__*/React.createElement(SideDrawer, {\n    onClose: onBack,\n    closeButton: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.drawer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.search,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Search, {\n    value: query,\n    placeholder: \"Search for Country\",\n    onChange: e => setQuery(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.label1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 15\n    }\n  }, \"Choose Your Country\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.section,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 15\n    }\n  }, getFiltered().map(x => /*#__PURE__*/React.createElement(\"div\", {\n    onClick: () => onSelect({\n      currrency: x.currency,\n      value: multiSelect ? x.countryName : x.countryName\n    }),\n    className: styles.country,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 19\n    }\n  }, !multiSelect ? `${x.label} (${x.dial}) - ${x.currency}` : `${x.label}`, multiSelect && countriesList.find(a => !!(a.name === x.countryName)) && /*#__PURE__*/React.createElement(\"img\", {\n    src: checkedIcon,\n    alt: \"checked\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 23\n    }\n  })))))));\n}\n\n_s(CountryDrawer, \"rQTT14XC4VNrCAOF9VRVwTmAlC4=\", false, function () {\n  return [useDesktop];\n});\n\n_c = CountryDrawer;\nCountryDrawer.propTypes = {\n  onSelect: PropTypes.func.isRequired,\n  onBack: PropTypes.func.isRequired,\n  multiSelect: PropTypes.bool,\n  countriesList: PropTypes.array,\n  onSave: PropTypes.func,\n  type: PropTypes.string\n};\nCountryDrawer.defaultProps = {\n  multiSelect: false,\n  countriesList: [],\n  onSave: null,\n  type: ''\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"CountryDrawer\");","map":{"version":3,"sources":["/home/harish/windo/phoenix/src/components/common/CountryDrawer.jsx"],"names":["React","useState","PropTypes","Drawer","SideDrawer","useDesktop","Search","getCountries","Button","FooterButton","styles","CountryDrawer","onSelect","onBack","multiSelect","countriesList","onSave","type","isDesktop","query","setQuery","getFiltered","length","filter","x","label","toLowerCase","indexOf","drawer","search","e","target","value","section","map","currrency","currency","countryName","country","dial","find","a","name","checkedIcon","button","label1","propTypes","func","isRequired","bool","array","string","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Drawer } from 'components/shared/Drawer';\nimport { SideDrawer } from 'components/shared/SideDrawer';\nimport { useDesktop } from 'contexts';\nimport { Search } from 'phoenix-components';\nimport { getCountries } from 'utils/countries';\nimport checkedIcon from 'assets/images/areasServed/checked.svg';\nimport { Button } from 'phoenix-components';\nimport { FooterButton } from 'components/common/FooterButton';\nimport styles from './CountryDrawer.module.css';\n\nexport function CountryDrawer({\n  onSelect,\n  onBack,\n  multiSelect,\n  countriesList,\n  onSave,\n  type,\n}) {\n  const isDesktop = useDesktop();\n\n  const [query, setQuery] = useState('');\n\n  const getFiltered = () => {\n    if (query.length > 0) {\n      return getCountries().filter(x => x.label.toLowerCase().indexOf(query.toLowerCase()) > -1);\n    }\n    return getCountries();\n  };\n\n  return (\n    <>\n      {!isDesktop\n        && (\n          <Drawer title=\"Select Country\" onClose={onBack}>\n            <div className={styles.drawer}>\n              <div className={styles.search}>\n                <Search\n                  value={query}\n                  placeholder=\"Search for Country\"\n                  onChange={(e) => setQuery(e.target.value)}\n                />\n              </div>\n              <div className={styles.label}>\n                Choose Your Country\n              </div>\n              <div className={styles.section}>\n                {getFiltered().map(x => (\n                  <div\n                    onClick={() => onSelect({\n                      currrency: x.currency,\n                      value:\n                        (multiSelect ? x.countryName : x.countryName)\n                    })}\n                    className={styles.country}\n                  >\n                    {!multiSelect ? `${x.label} (${x.dial}) - ${x.currency}` : `${x.label}`}\n                    {multiSelect && (type === 'included' ? countriesList.find(a => !!(a.name === x.countryName))\n                      : countriesList.find(a => !!(a === x.countryName))) && (\n                      <img src={checkedIcon} alt=\"checked\" />\n                    )}\n                  </div>\n                ))}\n              </div>\n              {multiSelect && (\n                <FooterButton>\n                  <Button\n                    className={styles.button}\n                    label=\"Save\"\n                    color=\"primary\"\n                    onClick={onSave}\n                    fullWidth={true}\n                    bordered={false}\n                  />\n                </FooterButton>\n              )}\n            </div>\n          </Drawer>\n        )}\n      {isDesktop\n        && (\n          <SideDrawer\n            onClose={onBack}\n            closeButton={true}\n          >\n            <div className={styles.drawer}>\n              <div className={styles.search}>\n                <Search\n                  value={query}\n                  placeholder=\"Search for Country\"\n                  onChange={(e) => setQuery(e.target.value)}\n                />\n              </div>\n              <div className={styles.label1}>\n                Choose Your Country\n              </div>\n              <div className={styles.section}>\n                {getFiltered().map(x => (\n                  <div\n                    onClick={() => onSelect({\n                      currrency: x.currency,\n                      value:\n                        (multiSelect ? x.countryName : x.countryName)\n                    })}\n                    className={styles.country}\n                  >\n                    {!multiSelect ? `${x.label} (${x.dial}) - ${x.currency}` : `${x.label}`}\n                    {multiSelect && countriesList.find(a => !!(a.name === x.countryName)) && (\n                      <img src={checkedIcon} alt=\"checked\" />\n                    )}\n                  </div>\n                ))}\n              </div>\n            </div>\n          </SideDrawer>\n        )}\n    </>\n  );\n}\n\nCountryDrawer.propTypes = {\n  onSelect: PropTypes.func.isRequired,\n  onBack: PropTypes.func.isRequired,\n  multiSelect: PropTypes.bool,\n  countriesList: PropTypes.array,\n  onSave: PropTypes.func,\n  type: PropTypes.string,\n};\n\nCountryDrawer.defaultProps = {\n  multiSelect: false,\n  countriesList: [],\n  onSave: null,\n  type: '',\n};\n"]},"metadata":{},"sourceType":"module"}