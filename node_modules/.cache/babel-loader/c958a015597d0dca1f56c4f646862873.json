{"ast":null,"code":"var _jsxFileName = \"/home/harish/windo/phoenix/src/components/products/Quantity.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport cx from 'classnames';\nimport { FormikInput, Clickable } from 'phoenix-components';\nimport { Switch } from 'phoenix-components';\nimport { useField } from 'formik';\nimport styles from \"./Quantity.module.css\";\nconst TABS = [{\n  label: 'Limited',\n  value: 'finite'\n}, {\n  label: 'Unlimited',\n  value: 'infinite'\n}];\nexport default function Quantity() {\n  _s();\n\n  //   const isDesktop = useDesktop();\n  const [{\n    value: enabled\n  },, {\n    setValue\n  }] = useField('quantity.enabled'); // eslint-disable-next-line array-bracket-spacing\n\n  const [{\n    value: quantity\n  },,] = useField('quantity'); // eslint-disable-next-line array-bracket-spacing\n\n  const [{\n    value: type\n  },, {\n    setValue: setType\n  }] = useField('quantity.type');\n\n  const operator = (a, b) => {\n    if (quantity.minQuantity >= quantity.group) {\n      return a + b;\n    }\n\n    return quantity.group * b;\n  };\n\n  const getMinValue = () => quantity.minQuantity > quantity.group ? quantity.minQuantity : quantity.group;\n\n  const getString = () => {\n    if (type === 'infinite') {\n      return 'unlimited';\n    }\n\n    let index = 0;\n    const options = [];\n\n    while (index <= quantity.maxQuantity) {\n      const temp = {};\n      const minValue = getMinValue();\n      temp.value = operator(minValue, index);\n      temp.label = operator(minValue, index);\n      options.push(temp); // eslint-disable-next-line operator-assignment\n\n      index = +(index + (quantity.minQuantity >= quantity.group ? quantity.group : 1));\n\n      if (index === 0) {\n        index = quantity.maxQuantity + 1;\n      }\n    }\n\n    const list = options.filter(x => x.value <= quantity.maxQuantity && x.value > 0).map(x => x.value);\n\n    if (list.length > 4) {\n      return `${list[0]}, ${list[1]}, ${list[2]} ... upto ${list[list.length - 1]} items`;\n    }\n\n    return list.join(',');\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.head,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, \"Order Quantity\", /*#__PURE__*/React.createElement(Switch, {\n    active: enabled,\n    onChange: () => {\n      setValue(!enabled);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.title1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FormikInput, {\n    variant: \"outlined\",\n    name: \"quantity.minQuantity\",\n    type: \"number\",\n    label: \"Minimum Quantity\",\n    placeholder: \"e.g.1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.head1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, \"Maximum Order Quantity\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.tabs,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  }, TABS.map(t => /*#__PURE__*/React.createElement(Clickable, {\n    onClick: () => {\n      setType(t.value);\n    },\n    className: cx(styles.tab, {\n      [styles.active]: t.value === (type || 'infinite')\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 15\n    }\n  }, t.label))))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }, type === 'finite' && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormikInput, {\n    variant: \"outlined\",\n    name: \"quantity.maxQuantity\",\n    type: \"number\",\n    label: \"Maximum Quantity\",\n    placeholder: \"e.g.1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(FormikInput, {\n    variant: \"outlined\",\n    name: \"quantity.group\",\n    type: \"number\",\n    label: \"Group Of\",\n    placeholder: \"1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.helperT,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }\n  }, `Customers can order quantities: ${getString()}`))));\n}\n\n_s(Quantity, \"jK3J0Kg0i1VjNmabT3mJuL3tWYo=\", false, function () {\n  return [useField, useField, useField];\n});\n\n_c = Quantity;\n\nvar _c;\n\n$RefreshReg$(_c, \"Quantity\");","map":{"version":3,"sources":["/home/harish/windo/phoenix/src/components/products/Quantity.jsx"],"names":["React","cx","FormikInput","Clickable","Switch","useField","styles","TABS","label","value","Quantity","enabled","setValue","quantity","type","setType","operator","a","b","minQuantity","group","getMinValue","getString","index","options","maxQuantity","temp","minValue","push","list","filter","x","map","length","join","container","head","title1","head1","title","tabs","t","tab","active","helperT"],"mappings":"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","sourcesContent":["import React from 'react';\nimport cx from 'classnames';\nimport {\n  FormikInput, Clickable,\n} from 'phoenix-components';\nimport { Switch } from 'phoenix-components';\nimport { useField } from 'formik';\nimport styles from './Quantity.module.css';\n\nconst TABS = [\n  {\n    label: 'Limited',\n    value: 'finite',\n  },\n  {\n    label: 'Unlimited',\n    value: 'infinite',\n  },\n];\n\nexport default function Quantity() {\n//   const isDesktop = useDesktop();\n  const [{ value: enabled }, , { setValue }] = useField('quantity.enabled');\n  // eslint-disable-next-line array-bracket-spacing\n  const [{ value: quantity }, , ] = useField('quantity');\n  // eslint-disable-next-line array-bracket-spacing\n  const [{ value: type }, , { setValue: setType } ] = useField('quantity.type');\n\n  const operator = (a, b) => {\n    if (quantity.minQuantity >= quantity.group) {\n      return a + b;\n    }\n    return quantity.group * b;\n  };\n\n  const getMinValue = () => (quantity.minQuantity > quantity.group ? quantity.minQuantity : quantity.group);\n\n  const getString = () => {\n    if (type === 'infinite') {\n      return 'unlimited';\n    }\n    let index = 0;\n    const options = [];\n    while (index <= quantity.maxQuantity) {\n      const temp = {};\n      const minValue = getMinValue();\n      temp.value = operator(minValue, index);\n      temp.label = operator(minValue, index);\n      options.push(temp);\n      // eslint-disable-next-line operator-assignment\n      index = +(index + (quantity.minQuantity >= quantity.group ? quantity.group : 1));\n      if (index === 0) {\n        index = quantity.maxQuantity + 1;\n      }\n    }\n    const list = options.filter(x => x.value <= quantity.maxQuantity && x.value > 0).map(x => x.value);\n    if (list.length > 4) {\n      return `${list[0]}, ${list[1]}, ${list[2]} ... upto ${list[list.length - 1]} items`;\n    }\n    return list.join(',');\n  };\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.head}>\n        Order Quantity\n        <Switch\n          active={enabled}\n          onChange={() => {\n            setValue(!enabled);\n          }}\n        />\n      </div>\n      <div className={styles.title1}>\n        <FormikInput\n          variant=\"outlined\"\n          name=\"quantity.minQuantity\"\n          type=\"number\"\n          label=\"Minimum Quantity\"\n          placeholder=\"e.g.1\"\n        />\n        <div className={styles.head1}>Maximum Order Quantity</div>\n        <div className={styles.title}>\n          <div className={styles.tabs}>\n            {TABS.map(t => (\n              <Clickable\n                onClick={() => {\n                  setType(t.value);\n                }}\n                className={cx(styles.tab, { [styles.active]: t.value === (type || 'infinite') })}\n              >\n                {t.label}\n              </Clickable>\n            ))}\n          </div>\n        </div>\n      </div>\n      <div>\n        {type === 'finite' && (\n          <>\n            <FormikInput\n              variant=\"outlined\"\n              name=\"quantity.maxQuantity\"\n              type=\"number\"\n              label=\"Maximum Quantity\"\n              placeholder=\"e.g.1\"\n            />\n            <FormikInput\n              variant=\"outlined\"\n              name=\"quantity.group\"\n              type=\"number\"\n              label=\"Group Of\"\n              placeholder=\"1\"\n            />\n            <div className={styles.helperT}>\n              {`Customers can order quantities: ${getString()}`}\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}