{"ast":null,"code":"import _ from 'lodash';\nimport { CountriesAndUnicodes } from \"./countriesDump\"; // import { getParamByISO } from 'iso-country-currency';\n\nexport const getCountries = () => CountriesAndUnicodes;\n\nconst getISO = () => {\n  const all = getCountries().map(x => ({\n    [x.iso]: x.countryName\n  }));\n  return _.reduce(all, (memo, current) => _.assign(memo, current), {});\n};\n\nexport const countryMap = Object.freeze(getISO());\nexport const inverseCountryMap = _.invert(countryMap);\nexport const getCurrencyByCountry = country => {\n  var _getCountries$find;\n\n  return ((_getCountries$find = getCountries().find(x => x.countryName.toLowerCase() === country)) === null || _getCountries$find === void 0 ? void 0 : _getCountries$find.currency) || 'INR';\n};\nexport const getCurrencySymbolByCountry = country => {\n  const value = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: getCurrencyByCountry(country)\n  }).format(1).charAt(0);\n  return value;\n};\nexport const isStripeAllowed = country => getCountries().filter(x => x.stripeAllowed).map(x => x.countryName).includes(country === null || country === void 0 ? void 0 : country.toLowerCase());\nexport const isPayPalAllowed = country => getCountries().filter(x => x.paypalAllowed).map(x => x.countryName).includes(country === null || country === void 0 ? void 0 : country.toLowerCase());\nconst flutterWaveSupported = ['NGN', 'GHS', 'ZAR', 'ARS', 'BRL', 'GBP', 'CAD', 'CVE', 'CLP', 'COP', 'CDF', 'EGP', 'EUR', 'GMD', 'GNF', 'KES', 'LRD', 'MWK', 'MXN', 'MAD', 'MZN', 'RWF', 'SLL', 'STD', 'TZS', 'UGX', 'XAF', 'XOF', 'ZMK'];\nexport const isFlutterWaveAllowed = currency => flutterWaveSupported.includes(currency === null || currency === void 0 ? void 0 : currency.toUpperCase());\nexport const isPayStackAllowed = currency => ['GHS', 'KES', 'NGN', 'TZS', 'UGX', 'ZAR'].includes(currency === null || currency === void 0 ? void 0 : currency.toUpperCase());","map":{"version":3,"sources":["/home/harish/windo/phoenix/src/utils/countries.js"],"names":["_","CountriesAndUnicodes","getCountries","getISO","all","map","x","iso","countryName","reduce","memo","current","assign","countryMap","Object","freeze","inverseCountryMap","invert","getCurrencyByCountry","country","find","toLowerCase","currency","getCurrencySymbolByCountry","value","Intl","NumberFormat","style","format","charAt","isStripeAllowed","filter","stripeAllowed","includes","isPayPalAllowed","paypalAllowed","flutterWaveSupported","isFlutterWaveAllowed","toUpperCase","isPayStackAllowed"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport { CountriesAndUnicodes } from './countriesDump';\n// import { getParamByISO } from 'iso-country-currency';\n\nexport const getCountries = () => CountriesAndUnicodes;\n\nconst getISO = () => {\n  const all = getCountries().map(x => ({\n    [x.iso]: x.countryName\n  }));\n  return _.reduce(all, (memo, current) => _.assign(memo, current), {});\n};\n\nexport const countryMap = Object.freeze(getISO());\n\nexport const inverseCountryMap = _.invert(countryMap);\n\nexport const getCurrencyByCountry = country => getCountries()\n  .find(x => x.countryName.toLowerCase() === country)?.currency || 'INR';\n\nexport const getCurrencySymbolByCountry = country => {\n  const value = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: getCurrencyByCountry(country),\n  }).format(1).charAt(0);\n  return value;\n};\n\nexport const isStripeAllowed = (country) => getCountries()\n  .filter(x => x.stripeAllowed)\n  .map(x => x.countryName)\n  .includes(country?.toLowerCase());\n\nexport const isPayPalAllowed = (country) => getCountries()\n  .filter(x => x.paypalAllowed)\n  .map(x => x.countryName)\n  .includes(country?.toLowerCase());\n\nconst flutterWaveSupported = ['NGN', 'GHS', 'ZAR', 'ARS', 'BRL', 'GBP', 'CAD', 'CVE', 'CLP', 'COP',\n  'CDF', 'EGP', 'EUR', 'GMD', 'GNF', 'KES', 'LRD', 'MWK', 'MXN', 'MAD', 'MZN', 'RWF', 'SLL', 'STD',\n  'TZS', 'UGX', 'XAF', 'XOF', 'ZMK'];\n\nexport const isFlutterWaveAllowed = (currency) => flutterWaveSupported.includes(currency?.toUpperCase());\n\nexport const isPayStackAllowed = (currency) => ['GHS', 'KES', 'NGN', 'TZS', 'UGX', 'ZAR']\n  .includes(currency?.toUpperCase());\n"]},"metadata":{},"sourceType":"module"}