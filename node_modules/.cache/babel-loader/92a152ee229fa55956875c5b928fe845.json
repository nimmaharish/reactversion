{"ast":null,"code":"import { registerServices as registerErrorServices } from './error-logging';\nimport { registerServices as registerPerfServices } from './performance-monitoring';\nimport { ServiceFactory } from './common/service-factory';\nimport { isPlatformSupported, scheduleMicroTask, scheduleMacroTask, isBrowser } from './common/utils';\nimport { patchAll, patchEventHandler } from './common/patching';\nimport { PAGE_LOAD, ERROR, CONFIG_SERVICE, LOGGING_SERVICE, APM_SERVER } from './common/constants';\nimport { getInstrumentationFlags } from './common/instrument';\nimport afterFrame from './common/after-frame';\nimport { bootstrap } from './bootstrap';\nimport { createTracer } from './opentracing';\n\nfunction createServiceFactory() {\n  registerPerfServices();\n  registerErrorServices();\n  var serviceFactory = new ServiceFactory();\n  return serviceFactory;\n}\n\nexport { createServiceFactory, ServiceFactory, patchAll, patchEventHandler, isPlatformSupported, isBrowser, getInstrumentationFlags, createTracer, scheduleMicroTask, scheduleMacroTask, afterFrame, ERROR, PAGE_LOAD, CONFIG_SERVICE, LOGGING_SERVICE, APM_SERVER, bootstrap };","map":{"version":3,"sources":["/home/harish/windo/phoenix/node_modules/@elastic/apm-rum-core/dist/es/index.js"],"names":["registerServices","registerErrorServices","registerPerfServices","ServiceFactory","isPlatformSupported","scheduleMicroTask","scheduleMacroTask","isBrowser","patchAll","patchEventHandler","PAGE_LOAD","ERROR","CONFIG_SERVICE","LOGGING_SERVICE","APM_SERVER","getInstrumentationFlags","afterFrame","bootstrap","createTracer","createServiceFactory","serviceFactory"],"mappings":"AAAA,SAASA,gBAAgB,IAAIC,qBAA7B,QAA0D,iBAA1D;AACA,SAASD,gBAAgB,IAAIE,oBAA7B,QAAyD,0BAAzD;AACA,SAASC,cAAT,QAA+B,0BAA/B;AACA,SAASC,mBAAT,EAA8BC,iBAA9B,EAAiDC,iBAAjD,EAAoEC,SAApE,QAAqF,gBAArF;AACA,SAASC,QAAT,EAAmBC,iBAAnB,QAA4C,mBAA5C;AACA,SAASC,SAAT,EAAoBC,KAApB,EAA2BC,cAA3B,EAA2CC,eAA3C,EAA4DC,UAA5D,QAA8E,oBAA9E;AACA,SAASC,uBAAT,QAAwC,qBAAxC;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,YAAT,QAA6B,eAA7B;;AAEA,SAASC,oBAAT,GAAgC;AAC9BjB,EAAAA,oBAAoB;AACpBD,EAAAA,qBAAqB;AACrB,MAAImB,cAAc,GAAG,IAAIjB,cAAJ,EAArB;AACA,SAAOiB,cAAP;AACD;;AAED,SAASD,oBAAT,EAA+BhB,cAA/B,EAA+CK,QAA/C,EAAyDC,iBAAzD,EAA4EL,mBAA5E,EAAiGG,SAAjG,EAA4GQ,uBAA5G,EAAqIG,YAArI,EAAmJb,iBAAnJ,EAAsKC,iBAAtK,EAAyLU,UAAzL,EAAqML,KAArM,EAA4MD,SAA5M,EAAuNE,cAAvN,EAAuOC,eAAvO,EAAwPC,UAAxP,EAAoQG,SAApQ","sourcesContent":["import { registerServices as registerErrorServices } from './error-logging';\nimport { registerServices as registerPerfServices } from './performance-monitoring';\nimport { ServiceFactory } from './common/service-factory';\nimport { isPlatformSupported, scheduleMicroTask, scheduleMacroTask, isBrowser } from './common/utils';\nimport { patchAll, patchEventHandler } from './common/patching';\nimport { PAGE_LOAD, ERROR, CONFIG_SERVICE, LOGGING_SERVICE, APM_SERVER } from './common/constants';\nimport { getInstrumentationFlags } from './common/instrument';\nimport afterFrame from './common/after-frame';\nimport { bootstrap } from './bootstrap';\nimport { createTracer } from './opentracing';\n\nfunction createServiceFactory() {\n  registerPerfServices();\n  registerErrorServices();\n  var serviceFactory = new ServiceFactory();\n  return serviceFactory;\n}\n\nexport { createServiceFactory, ServiceFactory, patchAll, patchEventHandler, isPlatformSupported, isBrowser, getInstrumentationFlags, createTracer, scheduleMicroTask, scheduleMacroTask, afterFrame, ERROR, PAGE_LOAD, CONFIG_SERVICE, LOGGING_SERVICE, APM_SERVER, bootstrap };"]},"metadata":{},"sourceType":"module"}