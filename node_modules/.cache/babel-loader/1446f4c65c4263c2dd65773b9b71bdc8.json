{"ast":null,"code":"import { noop } from './utils';\n\nvar LoggingService = function () {\n  function LoggingService(spec) {\n    if (spec === void 0) {\n      spec = {};\n    }\n\n    this.levels = ['trace', 'debug', 'info', 'warn', 'error'];\n    this.level = spec.level || 'warn';\n    this.prefix = spec.prefix || '';\n    this.resetLogMethods();\n  }\n\n  var _proto = LoggingService.prototype;\n\n  _proto.shouldLog = function shouldLog(level) {\n    return this.levels.indexOf(level) >= this.levels.indexOf(this.level);\n  };\n\n  _proto.setLevel = function setLevel(level) {\n    if (level === this.level) {\n      return;\n    }\n\n    this.level = level;\n    this.resetLogMethods();\n  };\n\n  _proto.resetLogMethods = function resetLogMethods() {\n    var _this = this;\n\n    this.levels.forEach(function (level) {\n      _this[level] = _this.shouldLog(level) ? log : noop;\n\n      function log() {\n        var normalizedLevel = level;\n\n        if (level === 'trace' || level === 'debug') {\n          normalizedLevel = 'info';\n        }\n\n        var args = arguments;\n        args[0] = this.prefix + args[0];\n\n        if (console) {\n          var realMethod = console[normalizedLevel] || console.log;\n\n          if (typeof realMethod === 'function') {\n            realMethod.apply(console, args);\n          }\n        }\n      }\n    });\n  };\n\n  return LoggingService;\n}();\n\nexport default LoggingService;","map":{"version":3,"sources":["/home/harish/windo/phoenix/node_modules/@elastic/apm-rum-core/dist/es/common/logging-service.js"],"names":["noop","LoggingService","spec","levels","level","prefix","resetLogMethods","_proto","prototype","shouldLog","indexOf","setLevel","_this","forEach","log","normalizedLevel","args","arguments","console","realMethod","apply"],"mappings":"AAAA,SAASA,IAAT,QAAqB,SAArB;;AAEA,IAAIC,cAAc,GAAG,YAAY;AAC/B,WAASA,cAAT,CAAwBC,IAAxB,EAA8B;AAC5B,QAAIA,IAAI,KAAK,KAAK,CAAlB,EAAqB;AACnBA,MAAAA,IAAI,GAAG,EAAP;AACD;;AAED,SAAKC,MAAL,GAAc,CAAC,OAAD,EAAU,OAAV,EAAmB,MAAnB,EAA2B,MAA3B,EAAmC,OAAnC,CAAd;AACA,SAAKC,KAAL,GAAaF,IAAI,CAACE,KAAL,IAAc,MAA3B;AACA,SAAKC,MAAL,GAAcH,IAAI,CAACG,MAAL,IAAe,EAA7B;AACA,SAAKC,eAAL;AACD;;AAED,MAAIC,MAAM,GAAGN,cAAc,CAACO,SAA5B;;AAEAD,EAAAA,MAAM,CAACE,SAAP,GAAmB,SAASA,SAAT,CAAmBL,KAAnB,EAA0B;AAC3C,WAAO,KAAKD,MAAL,CAAYO,OAAZ,CAAoBN,KAApB,KAA8B,KAAKD,MAAL,CAAYO,OAAZ,CAAoB,KAAKN,KAAzB,CAArC;AACD,GAFD;;AAIAG,EAAAA,MAAM,CAACI,QAAP,GAAkB,SAASA,QAAT,CAAkBP,KAAlB,EAAyB;AACzC,QAAIA,KAAK,KAAK,KAAKA,KAAnB,EAA0B;AACxB;AACD;;AAED,SAAKA,KAAL,GAAaA,KAAb;AACA,SAAKE,eAAL;AACD,GAPD;;AASAC,EAAAA,MAAM,CAACD,eAAP,GAAyB,SAASA,eAAT,GAA2B;AAClD,QAAIM,KAAK,GAAG,IAAZ;;AAEA,SAAKT,MAAL,CAAYU,OAAZ,CAAoB,UAAUT,KAAV,EAAiB;AACnCQ,MAAAA,KAAK,CAACR,KAAD,CAAL,GAAeQ,KAAK,CAACH,SAAN,CAAgBL,KAAhB,IAAyBU,GAAzB,GAA+Bd,IAA9C;;AAEA,eAASc,GAAT,GAAe;AACb,YAAIC,eAAe,GAAGX,KAAtB;;AAEA,YAAIA,KAAK,KAAK,OAAV,IAAqBA,KAAK,KAAK,OAAnC,EAA4C;AAC1CW,UAAAA,eAAe,GAAG,MAAlB;AACD;;AAED,YAAIC,IAAI,GAAGC,SAAX;AACAD,QAAAA,IAAI,CAAC,CAAD,CAAJ,GAAU,KAAKX,MAAL,GAAcW,IAAI,CAAC,CAAD,CAA5B;;AAEA,YAAIE,OAAJ,EAAa;AACX,cAAIC,UAAU,GAAGD,OAAO,CAACH,eAAD,CAAP,IAA4BG,OAAO,CAACJ,GAArD;;AAEA,cAAI,OAAOK,UAAP,KAAsB,UAA1B,EAAsC;AACpCA,YAAAA,UAAU,CAACC,KAAX,CAAiBF,OAAjB,EAA0BF,IAA1B;AACD;AACF;AACF;AACF,KArBD;AAsBD,GAzBD;;AA2BA,SAAOf,cAAP;AACD,CAvDoB,EAArB;;AAyDA,eAAeA,cAAf","sourcesContent":["import { noop } from './utils';\n\nvar LoggingService = function () {\n  function LoggingService(spec) {\n    if (spec === void 0) {\n      spec = {};\n    }\n\n    this.levels = ['trace', 'debug', 'info', 'warn', 'error'];\n    this.level = spec.level || 'warn';\n    this.prefix = spec.prefix || '';\n    this.resetLogMethods();\n  }\n\n  var _proto = LoggingService.prototype;\n\n  _proto.shouldLog = function shouldLog(level) {\n    return this.levels.indexOf(level) >= this.levels.indexOf(this.level);\n  };\n\n  _proto.setLevel = function setLevel(level) {\n    if (level === this.level) {\n      return;\n    }\n\n    this.level = level;\n    this.resetLogMethods();\n  };\n\n  _proto.resetLogMethods = function resetLogMethods() {\n    var _this = this;\n\n    this.levels.forEach(function (level) {\n      _this[level] = _this.shouldLog(level) ? log : noop;\n\n      function log() {\n        var normalizedLevel = level;\n\n        if (level === 'trace' || level === 'debug') {\n          normalizedLevel = 'info';\n        }\n\n        var args = arguments;\n        args[0] = this.prefix + args[0];\n\n        if (console) {\n          var realMethod = console[normalizedLevel] || console.log;\n\n          if (typeof realMethod === 'function') {\n            realMethod.apply(console, args);\n          }\n        }\n      }\n    });\n  };\n\n  return LoggingService;\n}();\n\nexport default LoggingService;"]},"metadata":{},"sourceType":"module"}