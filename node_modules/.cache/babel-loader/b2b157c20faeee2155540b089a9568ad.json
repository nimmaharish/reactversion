{"ast":null,"code":"import { __read } from \"tslib\";\nimport { isDebugBuild } from './env';\nimport { SentryError } from './error';\n/** Regular expression used to parse a Dsn. */\n\nvar DSN_REGEX = /^(?:(\\w+):)\\/\\/(?:(\\w+)(?::(\\w+))?@)([\\w.-]+)(?::(\\d+))?\\/(.+)/;\n\nfunction isValidProtocol(protocol) {\n  return protocol === 'http' || protocol === 'https';\n}\n/**\n * Renders the string representation of this Dsn.\n *\n * By default, this will render the public representation without the password\n * component. To get the deprecated private representation, set `withPassword`\n * to true.\n *\n * @param withPassword When set to true, the password will be included.\n */\n\n\nexport function dsnToString(dsn, withPassword) {\n  if (withPassword === void 0) {\n    withPassword = false;\n  }\n\n  var host = dsn.host,\n      path = dsn.path,\n      pass = dsn.pass,\n      port = dsn.port,\n      projectId = dsn.projectId,\n      protocol = dsn.protocol,\n      publicKey = dsn.publicKey;\n  return protocol + \"://\" + publicKey + (withPassword && pass ? \":\" + pass : '') + (\"@\" + host + (port ? \":\" + port : '') + \"/\" + (path ? path + \"/\" : path) + projectId);\n}\n\nfunction dsnFromString(str) {\n  var match = DSN_REGEX.exec(str);\n\n  if (!match) {\n    throw new SentryError(\"Invalid Sentry Dsn: \" + str);\n  }\n\n  var _a = __read(match.slice(1), 6),\n      protocol = _a[0],\n      publicKey = _a[1],\n      _b = _a[2],\n      pass = _b === void 0 ? '' : _b,\n      host = _a[3],\n      _c = _a[4],\n      port = _c === void 0 ? '' : _c,\n      lastPath = _a[5];\n\n  var path = '';\n  var projectId = lastPath;\n  var split = projectId.split('/');\n\n  if (split.length > 1) {\n    path = split.slice(0, -1).join('/');\n    projectId = split.pop();\n  }\n\n  if (projectId) {\n    var projectMatch = projectId.match(/^\\d+/);\n\n    if (projectMatch) {\n      projectId = projectMatch[0];\n    }\n  }\n\n  return dsnFromComponents({\n    host: host,\n    pass: pass,\n    path: path,\n    projectId: projectId,\n    port: port,\n    protocol: protocol,\n    publicKey: publicKey\n  });\n}\n\nfunction dsnFromComponents(components) {\n  // TODO this is for backwards compatibility, and can be removed in a future version\n  if ('user' in components && !('publicKey' in components)) {\n    components.publicKey = components.user;\n  }\n\n  return {\n    user: components.publicKey || '',\n    protocol: components.protocol,\n    publicKey: components.publicKey || '',\n    pass: components.pass || '',\n    host: components.host,\n    port: components.port || '',\n    path: components.path || '',\n    projectId: components.projectId\n  };\n}\n\nfunction validateDsn(dsn) {\n  if (!isDebugBuild()) {\n    return;\n  }\n\n  var port = dsn.port,\n      projectId = dsn.projectId,\n      protocol = dsn.protocol;\n  var requiredComponents = ['protocol', 'publicKey', 'host', 'projectId'];\n  requiredComponents.forEach(function (component) {\n    if (!dsn[component]) {\n      throw new SentryError(\"Invalid Sentry Dsn: \" + component + \" missing\");\n    }\n  });\n\n  if (!projectId.match(/^\\d+$/)) {\n    throw new SentryError(\"Invalid Sentry Dsn: Invalid projectId \" + projectId);\n  }\n\n  if (!isValidProtocol(protocol)) {\n    throw new SentryError(\"Invalid Sentry Dsn: Invalid protocol \" + protocol);\n  }\n\n  if (port && isNaN(parseInt(port, 10))) {\n    throw new SentryError(\"Invalid Sentry Dsn: Invalid port \" + port);\n  }\n\n  return true;\n}\n/** The Sentry Dsn, identifying a Sentry instance and project. */\n\n\nexport function makeDsn(from) {\n  var components = typeof from === 'string' ? dsnFromString(from) : dsnFromComponents(from);\n  validateDsn(components);\n  return components;\n}","map":{"version":3,"sources":["../src/dsn.ts"],"names":[],"mappings":"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","sourcesContent":["import { DsnComponents, DsnLike, DsnProtocol } from '@sentry/types';\n\nimport { isDebugBuild } from './env';\nimport { SentryError } from './error';\n\n/** Regular expression used to parse a Dsn. */\nconst DSN_REGEX = /^(?:(\\w+):)\\/\\/(?:(\\w+)(?::(\\w+))?@)([\\w.-]+)(?::(\\d+))?\\/(.+)/;\n\nfunction isValidProtocol(protocol?: string): protocol is DsnProtocol {\n  return protocol === 'http' || protocol === 'https';\n}\n\n/**\n * Renders the string representation of this Dsn.\n *\n * By default, this will render the public representation without the password\n * component. To get the deprecated private representation, set `withPassword`\n * to true.\n *\n * @param withPassword When set to true, the password will be included.\n */\nexport function dsnToString(dsn: DsnComponents, withPassword: boolean = false): string {\n  const { host, path, pass, port, projectId, protocol, publicKey } = dsn;\n  return (\n    `${protocol}://${publicKey}${withPassword && pass ? `:${pass}` : ''}` +\n    `@${host}${port ? `:${port}` : ''}/${path ? `${path}/` : path}${projectId}`\n  );\n}\n\nfunction dsnFromString(str: string): DsnComponents {\n  const match = DSN_REGEX.exec(str);\n\n  if (!match) {\n    throw new SentryError(`Invalid Sentry Dsn: ${str}`);\n  }\n\n  const [protocol, publicKey, pass = '', host, port = '', lastPath] = match.slice(1);\n  let path = '';\n  let projectId = lastPath;\n\n  const split = projectId.split('/');\n  if (split.length > 1) {\n    path = split.slice(0, -1).join('/');\n    projectId = split.pop() as string;\n  }\n\n  if (projectId) {\n    const projectMatch = projectId.match(/^\\d+/);\n    if (projectMatch) {\n      projectId = projectMatch[0];\n    }\n  }\n\n  return dsnFromComponents({ host, pass, path, projectId, port, protocol: protocol as DsnProtocol, publicKey });\n}\n\nfunction dsnFromComponents(components: DsnComponents): DsnComponents {\n  // TODO this is for backwards compatibility, and can be removed in a future version\n  if ('user' in components && !('publicKey' in components)) {\n    components.publicKey = components.user;\n  }\n\n  return {\n    user: components.publicKey || '',\n    protocol: components.protocol,\n    publicKey: components.publicKey || '',\n    pass: components.pass || '',\n    host: components.host,\n    port: components.port || '',\n    path: components.path || '',\n    projectId: components.projectId,\n  };\n}\n\nfunction validateDsn(dsn: DsnComponents): boolean | void {\n  if (!isDebugBuild()) {\n    return;\n  }\n\n  const { port, projectId, protocol } = dsn;\n\n  const requiredComponents: ReadonlyArray<keyof DsnComponents> = ['protocol', 'publicKey', 'host', 'projectId'];\n  requiredComponents.forEach(component => {\n    if (!dsn[component]) {\n      throw new SentryError(`Invalid Sentry Dsn: ${component} missing`);\n    }\n  });\n\n  if (!projectId.match(/^\\d+$/)) {\n    throw new SentryError(`Invalid Sentry Dsn: Invalid projectId ${projectId}`);\n  }\n\n  if (!isValidProtocol(protocol)) {\n    throw new SentryError(`Invalid Sentry Dsn: Invalid protocol ${protocol}`);\n  }\n\n  if (port && isNaN(parseInt(port, 10))) {\n    throw new SentryError(`Invalid Sentry Dsn: Invalid port ${port}`);\n  }\n\n  return true;\n}\n\n/** The Sentry Dsn, identifying a Sentry instance and project. */\nexport function makeDsn(from: DsnLike): DsnComponents {\n  const components = typeof from === 'string' ? dsnFromString(from) : dsnFromComponents(from);\n\n  validateDsn(components);\n\n  return components;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}